
======================================================================
                 ðŸ§ª C to PlantUML Converter Test Suite                 
======================================================================
Working directory: /home/runner/work/generator_project/generator_project
Python version: 3.9.23 (main, Jun  4 2025, 04:11:23) 
[GCC 13.3.0]
Script directory: /home/runner/work/generator_project/generator_project

--------------------------------------------------
              Checking Dependencies               
--------------------------------------------------
âœ… pytest is available
âœ… coverage is available

--------------------------------------------------
           Running Tests with unittest            
--------------------------------------------------
test_generate_command_isolation (feature.test_cli_feature.TestCLIFeature)
Test that generate command works when called independently without model files ... 2025-07-25 21:03:42,707 - root - INFO - Using config: /tmp/tmpgcqsz5tk/config.json
2025-07-25 21:03:42,708 - root - INFO - Output folder: /tmp/tmpgcqsz5tk/output
2025-07-25 21:03:42,708 - root - ERROR - No model file found for generation.


ok
test_generate_fallback_to_model (feature.test_cli_feature.TestCLIFeature) ... 2025-07-25 21:03:42,769 - root - INFO - Using config: /tmp/tmp5a12eolh/config.json
2025-07-25 21:03:42,769 - root - INFO - Output folder: /tmp/tmp5a12eolh/output
2025-07-25 21:03:42,770 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 1 source folders
2025-07-25 21:03:42,770 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmp5a12eolh
2025-07-25 21:03:42,771 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmp5a12eolh
2025-07-25 21:03:42,771 - c_to_plantuml.parser - INFO - Using include depth: 1
2025-07-25 21:03:42,772 - c_to_plantuml.parser - INFO - Initial C files after filtering: 1 files
2025-07-25 21:03:42,772 - c_to_plantuml.parser - INFO - Processing include iteration 1
2025-07-25 21:03:42,772 - c_to_plantuml.parser - INFO - Iteration 1: Added 0 new files
2025-07-25 21:03:42,772 - c_to_plantuml.parser - INFO - No new files found in iteration 1, stopping early
2025-07-25 21:03:42,772 - c_to_plantuml.parser - INFO - Final file list: 1 files
2025-07-25 21:03:42,772 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:42,773 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
2025-07-25 21:03:42,773 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmp5a12eolh: 1 files
2025-07-25 21:03:42,773 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:42,774 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:42,774 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:42,774 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmp5a12eolh/output/model.json
2025-07-25 21:03:42,774 - c_to_plantuml.parser - INFO - Found 1 total files across 1 source folder(s)
2025-07-25 21:03:42,774 - c_to_plantuml.parser - INFO - Summary: 1 structs, 0 enums, 1 functions
2025-07-25 21:03:42,774 - root - INFO - Model saved to: /tmp/tmp5a12eolh/output/model.json


2025-07-25 21:03:42,835 - root - INFO - Using config: /tmp/tmp5a12eolh/config.json
2025-07-25 21:03:42,835 - root - INFO - Output folder: /tmp/tmp5a12eolh/output
2025-07-25 21:03:42,835 - root - INFO - PlantUML generation complete! Output in: /tmp/tmp5a12eolh/output


ok
test_generate_prefers_transformed (feature.test_cli_feature.TestCLIFeature) ... 2025-07-25 21:03:42,899 - root - INFO - Using config: /tmp/tmpc2r4apjn/config.json
2025-07-25 21:03:42,899 - root - INFO - Output folder: /tmp/tmpc2r4apjn/output
2025-07-25 21:03:42,901 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 1 source folders
2025-07-25 21:03:42,901 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmpc2r4apjn
2025-07-25 21:03:42,901 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpc2r4apjn
2025-07-25 21:03:42,901 - c_to_plantuml.parser - INFO - Using include depth: 1
2025-07-25 21:03:42,902 - c_to_plantuml.parser - INFO - Initial C files after filtering: 1 files
2025-07-25 21:03:42,902 - c_to_plantuml.parser - INFO - Processing include iteration 1
2025-07-25 21:03:42,903 - c_to_plantuml.parser - INFO - Iteration 1: Added 0 new files
2025-07-25 21:03:42,903 - c_to_plantuml.parser - INFO - No new files found in iteration 1, stopping early
2025-07-25 21:03:42,903 - c_to_plantuml.parser - INFO - Final file list: 1 files
2025-07-25 21:03:42,903 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:42,904 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
2025-07-25 21:03:42,904 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmpc2r4apjn: 1 files
2025-07-25 21:03:42,904 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:42,905 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:42,905 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:42,905 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmpc2r4apjn/output/model.json
2025-07-25 21:03:42,905 - c_to_plantuml.parser - INFO - Found 1 total files across 1 source folder(s)
2025-07-25 21:03:42,905 - c_to_plantuml.parser - INFO - Summary: 1 structs, 0 enums, 1 functions
2025-07-25 21:03:42,905 - root - INFO - Model saved to: /tmp/tmpc2r4apjn/output/model.json


2025-07-25 21:03:42,968 - root - INFO - Using config: /tmp/tmpc2r4apjn/config.json
2025-07-25 21:03:42,968 - root - INFO - Output folder: /tmp/tmpc2r4apjn/output
2025-07-25 21:03:42,968 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpc2r4apjn/output/model.json
2025-07-25 21:03:42,968 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:42,968 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 1 files
2025-07-25 21:03:42,969 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpc2r4apjn/output/model_transformed.json
2025-07-25 21:03:42,969 - root - INFO - Transformed model saved to: /tmp/tmpc2r4apjn/output/model_transformed.json


2025-07-25 21:03:43,030 - root - INFO - Using config: /tmp/tmpc2r4apjn/config.json
2025-07-25 21:03:43,030 - root - INFO - Output folder: /tmp/tmpc2r4apjn/output
2025-07-25 21:03:43,031 - root - INFO - PlantUML generation complete! Output in: /tmp/tmpc2r4apjn/output


ok
test_parse_only (feature.test_cli_feature.TestCLIFeature) ... 2025-07-25 21:03:43,095 - root - INFO - Using config: /tmp/tmpyfyoj2vd/config.json
2025-07-25 21:03:43,095 - root - INFO - Output folder: /tmp/tmpyfyoj2vd/output
2025-07-25 21:03:43,096 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 1 source folders
2025-07-25 21:03:43,096 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmpyfyoj2vd
2025-07-25 21:03:43,096 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpyfyoj2vd
2025-07-25 21:03:43,096 - c_to_plantuml.parser - INFO - Using include depth: 1
2025-07-25 21:03:43,098 - c_to_plantuml.parser - INFO - Initial C files after filtering: 1 files
2025-07-25 21:03:43,098 - c_to_plantuml.parser - INFO - Processing include iteration 1
2025-07-25 21:03:43,098 - c_to_plantuml.parser - INFO - Iteration 1: Added 0 new files
2025-07-25 21:03:43,098 - c_to_plantuml.parser - INFO - No new files found in iteration 1, stopping early
2025-07-25 21:03:43,098 - c_to_plantuml.parser - INFO - Final file list: 1 files
2025-07-25 21:03:43,098 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:43,099 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
2025-07-25 21:03:43,099 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmpyfyoj2vd: 1 files
2025-07-25 21:03:43,099 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:43,100 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:43,100 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:43,100 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmpyfyoj2vd/output/model.json
2025-07-25 21:03:43,100 - c_to_plantuml.parser - INFO - Found 1 total files across 1 source folder(s)
2025-07-25 21:03:43,100 - c_to_plantuml.parser - INFO - Summary: 1 structs, 0 enums, 1 functions
2025-07-25 21:03:43,100 - root - INFO - Model saved to: /tmp/tmpyfyoj2vd/output/model.json


ok
test_transform_only (feature.test_cli_feature.TestCLIFeature) ... 2025-07-25 21:03:43,165 - root - INFO - Using config: /tmp/tmp2qz1gfd5/config.json
2025-07-25 21:03:43,165 - root - INFO - Output folder: /tmp/tmp2qz1gfd5/output
2025-07-25 21:03:43,166 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 1 source folders
2025-07-25 21:03:43,166 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmp2qz1gfd5
2025-07-25 21:03:43,166 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmp2qz1gfd5
2025-07-25 21:03:43,167 - c_to_plantuml.parser - INFO - Using include depth: 1
2025-07-25 21:03:43,168 - c_to_plantuml.parser - INFO - Initial C files after filtering: 1 files
2025-07-25 21:03:43,168 - c_to_plantuml.parser - INFO - Processing include iteration 1
2025-07-25 21:03:43,168 - c_to_plantuml.parser - INFO - Iteration 1: Added 0 new files
2025-07-25 21:03:43,168 - c_to_plantuml.parser - INFO - No new files found in iteration 1, stopping early
2025-07-25 21:03:43,168 - c_to_plantuml.parser - INFO - Final file list: 1 files
2025-07-25 21:03:43,168 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:43,169 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
2025-07-25 21:03:43,169 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmp2qz1gfd5: 1 files
2025-07-25 21:03:43,169 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:43,170 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:43,170 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:43,170 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmp2qz1gfd5/output/model.json
2025-07-25 21:03:43,170 - c_to_plantuml.parser - INFO - Found 1 total files across 1 source folder(s)
2025-07-25 21:03:43,170 - c_to_plantuml.parser - INFO - Summary: 1 structs, 0 enums, 1 functions
2025-07-25 21:03:43,170 - root - INFO - Model saved to: /tmp/tmp2qz1gfd5/output/model.json


2025-07-25 21:03:43,234 - root - INFO - Using config: /tmp/tmp2qz1gfd5/config.json
2025-07-25 21:03:43,234 - root - INFO - Output folder: /tmp/tmp2qz1gfd5/output
2025-07-25 21:03:43,234 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmp2qz1gfd5/output/model.json
2025-07-25 21:03:43,234 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:43,234 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 1 files
2025-07-25 21:03:43,235 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmp2qz1gfd5/output/model_transformed.json
2025-07-25 21:03:43,235 - root - INFO - Transformed model saved to: /tmp/tmp2qz1gfd5/output/model_transformed.json


ok
test_full_workflow_default (feature.test_cli_modes.TestCLIModes) ... 2025-07-25 21:03:43,298 - root - INFO - Using config: /tmp/tmpstpkm2t0/config.json
2025-07-25 21:03:43,299 - root - INFO - Output folder: /tmp/tmpstpkm2t0/output
2025-07-25 21:03:43,300 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 1 source folders
2025-07-25 21:03:43,300 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmpstpkm2t0
2025-07-25 21:03:43,300 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpstpkm2t0
2025-07-25 21:03:43,300 - c_to_plantuml.parser - INFO - Using include depth: 1
2025-07-25 21:03:43,301 - c_to_plantuml.parser - INFO - Initial C files after filtering: 1 files
2025-07-25 21:03:43,301 - c_to_plantuml.parser - INFO - Processing include iteration 1
2025-07-25 21:03:43,302 - c_to_plantuml.parser - INFO - Iteration 1: Added 0 new files
2025-07-25 21:03:43,302 - c_to_plantuml.parser - INFO - No new files found in iteration 1, stopping early
2025-07-25 21:03:43,302 - c_to_plantuml.parser - INFO - Final file list: 1 files
2025-07-25 21:03:43,302 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:43,302 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
2025-07-25 21:03:43,303 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmpstpkm2t0: 1 files
2025-07-25 21:03:43,303 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:43,304 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:43,304 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:43,304 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmpstpkm2t0/output/model.json
2025-07-25 21:03:43,304 - c_to_plantuml.parser - INFO - Found 1 total files across 1 source folder(s)
2025-07-25 21:03:43,304 - c_to_plantuml.parser - INFO - Summary: 1 structs, 0 enums, 1 functions
2025-07-25 21:03:43,304 - root - INFO - Model saved to: /tmp/tmpstpkm2t0/output/model.json
2025-07-25 21:03:43,304 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpstpkm2t0/output/model.json
2025-07-25 21:03:43,304 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:43,304 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 1 files
2025-07-25 21:03:43,305 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpstpkm2t0/output/model_transformed.json
2025-07-25 21:03:43,305 - root - INFO - Transformed model saved to: /tmp/tmpstpkm2t0/output/model_transformed.json
2025-07-25 21:03:43,305 - root - INFO - PlantUML generation complete! Output in: /tmp/tmpstpkm2t0/output
2025-07-25 21:03:43,305 - root - INFO - Complete workflow finished successfully!


ok
test_generate_mode_fallback_to_model (feature.test_cli_modes.TestCLIModes) ... 2025-07-25 21:03:43,368 - root - INFO - Using config: /tmp/tmp4g0ai0qv/config.json
2025-07-25 21:03:43,368 - root - INFO - Output folder: /tmp/tmp4g0ai0qv/output
2025-07-25 21:03:43,369 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 1 source folders
2025-07-25 21:03:43,369 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmp4g0ai0qv
2025-07-25 21:03:43,369 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmp4g0ai0qv
2025-07-25 21:03:43,370 - c_to_plantuml.parser - INFO - Using include depth: 1
2025-07-25 21:03:43,371 - c_to_plantuml.parser - INFO - Initial C files after filtering: 1 files
2025-07-25 21:03:43,371 - c_to_plantuml.parser - INFO - Processing include iteration 1
2025-07-25 21:03:43,371 - c_to_plantuml.parser - INFO - Iteration 1: Added 0 new files
2025-07-25 21:03:43,371 - c_to_plantuml.parser - INFO - No new files found in iteration 1, stopping early
2025-07-25 21:03:43,371 - c_to_plantuml.parser - INFO - Final file list: 1 files
2025-07-25 21:03:43,371 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:43,372 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
2025-07-25 21:03:43,372 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmp4g0ai0qv: 1 files
2025-07-25 21:03:43,372 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:43,373 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:43,373 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:43,373 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmp4g0ai0qv/output/model.json
2025-07-25 21:03:43,373 - c_to_plantuml.parser - INFO - Found 1 total files across 1 source folder(s)
2025-07-25 21:03:43,374 - c_to_plantuml.parser - INFO - Summary: 1 structs, 0 enums, 1 functions
2025-07-25 21:03:43,374 - root - INFO - Model saved to: /tmp/tmp4g0ai0qv/output/model.json


2025-07-25 21:03:43,437 - root - INFO - Using config: /tmp/tmp4g0ai0qv/config.json
2025-07-25 21:03:43,437 - root - INFO - Output folder: /tmp/tmp4g0ai0qv/output
2025-07-25 21:03:43,437 - root - INFO - PlantUML generation complete! Output in: /tmp/tmp4g0ai0qv/output


ok
test_generate_mode_isolation (feature.test_cli_modes.TestCLIModes)
Test that generate mode works when called independently without model files ... 2025-07-25 21:03:43,500 - root - INFO - Using config: /tmp/tmpzscwrc1m/config.json
2025-07-25 21:03:43,501 - root - INFO - Output folder: /tmp/tmpzscwrc1m/output
2025-07-25 21:03:43,501 - root - ERROR - No model file found for generation.


ok
test_generate_mode_prefers_transformed (feature.test_cli_modes.TestCLIModes) ... 2025-07-25 21:03:43,563 - root - INFO - Using config: /tmp/tmpc1xflahw/config.json
2025-07-25 21:03:43,563 - root - INFO - Output folder: /tmp/tmpc1xflahw/output
2025-07-25 21:03:43,565 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 1 source folders
2025-07-25 21:03:43,565 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmpc1xflahw
2025-07-25 21:03:43,565 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpc1xflahw
2025-07-25 21:03:43,565 - c_to_plantuml.parser - INFO - Using include depth: 1
2025-07-25 21:03:43,566 - c_to_plantuml.parser - INFO - Initial C files after filtering: 1 files
2025-07-25 21:03:43,566 - c_to_plantuml.parser - INFO - Processing include iteration 1
2025-07-25 21:03:43,566 - c_to_plantuml.parser - INFO - Iteration 1: Added 0 new files
2025-07-25 21:03:43,566 - c_to_plantuml.parser - INFO - No new files found in iteration 1, stopping early
2025-07-25 21:03:43,566 - c_to_plantuml.parser - INFO - Final file list: 1 files
2025-07-25 21:03:43,566 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:43,567 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
2025-07-25 21:03:43,567 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmpc1xflahw: 1 files
2025-07-25 21:03:43,567 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:43,568 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:43,568 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:43,568 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmpc1xflahw/output/model.json
2025-07-25 21:03:43,568 - c_to_plantuml.parser - INFO - Found 1 total files across 1 source folder(s)
2025-07-25 21:03:43,568 - c_to_plantuml.parser - INFO - Summary: 1 structs, 0 enums, 1 functions
2025-07-25 21:03:43,569 - root - INFO - Model saved to: /tmp/tmpc1xflahw/output/model.json


2025-07-25 21:03:43,630 - root - INFO - Using config: /tmp/tmpc1xflahw/config.json
2025-07-25 21:03:43,630 - root - INFO - Output folder: /tmp/tmpc1xflahw/output
2025-07-25 21:03:43,630 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpc1xflahw/output/model.json
2025-07-25 21:03:43,630 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:43,630 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 1 files
2025-07-25 21:03:43,631 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpc1xflahw/output/model_transformed.json
2025-07-25 21:03:43,631 - root - INFO - Transformed model saved to: /tmp/tmpc1xflahw/output/model_transformed.json


2025-07-25 21:03:43,692 - root - INFO - Using config: /tmp/tmpc1xflahw/config.json
2025-07-25 21:03:43,693 - root - INFO - Output folder: /tmp/tmpc1xflahw/output
2025-07-25 21:03:43,693 - root - INFO - PlantUML generation complete! Output in: /tmp/tmpc1xflahw/output


ok
test_parse_mode (feature.test_cli_modes.TestCLIModes) ... 2025-07-25 21:03:43,762 - root - INFO - Using config: /tmp/tmplfqa13vj/config.json
2025-07-25 21:03:43,762 - root - INFO - Output folder: /tmp/tmplfqa13vj/output
2025-07-25 21:03:43,764 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 1 source folders
2025-07-25 21:03:43,764 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmplfqa13vj
2025-07-25 21:03:43,764 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmplfqa13vj
2025-07-25 21:03:43,764 - c_to_plantuml.parser - INFO - Using include depth: 1
2025-07-25 21:03:43,765 - c_to_plantuml.parser - INFO - Initial C files after filtering: 1 files
2025-07-25 21:03:43,765 - c_to_plantuml.parser - INFO - Processing include iteration 1
2025-07-25 21:03:43,766 - c_to_plantuml.parser - INFO - Iteration 1: Added 0 new files
2025-07-25 21:03:43,766 - c_to_plantuml.parser - INFO - No new files found in iteration 1, stopping early
2025-07-25 21:03:43,766 - c_to_plantuml.parser - INFO - Final file list: 1 files
2025-07-25 21:03:43,766 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:43,766 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
2025-07-25 21:03:43,766 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmplfqa13vj: 1 files
2025-07-25 21:03:43,767 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:43,768 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:43,768 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:43,768 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmplfqa13vj/output/model.json
2025-07-25 21:03:43,768 - c_to_plantuml.parser - INFO - Found 1 total files across 1 source folder(s)
2025-07-25 21:03:43,768 - c_to_plantuml.parser - INFO - Summary: 1 structs, 0 enums, 1 functions
2025-07-25 21:03:43,768 - root - INFO - Model saved to: /tmp/tmplfqa13vj/output/model.json


ok
test_transform_mode (feature.test_cli_modes.TestCLIModes) ... 2025-07-25 21:03:43,831 - root - INFO - Using config: /tmp/tmpwci_7stu/config.json
2025-07-25 21:03:43,831 - root - INFO - Output folder: /tmp/tmpwci_7stu/output
2025-07-25 21:03:43,832 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 1 source folders
2025-07-25 21:03:43,832 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmpwci_7stu
2025-07-25 21:03:43,832 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpwci_7stu
2025-07-25 21:03:43,832 - c_to_plantuml.parser - INFO - Using include depth: 1
2025-07-25 21:03:43,833 - c_to_plantuml.parser - INFO - Initial C files after filtering: 1 files
2025-07-25 21:03:43,834 - c_to_plantuml.parser - INFO - Processing include iteration 1
2025-07-25 21:03:43,834 - c_to_plantuml.parser - INFO - Iteration 1: Added 0 new files
2025-07-25 21:03:43,834 - c_to_plantuml.parser - INFO - No new files found in iteration 1, stopping early
2025-07-25 21:03:43,834 - c_to_plantuml.parser - INFO - Final file list: 1 files
2025-07-25 21:03:43,834 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:43,835 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
2025-07-25 21:03:43,835 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmpwci_7stu: 1 files
2025-07-25 21:03:43,835 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:43,836 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:43,836 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:43,836 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmpwci_7stu/output/model.json
2025-07-25 21:03:43,836 - c_to_plantuml.parser - INFO - Found 1 total files across 1 source folder(s)
2025-07-25 21:03:43,836 - c_to_plantuml.parser - INFO - Summary: 1 structs, 0 enums, 1 functions
2025-07-25 21:03:43,836 - root - INFO - Model saved to: /tmp/tmpwci_7stu/output/model.json


2025-07-25 21:03:43,897 - root - INFO - Using config: /tmp/tmpwci_7stu/config.json
2025-07-25 21:03:43,897 - root - INFO - Output folder: /tmp/tmpwci_7stu/output
2025-07-25 21:03:43,897 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpwci_7stu/output/model.json
2025-07-25 21:03:43,897 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:43,897 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 1 files
2025-07-25 21:03:43,898 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpwci_7stu/output/model_transformed.json
2025-07-25 21:03:43,898 - root - INFO - Transformed model saved to: /tmp/tmpwci_7stu/output/model_transformed.json


ok
test_generate_with_complex_relationships (feature.test_component_features.TestGeneratorComponentFeatures)
Test PlantUML generation with complex type relationships. ... ok
test_generate_with_typedefs (feature.test_component_features.TestGeneratorComponentFeatures)
Test PlantUML generation with typedef relationships. ... ok
test_generate_with_unions (feature.test_component_features.TestGeneratorComponentFeatures)
Test PlantUML generation with union definitions. ... ok
test_parse_complex_typedefs (feature.test_component_features.TestParserComponentFeatures)
Test parsing complex typedef relationships. ... ok
test_parse_function_pointers (feature.test_component_features.TestParserComponentFeatures)
Test parsing function pointer definitions. ... ok
test_parse_unions (feature.test_component_features.TestParserComponentFeatures)
Test parsing union definitions. ... ok
test_cross_file_type_dependencies (feature.test_component_features.TestProjectAnalysisComponentFeatures)
Test analysis of type dependencies across files. ... ok
test_project_structure_analysis (feature.test_component_features.TestProjectAnalysisComponentFeatures)
Test analysis of project structure and dependencies. ... ok
test_recursive_include_handling (feature.test_component_features.TestProjectAnalysisComponentFeatures)
Test handling of recursive include relationships. ... ok
test_alternative_crypto_filter_patterns (feature.test_crypto_filter_pattern.TestCryptoFilterPattern)
Test alternative ways to write crypto filter patterns ... 
Testing pattern set 1: ['^crypto.*\\.c$', '^crypto.*\\.h$']
  Crypto_Cfg_Partitions.c: False
  Crypto_Cfg_JobQueues.c: False
  Crypto.c: False

Testing pattern set 2: ['^crypto.*cfg.*\\.c$', '^crypto.*cfg.*\\.h$']
  Crypto_Cfg_Partitions.c: False
  Crypto_Cfg_JobQueues.c: False
  Crypto.c: False

Testing pattern set 3: ['(?i)\\bcrypto.*\\.c$', '(?i)\\bcrypto.*\\.h$']
  Crypto_Cfg_Partitions.c: True
  Crypto_Cfg_JobQueues.c: True
  Crypto.c: True

Testing pattern set 4: ['.*crypto.*\\.c$', '.*crypto.*\\.h$']
  Crypto_Cfg_Partitions.c: False
  Crypto_Cfg_JobQueues.c: False
  Crypto.c: False
ok
test_broken_crypto_filter_pattern (feature.test_crypto_filter_pattern.TestCryptoFilterPattern)
Test the broken filter pattern that doesn't work ... Broken pattern - Crypto_Cfg_Partitions.c: False
Broken pattern - Crypto_Cfg_JobQueues.c: False
Broken pattern - Crypto.c: False
Broken pattern - Crypto.h: False
Broken pattern - Crypto_Cfg_Partitions.h: False
Broken pattern - Crypto_Cfg_JobQueues.h: False
ok
test_case_insensitive_crypto_filter_pattern (feature.test_crypto_filter_pattern.TestCryptoFilterPattern)
Test case-insensitive crypto filter pattern ... Case-insensitive pattern - crypto.c: True
Case-insensitive pattern - CRYPTO.c: True
Case-insensitive pattern - Crypto.c: True
Case-insensitive pattern - crypto_config.c: True
Case-insensitive pattern - CRYPTO_CONFIG.c: True
Case-insensitive pattern - Crypto_Cfg_Partitions.c: True
ok
test_fixed_crypto_filter_pattern (feature.test_crypto_filter_pattern.TestCryptoFilterPattern)
Test the corrected filter pattern that should work ... Fixed pattern - Crypto_Cfg_Partitions.c: True
Fixed pattern - Crypto_Cfg_JobQueues.c: True
Fixed pattern - Crypto.c: True
Fixed pattern - Crypto.h: True
Fixed pattern - Crypto_Cfg_Partitions.h: True
Fixed pattern - Crypto_Cfg_JobQueues.h: True
Fixed pattern - main.c: False
Fixed pattern - utils.c: False
Fixed pattern - config.h: False
Fixed pattern - types.h: False
ok
test_parser_integration_with_crypto_filter (feature.test_crypto_filter_pattern.TestCryptoFilterPattern)
Test that the parser correctly applies crypto filters ... Parsed files: ['Crypto.c', 'Crypto_Cfg_JobQueues.c', 'Crypto_Cfg_Partitions.c']
ok
test_alternative_crypto_patterns (feature.test_crypto_filter_usecase.TestCryptoFilterUseCase)
Test alternative ways to write crypto filter patterns ... ok
test_broken_crypto_filter_pattern (feature.test_crypto_filter_usecase.TestCryptoFilterUseCase)
Test that the broken pattern from user's question doesn't work ... ok
test_case_insensitive_variations (feature.test_crypto_filter_usecase.TestCryptoFilterUseCase)
Test different case variations with crypto filter ... ok
test_fixed_crypto_filter_pattern (feature.test_crypto_filter_usecase.TestCryptoFilterUseCase)
Test that the corrected pattern works correctly ... ok
test_integration_with_full_workflow (feature.test_crypto_filter_usecase.TestCryptoFilterUseCase)
Test crypto filter integration with full parsing workflow ... ok
test_parser_with_crypto_filter (feature.test_crypto_filter_usecase.TestCryptoFilterUseCase)
Test that the parser correctly applies crypto filters ... ok
test_regex_escaping_importance (feature.test_crypto_filter_usecase.TestCryptoFilterUseCase)
Test the importance of proper regex escaping ... ok
test_user_question_scenario (feature.test_crypto_filter_usecase.TestCryptoFilterUseCase)
Test the exact scenario from the user's question ... ok
test_feature_c_to_h_relationships (feature.test_include_processing_features.TestIncludeProcessingBasicFeatures)
Test feature-level C to H file relationships. ... ok
test_feature_header_to_header_relationships (feature.test_include_processing_features.TestIncludeProcessingBasicFeatures)
Test feature-level header to header relationships. ... ok
test_feature_include_processing_basic_workflow (feature.test_include_processing_features.TestIncludeProcessingBasicFeatures)
Test basic include processing workflow from parsing to generation. ... ok
test_feature_complex_project_structure (feature.test_include_processing_features.TestIncludeProcessingComplexFeatures)
Test complex project structure with multiple layers of includes. ... ok
test_feature_typedef_relationships_across_files (feature.test_include_processing_features.TestIncludeProcessingComplexFeatures)
Test typedef relationships across multiple include files. ... ok
test_comprehensive_real_world_project_structure (feature.test_include_processing_features.TestIncludeProcessingComprehensive)
Test with realistic project structure resembling real C projects. ... ok
test_comprehensive_typedef_and_struct_relationships (feature.test_include_processing_features.TestIncludeProcessingComprehensive)
Test comprehensive typedef and struct relationships across files. ... ok
test_dependency_circular_include_handling (feature.test_include_processing_features.TestIncludeProcessingDependencies)
Test handling of circular include dependencies. ... ok
test_dependency_include_depth_levels (feature.test_include_processing_features.TestIncludeProcessingDependencies)
Test that include processing respects depth levels. ... ok
test_dependency_missing_includes_handling (feature.test_include_processing_features.TestIncludeProcessingDependencies)
Test handling of missing include files. ... ok
test_integration_complete_workflow_with_cli (feature.test_include_processing_features.TestIncludeProcessingIntegration)
Test complete workflow using CLI interface. ... 2025-07-25 21:03:44,027 - root - INFO - Using config: /tmp/tmpm2j8gwe8/config.json
2025-07-25 21:03:44,027 - root - INFO - Output folder: /tmp/tmpm2j8gwe8/output
2025-07-25 21:03:44,028 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 1 source folders
2025-07-25 21:03:44,028 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmpm2j8gwe8
2025-07-25 21:03:44,028 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpm2j8gwe8
2025-07-25 21:03:44,028 - c_to_plantuml.parser - INFO - Using include depth: 3
2025-07-25 21:03:44,029 - c_to_plantuml.parser - INFO - Initial C files after filtering: 1 files
2025-07-25 21:03:44,029 - c_to_plantuml.parser - INFO - Processing include iteration 1
2025-07-25 21:03:44,029 - c_to_plantuml.parser - INFO - Iteration 1: Added 1 new files
2025-07-25 21:03:44,029 - c_to_plantuml.parser - INFO - Processing include iteration 2
2025-07-25 21:03:44,029 - c_to_plantuml.parser - INFO - Iteration 2: Added 1 new files
2025-07-25 21:03:44,029 - c_to_plantuml.parser - INFO - Processing include iteration 3
2025-07-25 21:03:44,030 - c_to_plantuml.parser - INFO - Iteration 3: Added 0 new files
2025-07-25 21:03:44,030 - c_to_plantuml.parser - INFO - No new files found in iteration 3, stopping early
2025-07-25 21:03:44,030 - c_to_plantuml.parser - INFO - Final file list: 3 files
2025-07-25 21:03:44,030 - c_to_plantuml.parser - INFO - Found 3 C/C++ files
2025-07-25 21:03:44,032 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 3 files successfully.
2025-07-25 21:03:44,032 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmpm2j8gwe8: 3 files
2025-07-25 21:03:44,032 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:44,033 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,033 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,033 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmpm2j8gwe8/output/model.json
2025-07-25 21:03:44,033 - c_to_plantuml.parser - INFO - Found 3 total files across 1 source folder(s)
2025-07-25 21:03:44,033 - c_to_plantuml.parser - INFO - Summary: 1 structs, 0 enums, 2 functions
2025-07-25 21:03:44,033 - root - INFO - Model saved to: /tmp/tmpm2j8gwe8/output/model.json
2025-07-25 21:03:44,033 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpm2j8gwe8/output/model.json
2025-07-25 21:03:44,033 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,033 - c_to_plantuml.transformer - INFO - Processing include relations with max depth: 3
2025-07-25 21:03:44,034 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 3 files
2025-07-25 21:03:44,035 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpm2j8gwe8/output/model_transformed.json
2025-07-25 21:03:44,035 - root - INFO - Transformed model saved to: /tmp/tmpm2j8gwe8/output/model_transformed.json
2025-07-25 21:03:44,035 - root - INFO - PlantUML generation complete! Output in: /tmp/tmpm2j8gwe8/output
2025-07-25 21:03:44,035 - root - INFO - Complete workflow finished successfully!
ok
test_integration_plantuml_output_generation (feature.test_include_processing_features.TestIncludeProcessingIntegration)
Test that PlantUML output is correctly generated. ... 2025-07-25 21:03:44,036 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project: /tmp/tmp3i0yvy9b
2025-07-25 21:03:44,036 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmp3i0yvy9b
2025-07-25 21:03:44,037 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmp3i0yvy9b
2025-07-25 21:03:44,037 - c_to_plantuml.parser - INFO - Found 2 C/C++ files
2025-07-25 21:03:44,038 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 2 files successfully.
2025-07-25 21:03:44,038 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmp3i0yvy9b: 2 files
2025-07-25 21:03:44,039 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:44,039 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,039 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,039 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmp3i0yvy9b/output/model.json
2025-07-25 21:03:44,039 - c_to_plantuml.parser - INFO - Found 2 total files across 1 source folder(s)
2025-07-25 21:03:44,039 - c_to_plantuml.parser - INFO - Summary: 1 structs, 0 enums, 1 functions
2025-07-25 21:03:44,039 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmp3i0yvy9b/output/model.json
2025-07-25 21:03:44,039 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,039 - c_to_plantuml.transformer - INFO - Processing include relations with max depth: 2
2025-07-25 21:03:44,040 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 2 files
2025-07-25 21:03:44,040 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmp3i0yvy9b/output/transformed_model.json
ok
test_complete_workflow (feature.test_integration.TestIntegration)
Test complete end-to-end workflow from parsing to PlantUML generation ... 2025-07-25 21:03:44,042 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpo7727jdy
2025-07-25 21:03:44,042 - c_to_plantuml.parser - INFO - Found 2 C/C++ files
2025-07-25 21:03:44,044 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 2 files successfully.
ok
test_configuration_features (feature.test_integration.TestIntegration)
Test configuration loading and filtering features ... ok
test_error_handling (feature.test_integration.TestIntegration)
Test error handling for various scenarios ... 2025-07-25 21:03:44,047 - root - WARNING - Failed to detect encoding for /non/existent/file.c: [Errno 2] No such file or directory: '/non/existent/file.c'
ok
test_performance_features (feature.test_integration.TestIntegration)
Test performance with larger files ... 2025-07-25 21:03:44,047 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpr0tnje2a
2025-07-25 21:03:44,048 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:44,051 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
ok
test_empty_source_folders_error (feature.test_multiple_source_folders.TestMultipleSourceFolders)
Test that empty source_folders list raises an error ... ok
test_invalid_source_folder_error (feature.test_multiple_source_folders.TestMultipleSourceFolders)
Test that invalid source folder raises an error ... 2025-07-25 21:03:44,053 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 1 source folders
2025-07-25 21:03:44,053 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /nonexistent/path
2025-07-25 21:03:44,053 - c_to_plantuml.parser - ERROR - Failed to parse source folder /nonexistent/path: Project root not found: /nonexistent/path
ok
test_multiple_source_folders_parsing (feature.test_multiple_source_folders.TestMultipleSourceFolders)
Test that multiple source folders are parsed correctly ... ok
test_multiple_source_folders_with_config (feature.test_multiple_source_folders.TestMultipleSourceFolders)
Test multiple source folders with configuration and filters ... 2025-07-25 21:03:44,055 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 2 source folders
2025-07-25 21:03:44,055 - c_to_plantuml.parser - INFO - Parsing source folder 1/2: /tmp/tmpkxy1mb97/src1
2025-07-25 21:03:44,055 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpkxy1mb97/src1
2025-07-25 21:03:44,055 - c_to_plantuml.parser - INFO - Using include depth: 1
2025-07-25 21:03:44,056 - c_to_plantuml.parser - INFO - Initial C files after filtering: 1 files
2025-07-25 21:03:44,056 - c_to_plantuml.parser - INFO - Processing include iteration 1
2025-07-25 21:03:44,056 - c_to_plantuml.parser - INFO - Iteration 1: Added 1 new files
2025-07-25 21:03:44,056 - c_to_plantuml.parser - INFO - Final file list: 2 files
2025-07-25 21:03:44,056 - c_to_plantuml.parser - INFO - Found 2 C/C++ files
2025-07-25 21:03:44,058 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 2 files successfully.
2025-07-25 21:03:44,058 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmpkxy1mb97/src1: 2 files
2025-07-25 21:03:44,058 - c_to_plantuml.parser - INFO - Parsing source folder 2/2: /tmp/tmpkxy1mb97/src2
2025-07-25 21:03:44,058 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpkxy1mb97/src2
2025-07-25 21:03:44,058 - c_to_plantuml.parser - INFO - Using include depth: 1
2025-07-25 21:03:44,058 - c_to_plantuml.parser - INFO - Initial C files after filtering: 1 files
2025-07-25 21:03:44,059 - c_to_plantuml.parser - INFO - Processing include iteration 1
2025-07-25 21:03:44,059 - c_to_plantuml.parser - INFO - Iteration 1: Added 1 new files
2025-07-25 21:03:44,059 - c_to_plantuml.parser - INFO - Final file list: 2 files
2025-07-25 21:03:44,059 - c_to_plantuml.parser - INFO - Found 2 C/C++ files
2025-07-25 21:03:44,060 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 2 files successfully.
2025-07-25 21:03:44,060 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmpkxy1mb97/src2: 2 files
2025-07-25 21:03:44,061 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:44,061 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,061 - c_to_plantuml.verifier - WARNING -   - Invalid field name '30' in struct Person in src1_main.c
2025-07-25 21:03:44,061 - c_to_plantuml.parser - WARNING - Model verification found 1 issues - model may contain parsing errors
2025-07-25 21:03:44,061 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmpkxy1mb97/filtered_model.json
2025-07-25 21:03:44,061 - c_to_plantuml.parser - INFO - Found 4 total files across 2 source folder(s)
2025-07-25 21:03:44,062 - c_to_plantuml.parser - INFO - Summary: 3 structs, 1 enums, 3 functions
ok
test_parser_multiple_source_folders_method (feature.test_multiple_source_folders.TestMultipleSourceFolders)
Test the parse method with multiple source folders ... 2025-07-25 21:03:44,063 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 3 source folders
2025-07-25 21:03:44,063 - c_to_plantuml.parser - INFO - Parsing source folder 1/3: /tmp/tmp6z4nnqk8/src1
2025-07-25 21:03:44,063 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmp6z4nnqk8/src1
2025-07-25 21:03:44,063 - c_to_plantuml.parser - INFO - Found 2 C/C++ files
2025-07-25 21:03:44,065 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 2 files successfully.
2025-07-25 21:03:44,065 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmp6z4nnqk8/src1: 2 files
2025-07-25 21:03:44,065 - c_to_plantuml.parser - INFO - Parsing source folder 2/3: /tmp/tmp6z4nnqk8/src2
2025-07-25 21:03:44,065 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmp6z4nnqk8/src2
2025-07-25 21:03:44,065 - c_to_plantuml.parser - INFO - Found 2 C/C++ files
2025-07-25 21:03:44,066 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 2 files successfully.
2025-07-25 21:03:44,067 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmp6z4nnqk8/src2: 2 files
2025-07-25 21:03:44,067 - c_to_plantuml.parser - INFO - Parsing source folder 3/3: /tmp/tmp6z4nnqk8/src3
2025-07-25 21:03:44,067 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmp6z4nnqk8/src3
2025-07-25 21:03:44,067 - c_to_plantuml.parser - INFO - Found 2 C/C++ files
2025-07-25 21:03:44,068 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 2 files successfully.
2025-07-25 21:03:44,069 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmp6z4nnqk8/src3: 2 files
2025-07-25 21:03:44,070 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:44,070 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,070 - c_to_plantuml.verifier - WARNING -   - Invalid field name '30' in struct Person in src1_main.c
2025-07-25 21:03:44,070 - c_to_plantuml.parser - WARNING - Model verification found 1 issues - model may contain parsing errors
2025-07-25 21:03:44,070 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmp6z4nnqk8/combined_model.json
2025-07-25 21:03:44,070 - c_to_plantuml.parser - INFO - Found 6 total files across 3 source folder(s)
2025-07-25 21:03:44,070 - c_to_plantuml.parser - INFO - Summary: 5 structs, 1 enums, 3 functions
ok
test_project_name_from_config (feature.test_multiple_source_folders.TestMultipleSourceFolders)
Test that project name is taken from configuration ... 2025-07-25 21:03:44,072 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 2 source folders
2025-07-25 21:03:44,072 - c_to_plantuml.parser - INFO - Parsing source folder 1/2: /tmp/tmpetsc7opl/src1
2025-07-25 21:03:44,072 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpetsc7opl/src1
2025-07-25 21:03:44,072 - c_to_plantuml.parser - INFO - Using include depth: 1
2025-07-25 21:03:44,073 - c_to_plantuml.parser - INFO - Initial C files after filtering: 1 files
2025-07-25 21:03:44,073 - c_to_plantuml.parser - INFO - Processing include iteration 1
2025-07-25 21:03:44,073 - c_to_plantuml.parser - INFO - Iteration 1: Added 1 new files
2025-07-25 21:03:44,073 - c_to_plantuml.parser - INFO - Final file list: 2 files
2025-07-25 21:03:44,073 - c_to_plantuml.parser - INFO - Found 2 C/C++ files
2025-07-25 21:03:44,074 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 2 files successfully.
2025-07-25 21:03:44,075 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmpetsc7opl/src1: 2 files
2025-07-25 21:03:44,075 - c_to_plantuml.parser - INFO - Parsing source folder 2/2: /tmp/tmpetsc7opl/src2
2025-07-25 21:03:44,075 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpetsc7opl/src2
2025-07-25 21:03:44,075 - c_to_plantuml.parser - INFO - Using include depth: 1
2025-07-25 21:03:44,075 - c_to_plantuml.parser - INFO - Initial C files after filtering: 1 files
2025-07-25 21:03:44,075 - c_to_plantuml.parser - INFO - Processing include iteration 1
2025-07-25 21:03:44,076 - c_to_plantuml.parser - INFO - Iteration 1: Added 1 new files
2025-07-25 21:03:44,076 - c_to_plantuml.parser - INFO - Final file list: 2 files
2025-07-25 21:03:44,076 - c_to_plantuml.parser - INFO - Found 2 C/C++ files
2025-07-25 21:03:44,077 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 2 files successfully.
2025-07-25 21:03:44,077 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmpetsc7opl/src2: 2 files
2025-07-25 21:03:44,078 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:44,078 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,078 - c_to_plantuml.verifier - WARNING -   - Invalid field name '30' in struct Person in src1_main.c
2025-07-25 21:03:44,078 - c_to_plantuml.parser - WARNING - Model verification found 1 issues - model may contain parsing errors
2025-07-25 21:03:44,078 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmpetsc7opl/named_model.json
2025-07-25 21:03:44,078 - c_to_plantuml.parser - INFO - Found 4 total files across 2 source folder(s)
2025-07-25 21:03:44,079 - c_to_plantuml.parser - INFO - Summary: 3 structs, 1 enums, 3 functions
ok
test_single_source_folder_backward_compatibility (feature.test_multiple_source_folders.TestMultipleSourceFolders)
Test that single source folder still works (backward compatibility) ... 2025-07-25 21:03:44,080 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project: /tmp/tmpkajdwvbs/src1
2025-07-25 21:03:44,080 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmpkajdwvbs/src1
2025-07-25 21:03:44,080 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpkajdwvbs/src1
2025-07-25 21:03:44,080 - c_to_plantuml.parser - INFO - Found 2 C/C++ files
2025-07-25 21:03:44,082 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 2 files successfully.
2025-07-25 21:03:44,082 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmpkajdwvbs/src1: 2 files
2025-07-25 21:03:44,082 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:44,082 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,082 - c_to_plantuml.verifier - WARNING -   - Invalid field name '30' in struct Person in main.c
2025-07-25 21:03:44,082 - c_to_plantuml.parser - WARNING - Model verification found 1 issues - model may contain parsing errors
2025-07-25 21:03:44,083 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmpkajdwvbs/single_model.json
2025-07-25 21:03:44,083 - c_to_plantuml.parser - INFO - Found 2 total files across 1 source folder(s)
2025-07-25 21:03:44,083 - c_to_plantuml.parser - INFO - Summary: 2 structs, 0 enums, 2 functions
ok
test_source_folder_name_collision_handling (feature.test_multiple_source_folders.TestMultipleSourceFolders)
Test that files with same names from different source folders are handled correctly ... 2025-07-25 21:03:44,084 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project with 2 source folders
2025-07-25 21:03:44,084 - c_to_plantuml.parser - INFO - Parsing source folder 1/2: /tmp/tmp1qeq8vqq/src1
2025-07-25 21:03:44,084 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmp1qeq8vqq/src1
2025-07-25 21:03:44,085 - c_to_plantuml.parser - INFO - Found 3 C/C++ files
2025-07-25 21:03:44,086 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 3 files successfully.
2025-07-25 21:03:44,086 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmp1qeq8vqq/src1: 3 files
2025-07-25 21:03:44,086 - c_to_plantuml.parser - INFO - Parsing source folder 2/2: /tmp/tmp1qeq8vqq/src2
2025-07-25 21:03:44,086 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmp1qeq8vqq/src2
2025-07-25 21:03:44,087 - c_to_plantuml.parser - INFO - Found 3 C/C++ files
2025-07-25 21:03:44,088 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 3 files successfully.
2025-07-25 21:03:44,088 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmp1qeq8vqq/src2: 3 files
2025-07-25 21:03:44,089 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:44,089 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,089 - c_to_plantuml.verifier - WARNING -   - Invalid field name '30' in struct Person in src1_main.c
2025-07-25 21:03:44,089 - c_to_plantuml.parser - WARNING - Model verification found 1 issues - model may contain parsing errors
2025-07-25 21:03:44,090 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmp1qeq8vqq/collision_model.json
2025-07-25 21:03:44,090 - c_to_plantuml.parser - INFO - Found 6 total files across 2 source folder(s)
2025-07-25 21:03:44,090 - c_to_plantuml.parser - INFO - Summary: 3 structs, 1 enums, 3 functions
ok
test_transform_complex_project_with_filters (feature.test_transformer_features.TestTransformerFeatures)
Test transforming a complex project with various filters ... 2025-07-25 21:03:44,091 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmp97keo677
2025-07-25 21:03:44,091 - c_to_plantuml.parser - INFO - Found 3 C/C++ files
2025-07-25 21:03:44,096 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 3 files successfully.
2025-07-25 21:03:44,097 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmp97keo677/model.json
2025-07-25 21:03:44,097 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,098 - c_to_plantuml.transformer - INFO - Processing include relations with max depth: 2
2025-07-25 21:03:44,099 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 1 files
2025-07-25 21:03:44,100 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmp97keo677/model.json
ok
test_transform_complex_regex_patterns (feature.test_transformer_features.TestTransformerFeatures)
Test transforming with complex regex patterns ... 2025-07-25 21:03:44,101 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpnnkqrj0h
2025-07-25 21:03:44,101 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:44,103 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
2025-07-25 21:03:44,104 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpnnkqrj0h/model.json
2025-07-25 21:03:44,104 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,105 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 1 files
2025-07-25 21:03:44,105 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpnnkqrj0h/model.json
Debug: Available functions: []
ok
test_transform_error_handling (feature.test_transformer_features.TestTransformerFeatures)
Test transformer error handling with invalid configurations ... 2025-07-25 21:03:44,106 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpsygyg7p1
2025-07-25 21:03:44,106 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:44,107 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
2025-07-25 21:03:44,107 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpsygyg7p1/model.json
2025-07-25 21:03:44,107 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,108 - c_to_plantuml.transformer - WARNING - Invalid regex pattern '[invalid regex pattern': unterminated character set at position 0
2025-07-25 21:03:44,108 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 1 files
2025-07-25 21:03:44,108 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpsygyg7p1/model.json
2025-07-25 21:03:44,108 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /nonexistent/model.json
2025-07-25 21:03:44,108 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpsygyg7p1/model.json
ok
test_transform_integration_with_parser_and_generator (feature.test_transformer_features.TestTransformerFeatures)
Test full integration: parse -> transform -> generate ... 2025-07-25 21:03:44,109 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpn5depsuv
2025-07-25 21:03:44,110 - c_to_plantuml.parser - INFO - Found 3 C/C++ files
2025-07-25 21:03:44,112 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 3 files successfully.
2025-07-25 21:03:44,113 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpn5depsuv/parsed_model.json
2025-07-25 21:03:44,113 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,114 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 2 files
2025-07-25 21:03:44,114 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpn5depsuv/parsed_model.json
ok
test_transform_with_additions (feature.test_transformer_features.TestTransformerFeatures)
Test transforming with element additions ... 2025-07-25 21:03:44,116 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpgry3ei3r
2025-07-25 21:03:44,116 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:44,117 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
2025-07-25 21:03:44,117 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpgry3ei3r/model.json
2025-07-25 21:03:44,117 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,117 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 1 files
2025-07-25 21:03:44,118 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpgry3ei3r/model.json
ok
test_transform_with_include_relations (feature.test_transformer_features.TestTransformerFeatures)
Test transforming with include relation processing ... 2025-07-25 21:03:44,119 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmppe1unj6g
2025-07-25 21:03:44,119 - c_to_plantuml.parser - INFO - Found 3 C/C++ files
2025-07-25 21:03:44,120 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 3 files successfully.
2025-07-25 21:03:44,121 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmppe1unj6g/model.json
2025-07-25 21:03:44,121 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,121 - c_to_plantuml.transformer - INFO - Processing include relations with max depth: 3
2025-07-25 21:03:44,122 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 3 files
2025-07-25 21:03:44,123 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmppe1unj6g/model.json
ok
test_transform_with_removals (feature.test_transformer_features.TestTransformerFeatures)
Test transforming with element removals ... 2025-07-25 21:03:44,124 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpap5p85tv
2025-07-25 21:03:44,124 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:44,125 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
2025-07-25 21:03:44,126 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpap5p85tv/model.json
2025-07-25 21:03:44,126 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,126 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 1 files
2025-07-25 21:03:44,126 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpap5p85tv/model.json
ok
test_transform_with_renaming (feature.test_transformer_features.TestTransformerFeatures)
Test transforming with element renaming ... 2025-07-25 21:03:44,127 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpjb3k0ybr
2025-07-25 21:03:44,128 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:44,128 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
2025-07-25 21:03:44,129 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpjb3k0ybr/model.json
2025-07-25 21:03:44,129 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,129 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 1 files
2025-07-25 21:03:44,129 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpjb3k0ybr/model.json
ok
test_complete_system_integration_real_world_project (integration.test_comprehensive.TestEndToEndSystemIntegration)
Test complete system integration with realistic project. ... 2025-07-25 21:03:44,131 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project: /tmp/tmpx4heydwi
2025-07-25 21:03:44,131 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmpx4heydwi
2025-07-25 21:03:44,131 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpx4heydwi
2025-07-25 21:03:44,134 - c_to_plantuml.parser - INFO - Found 11 C/C++ files
2025-07-25 21:03:44,143 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 11 files successfully.
2025-07-25 21:03:44,143 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmpx4heydwi: 11 files
2025-07-25 21:03:44,145 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:44,146 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,146 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,146 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmpx4heydwi/output/model.json
2025-07-25 21:03:44,146 - c_to_plantuml.parser - INFO - Found 11 total files across 1 source folder(s)
2025-07-25 21:03:44,146 - c_to_plantuml.parser - INFO - Summary: 10 structs, 0 enums, 12 functions
2025-07-25 21:03:44,146 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpx4heydwi/output/model.json
2025-07-25 21:03:44,146 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,146 - c_to_plantuml.transformer - INFO - Processing include relations with max depth: 5
2025-07-25 21:03:44,149 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 11 files
2025-07-25 21:03:44,151 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpx4heydwi/output/transformed_model.json
ok
test_comprehensive_c_to_h_relationships_integration (integration.test_comprehensive.TestIncludeProcessingIntegrationComprehensive)
Test comprehensive C to H file relationships with full integration. ... 2025-07-25 21:03:44,155 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project: /tmp/tmpj9yda1wm
2025-07-25 21:03:44,155 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmpj9yda1wm
2025-07-25 21:03:44,155 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpj9yda1wm
2025-07-25 21:03:44,157 - c_to_plantuml.parser - INFO - Found 9 C/C++ files
2025-07-25 21:03:44,163 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 9 files successfully.
2025-07-25 21:03:44,163 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmpj9yda1wm: 9 files
2025-07-25 21:03:44,165 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:44,165 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,166 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,166 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmpj9yda1wm/output/model.json
2025-07-25 21:03:44,166 - c_to_plantuml.parser - INFO - Found 9 total files across 1 source folder(s)
2025-07-25 21:03:44,166 - c_to_plantuml.parser - INFO - Summary: 7 structs, 0 enums, 10 functions
2025-07-25 21:03:44,166 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpj9yda1wm/output/model.json
2025-07-25 21:03:44,166 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,166 - c_to_plantuml.transformer - INFO - Processing include relations with max depth: 4
2025-07-25 21:03:44,169 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 9 files
2025-07-25 21:03:44,171 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpj9yda1wm/output/transformed_model.json
ok
test_comprehensive_header_to_header_relationships_integration (integration.test_comprehensive.TestIncludeProcessingIntegrationComprehensive)
Test comprehensive header to header relationships integration. ... 2025-07-25 21:03:44,173 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project: /tmp/tmp3pl79ujz
2025-07-25 21:03:44,174 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmp3pl79ujz
2025-07-25 21:03:44,174 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmp3pl79ujz
2025-07-25 21:03:44,175 - c_to_plantuml.parser - INFO - Found 5 C/C++ files
2025-07-25 21:03:44,178 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 5 files successfully.
2025-07-25 21:03:44,178 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmp3pl79ujz: 5 files
2025-07-25 21:03:44,179 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:44,179 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,179 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,179 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmp3pl79ujz/output/model.json
2025-07-25 21:03:44,179 - c_to_plantuml.parser - INFO - Found 5 total files across 1 source folder(s)
2025-07-25 21:03:44,179 - c_to_plantuml.parser - INFO - Summary: 4 structs, 0 enums, 3 functions
2025-07-25 21:03:44,179 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmp3pl79ujz/output/model.json
2025-07-25 21:03:44,179 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,179 - c_to_plantuml.transformer - INFO - Processing include relations with max depth: 4
2025-07-25 21:03:44,180 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 5 files
2025-07-25 21:03:44,181 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmp3pl79ujz/output/transformed_model.json
ok
test_comprehensive_typedef_relationships_integration (integration.test_comprehensive.TestIncludeProcessingIntegrationComprehensive)
Test comprehensive typedef relationships across files integration. ... 2025-07-25 21:03:44,183 - c_to_plantuml.parser - INFO - Step 1: Parsing C/C++ project: /tmp/tmpdppaug9p
2025-07-25 21:03:44,183 - c_to_plantuml.parser - INFO - Parsing source folder 1/1: /tmp/tmpdppaug9p
2025-07-25 21:03:44,183 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpdppaug9p
2025-07-25 21:03:44,184 - c_to_plantuml.parser - INFO - Found 4 C/C++ files
2025-07-25 21:03:44,189 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 4 files successfully.
2025-07-25 21:03:44,189 - c_to_plantuml.parser - INFO - Successfully parsed source folder /tmp/tmpdppaug9p: 4 files
2025-07-25 21:03:44,191 - c_to_plantuml.parser - INFO - Step 1.5: Verifying model sanity...
2025-07-25 21:03:44,191 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,191 - c_to_plantuml.parser - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,191 - c_to_plantuml.parser - INFO - Step 1 complete! Model saved to: /tmp/tmpdppaug9p/output/model.json
2025-07-25 21:03:44,191 - c_to_plantuml.parser - INFO - Found 4 total files across 1 source folder(s)
2025-07-25 21:03:44,191 - c_to_plantuml.parser - INFO - Summary: 4 structs, 1 enums, 4 functions
2025-07-25 21:03:44,191 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpdppaug9p/output/model.json
2025-07-25 21:03:44,192 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,192 - c_to_plantuml.transformer - INFO - Processing include relations with max depth: 3
2025-07-25 21:03:44,193 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 4 files
2025-07-25 21:03:44,194 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpdppaug9p/output/transformed_model.json
ok
test_parser_tokenizer_complex_syntax_integration (integration.test_comprehensive.TestParserTokenizerIntegration)
Test parser-tokenizer integration with complex C syntax. ... ok
test_parser_tokenizer_error_handling_integration (integration.test_comprehensive.TestParserTokenizerIntegration)
Test that parser gracefully handles tokenizer errors. ... ok
test_parser_tokenizer_function_parsing_integration (integration.test_comprehensive.TestParserTokenizerIntegration)
Test that parser correctly uses tokenizer for function parsing. ... ok
test_parser_tokenizer_preprocessor_integration (integration.test_comprehensive.TestParserTokenizerIntegration)
Test that parser handles preprocessor directives through tokenizer. ... ok
test_parser_tokenizer_struct_parsing_integration (integration.test_comprehensive.TestParserTokenizerIntegration)
Test that parser correctly uses tokenizer for struct parsing. ... ok
test_absolute_path_file_keys_in_project_model (unit.test_absolute_path_bug_detection.TestAbsolutePathBugDetection)
Test that files with absolute path keys are properly handled ... ok
test_deep_include_dependencies_with_absolute_paths (unit.test_absolute_path_bug_detection.TestAbsolutePathBugDetection)
Test deep include dependencies work correctly with absolute paths ... ok
test_error_handling_for_missing_files (unit.test_absolute_path_bug_detection.TestAbsolutePathBugDetection)
Test that missing files are handled gracefully ... ok
test_file_key_matching_robustness (unit.test_absolute_path_bug_detection.TestAbsolutePathBugDetection)
Test that file key matching is robust with various path formats ... ok
test_include_relationships_preserved_with_absolute_paths (unit.test_absolute_path_bug_detection.TestAbsolutePathBugDetection)
Test that include relationships are preserved when using absolute paths ... ok
test_missing_header_classes_in_generated_diagram (unit.test_absolute_path_bug_detection.TestAbsolutePathBugDetection)
Test that header file classes are not missing from generated diagrams ... ok
test_missing_source_files_in_generated_diagram (unit.test_absolute_path_bug_detection.TestAbsolutePathBugDetection)
Test that source files are not missing from generated diagrams ... ok
test_mixed_absolute_and_relative_paths (unit.test_absolute_path_bug_detection.TestAbsolutePathBugDetection)
Test handling of mixed absolute and relative paths in project model ... ok
test_config_equality (unit.test_config.TestConfig)
Test configuration equality comparison ... ok
test_config_repr (unit.test_config.TestConfig)
Test configuration string representation ... ok
test_config_validation (unit.test_config.TestConfig)
Test configuration validation ... ok
test_default_config_values (unit.test_config.TestConfig)
Test default configuration values ... ok
test_element_filtering (unit.test_config.TestConfig)
Test element filtering functionality ... ok
test_empty_source_folders (unit.test_config.TestConfig)
Test that empty source_folders list is handled correctly ... ok
test_file_filtering (unit.test_config.TestConfig)
Test file filtering functionality ... ok
test_get_summary (unit.test_config.TestConfig)
Test configuration summary generation ... ok
test_invalid_regex_patterns (unit.test_config.TestConfig)
Test handling of invalid regex patterns ... 2025-07-25 21:03:44,214 - c_to_plantuml.config - WARNING - Invalid include pattern '[invalid_regex': unterminated character set at position 0
2025-07-25 21:03:44,214 - c_to_plantuml.config - WARNING - Invalid exclude pattern '[invalid_regex': unterminated character set at position 0
ok
test_load_config_with_filters (unit.test_config.TestConfig)
Test loading configuration with file and element filters ... ok
test_load_valid_config (unit.test_config.TestConfig)
Test loading a valid configuration file ... ok
test_model_filtering (unit.test_config.TestConfig)
Test applying filters to a complete model ... ok
test_multiple_source_folders (unit.test_config.TestConfig)
Test that configuration with multiple source folders for targeted searching is handled correctly ... ok
test_save_and_load_config (unit.test_config.TestConfig)
Test saving and loading configuration ... ok
test_single_source_folder (unit.test_config.TestConfig)
Test that single source folder is handled correctly (backward compatibility) ... ok
test_complex_parameter_types (unit.test_function_parameters.TestFunctionParameters)
Test functions with complex parameter types ... ok
test_empty_parameter_list (unit.test_function_parameters.TestFunctionParameters)
Test functions with no parameters (void) ... ok
test_function_parameter_display (unit.test_function_parameters.TestFunctionParameters)
Test that function parameters are correctly displayed in PlantUML ... ok
test_function_parameter_parsing (unit.test_function_parameters.TestFunctionParameters)
Test that function parameters are correctly parsed ... ok
test_generate_empty_file_model (unit.test_generator.TestGenerator)
Test generating diagram for empty file model ... ok
test_generate_error_handling (unit.test_generator.TestGenerator)
Test error handling in diagram generation ... ok
test_generate_file_diagram (unit.test_generator.TestGenerator)
Test generating a PlantUML diagram file ... ok
test_generate_from_model (unit.test_generator.TestGenerator)
Test generating diagrams from a model file ... ok
test_generate_multiple_files (unit.test_generator.TestGenerator)
Test generating diagrams for multiple files ... ok
test_generate_plantuml_content (unit.test_generator.TestGenerator)
Test that PlantUML content is generated correctly ... 2025-07-25 21:03:44,225 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmptaz102yv
2025-07-25 21:03:44,225 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:44,226 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
ok
test_generate_with_config (unit.test_generator.TestGenerator)
Test generating diagrams using configuration ... ok
test_generate_with_special_characters (unit.test_generator.TestGenerator)
Test generation with special characters in names ... 2025-07-25 21:03:44,228 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmpj2t_qvkd
2025-07-25 21:03:44,229 - c_to_plantuml.parser - INFO - Found 1 C/C++ files
2025-07-25 21:03:44,229 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 1 files successfully.
ok
test_output_directory_creation (unit.test_generator.TestGenerator)
Test that output directory is created if it doesn't exist ... ok
test_plantuml_syntax_validity (unit.test_generator.TestGenerator)
Test that generated PlantUML syntax is valid ... ok
test_build_include_tree_debug_info (unit.test_generator_include_tree_bug.TestGeneratorIncludeTreeBug)
Test to provide debug information about the bug ... Project model files keys: ['/tmp/tmpf1tbmcsf/main.c', '/tmp/tmpf1tbmcsf/utils.h']
Root file path: /tmp/tmpf1tbmcsf/main.c
Root file name: main.c
Root file key used: main.c
Include tree keys: ['/tmp/tmpf1tbmcsf/main.c', '/tmp/tmpf1tbmcsf/utils.h']
Expected keys: ['/tmp/tmpf1tbmcsf/main.c', '/tmp/tmpf1tbmcsf/utils.h']
ok
test_build_include_tree_mixed_paths (unit.test_generator_include_tree_bug.TestGeneratorIncludeTreeBug)
Test the bug with mixed absolute and relative paths ... ok
test_build_include_tree_with_absolute_paths (unit.test_generator_include_tree_bug.TestGeneratorIncludeTreeBug)
Test that _build_include_tree works correctly with absolute paths ... ok
test_build_include_tree_with_relative_paths (unit.test_generator_include_tree_bug.TestGeneratorIncludeTreeBug)
Test that _build_include_tree works correctly with relative paths (control test) ... ok
test_complex_function_bodies (unit.test_global_parsing.TestGlobalParsing)
Test that complex function bodies don't interfere with global parsing ... ok
test_global_variables_only (unit.test_global_parsing.TestGlobalParsing)
Test that only actual global variables are parsed ... ok
test_static_variables (unit.test_global_parsing.TestGlobalParsing)
Test that static variables are correctly identified as globals ... ok
test_include_caching_prevents_duplicate_processing (unit.test_include_processing.TestIncludeProcessingCaching)
Test that include caching prevents duplicate file processing. ... ok
test_parse_basic_includes (unit.test_include_processing.TestIncludeProcessingCore)
Test parsing basic system and local include statements. ... ok
test_parse_includes_with_comments_and_whitespace (unit.test_include_processing.TestIncludeProcessingCore)
Test parsing includes with comments and whitespace. ... ok
test_parse_includes_with_preprocessor_directives (unit.test_include_processing.TestIncludeProcessingCore)
Test parsing includes with preprocessor directives. ... ok
test_circular_includes (unit.test_include_processing.TestIncludeProcessingEdgeCases)
Test handling of circular include dependencies. ... ok
test_missing_include_files (unit.test_include_processing.TestIncludeProcessingEdgeCases)
Test handling of missing include files. ... ok
test_c_to_h_file_relationships (unit.test_include_processing.TestIncludeProcessingRelationships)
Test relationships between C files and their header files. ... ok
test_header_to_header_relationships (unit.test_include_processing.TestIncludeProcessingRelationships)
Test relationships between header files. ... ok
test_complex_nested_typedef_relationships (unit.test_include_processing.TestIncludeProcessingTypedefs)
Test complex nested typedef relationships. ... ok
test_simple_typedef_relationships (unit.test_include_processing.TestIncludeProcessingTypedefs)
Test simple typedef relationships across files. ... ok
test_complete_file_parsing (unit.test_parser.TestCParser)
Test parsing a complete C file with all elements ... ok
test_encoding_detection (unit.test_parser.TestCParser)
Test encoding detection and handling ... ok
test_parse_enums (unit.test_parser.TestCParser)
Test parsing enum definitions ... ok
test_parse_functions (unit.test_parser.TestCParser)
Test parsing function declarations ... ok
test_parse_globals (unit.test_parser.TestCParser)
Test parsing global variables ... ok
test_parse_includes (unit.test_parser.TestCParser)
Test parsing include statements ... ok
test_parse_macros (unit.test_parser.TestCParser)
Test parsing macro definitions ... ok
test_parse_simple_c_file (unit.test_parser.TestCParser)
Test parsing a simple C file ... ok
test_parse_structs (unit.test_parser.TestCParser)
Test parsing struct definitions ... ok
test_parse_typedefs (unit.test_parser.TestCParser)
Test parsing typedef declarations ... ok
test_parse_anonymous_struct (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing anonymous struct definitions ... ok
test_parse_complex_file (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing a complex C file with multiple constructs ... ok
test_parse_enum_simple (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing simple enum definitions ... ok
test_parse_file_encoding_detection (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing file with different encodings ... ok
test_parse_file_error_handling (unit.test_parser_comprehensive.TestCParserComprehensive)
Test error handling for invalid files ... 2025-07-25 21:03:44,266 - root - WARNING - Failed to detect encoding for /nonexistent/file.c: [Errno 2] No such file or directory: '/nonexistent/file.c'
ok
test_parse_file_with_arrays (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing file with array declarations ... ok
test_parse_file_with_bit_fields (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing file with bit fields ... ok
test_parse_file_with_comments (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing file with various comment types ... ok
test_parse_file_with_complex_typedefs (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing file with complex typedef definitions ... ok
test_parse_file_with_const_and_volatile (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing file with const and volatile qualifiers ... ok
test_parse_file_with_forward_declarations (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing file with forward declarations ... ok
test_parse_file_with_function_pointers (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing file with function pointers ... ok
test_parse_file_with_malformed_code (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing file with malformed C code ... ok
test_parse_file_with_mixed_content (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing file with mixed content from example files ... ok
test_parse_file_with_nested_structures (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing file with nested structures ... ok
test_parse_file_with_preprocessor_conditionals (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing file with preprocessor conditionals ... ok
test_parse_file_with_unnamed_parameters (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing file with unnamed function parameters ... ok
test_parse_file_with_variadic_functions (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing file with variadic functions ... ok
test_parse_function_declaration (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing function declarations ... ok
test_parse_function_definition (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing function definitions ... ok
test_parse_function_with_modifiers (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing functions with modifiers ... ok
test_parse_global_variables (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing global variables ... ok
test_parse_includes (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing include directives ... ok
test_parse_macros (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing macro definitions ... ok
test_parse_nested_struct (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing nested struct definitions ... ok
test_parse_project (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing an entire project ... 2025-07-25 21:03:44,290 - c_to_plantuml.parser - INFO - Parsing project: /tmp/tmph5hmw87o
2025-07-25 21:03:44,290 - c_to_plantuml.parser - INFO - Found 3 C/C++ files
2025-07-25 21:03:44,292 - c_to_plantuml.parser - INFO - Parsing complete. Parsed 3 files successfully.
ok
test_parse_simple_struct (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing a simple struct definition ... ok
test_parse_typedef_enum (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing typedef enum definitions ... ok
test_parse_typedef_struct (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing typedef struct definitions ... ok
test_parse_typedefs (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing typedef definitions ... ok
test_parse_union (unit.test_parser_comprehensive.TestCParserComprehensive)
Test parsing union definitions ... ok
test_config_equality (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test configuration equality comparison ... ok
test_config_has_filters (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test the has_filters method ... ok
test_config_loading_with_filters (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test loading configuration with filters from JSON ... ok
test_element_filters_enums (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test element filtering for enums ... ok
test_element_filters_functions (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test element filtering for functions ... ok
test_element_filters_globals (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test element filtering for global variables ... ok
test_element_filters_macros (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test element filtering for macros ... ok
test_element_filters_structs (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test element filtering for structs ... ok
test_element_filters_typedefs (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test element filtering for typedefs ... ok
test_empty_filters (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test behavior with empty filter configurations ... ok
test_file_filters_exclude_patterns (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test file filtering with exclude patterns ... ok
test_file_filters_include_and_exclude (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test file filtering with both include and exclude patterns ... ok
test_file_filters_include_patterns (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test file filtering with include patterns ... ok
test_filter_performance (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test that filtering doesn't significantly impact performance ... ok
test_invalid_regex_patterns (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test handling of invalid regex patterns in filters ... 2025-07-25 21:03:44,302 - c_to_plantuml.config - WARNING - Invalid include pattern '[invalid_regex': unterminated character set at position 0
2025-07-25 21:03:44,303 - c_to_plantuml.config - WARNING - Invalid exclude pattern '[invalid_exclude': unterminated character set at position 0
2025-07-25 21:03:44,303 - c_to_plantuml.config - WARNING - Invalid structs include pattern '[invalid_struct': unterminated character set at position 0
ok
test_multiple_element_filters (unit.test_parser_filtering.TestUserConfigurableFiltering)
Test applying multiple element filters simultaneously ... ok
test_complex_preprocessor_conditions (unit.test_preprocessor_bug.TestPreprocessorBug)
Test complex preprocessor conditions. ... ok
test_if_else_endif_block (unit.test_preprocessor_bug.TestPreprocessorBug)
Test #if/#else/#endif block processing. ... ok
test_nested_preprocessor_blocks (unit.test_preprocessor_bug.TestPreprocessorBug)
Test nested #if blocks processing. ... ok
test_preprocessor_edge_case_empty_blocks (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives with empty blocks. ... ok
test_preprocessor_edge_case_malformed (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives with malformed conditions. ... ok
test_preprocessor_in_array_typedefs (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives in array typedefs. ... ok
test_preprocessor_in_function_declarations (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives in function declarations. ... ok
test_preprocessor_in_function_pointers (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives in function pointer typedefs. ... ok
test_preprocessor_in_global_variables (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives in global variable declarations. ... ok
test_preprocessor_in_typedefs (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives within typedef definitions. ... ok
test_preprocessor_in_unions (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives in union typedefs. ... ok
test_preprocessor_with_comments (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives with comments. ... ok
test_preprocessor_with_complex_expressions (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives with complex expressions. ... ok
test_preprocessor_with_defined_operator (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives with defined() operator. ... ok
test_preprocessor_with_ifndef (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives with #ifndef. ... ok
test_preprocessor_with_multiline_conditions (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives with multiline conditions. ... ok
test_preprocessor_with_string_literals (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives with string literals in conditions. ... ok
test_preprocessor_with_whitespace_variations (unit.test_preprocessor_bug.TestPreprocessorBug)
Test preprocessing directives with various whitespace patterns. ... ok
test_simple_if_endif_block (unit.test_preprocessor_bug.TestPreprocessorBug)
Test simple #if/#endif block processing. ... ok
test_multiline_preprocessor_directive (unit.test_preprocessor_handling.TestPreprocessorHandling)
Test multiline preprocessor directive ... ok
test_nested_preprocessor_blocks (unit.test_preprocessor_handling.TestPreprocessorHandling)
Test nested #if blocks ... ok
test_preprocessor_directive_tokenization (unit.test_preprocessor_handling.TestPreprocessorHandling)
Test that preprocessor directives are properly tokenized ... ok
test_preprocessor_with_comments (unit.test_preprocessor_handling.TestPreprocessorHandling)
Test preprocessor directives with comments ... ok
test_preprocessor_with_elif (unit.test_preprocessor_handling.TestPreprocessorHandling)
Test #if/#elif/#else/#endif block ... ok
test_preprocessor_with_else_branch (unit.test_preprocessor_handling.TestPreprocessorHandling)
Test #if/#else/#endif block ... ok
test_preprocessor_with_empty_blocks (unit.test_preprocessor_handling.TestPreprocessorHandling)
Test preprocessor directives with empty blocks ... ok
test_preprocessor_with_enums (unit.test_preprocessor_handling.TestPreprocessorHandling)
Test preprocessor directives containing enum definitions ... ok
test_preprocessor_with_functions (unit.test_preprocessor_handling.TestPreprocessorHandling)
Test preprocessor directives containing function declarations ... ok
test_preprocessor_with_mixed_content (unit.test_preprocessor_handling.TestPreprocessorHandling)
Test preprocessor directives with mixed content types ... ok
test_preprocessor_with_structs (unit.test_preprocessor_handling.TestPreprocessorHandling)
Test preprocessor directives containing struct definitions ... ok
test_preprocessor_with_typedefs (unit.test_preprocessor_handling.TestPreprocessorHandling)
Test preprocessor directives containing typedef definitions ... ok
test_preprocessor_with_whitespace_variations (unit.test_preprocessor_handling.TestPreprocessorHandling)
Test preprocessor directives with various whitespace patterns ... ok
test_simple_preprocessor_conditional (unit.test_preprocessor_handling.TestPreprocessorHandling)
Test simple #if/#endif block ... ok
test_filter_tokens (unit.test_tokenizer.TestCTokenizer)
Test token filtering functionality ... Filtered tokens: [Token(INT, 'int', 1:0), Token(IDENTIFIER, 'x', 1:4), Token(SEMICOLON, ';', 1:5), Token(CHAR, 'char', 2:0), Token(IDENTIFIER, 'y', 2:5), Token(SEMICOLON, ';', 2:6)]
Filtered types: [<TokenType.INT: 'INT'>, <TokenType.IDENTIFIER: 'IDENTIFIER'>, <TokenType.SEMICOLON: 'SEMICOLON'>, <TokenType.CHAR: 'CHAR'>, <TokenType.IDENTIFIER: 'IDENTIFIER'>, <TokenType.SEMICOLON: 'SEMICOLON'>]
ok
test_filter_tokens_custom_exclude (unit.test_tokenizer.TestCTokenizer)
Test token filtering with custom exclude types ... ok
test_tokenize_char_literals (unit.test_tokenizer.TestCTokenizer)
Test tokenization of character literals ... ok
test_tokenize_comments (unit.test_tokenizer.TestCTokenizer)
Test tokenization of comments ... ok
test_tokenize_complex_expression (unit.test_tokenizer.TestCTokenizer)
Test tokenization of complex C expressions ... ok
test_tokenize_data_types (unit.test_tokenizer.TestCTokenizer)
Test tokenization of C data types ... ok
test_tokenize_edge_cases (unit.test_tokenizer.TestCTokenizer)
Test tokenization of edge cases ... All tokens: [Token(UNKNOWN, '@', 1:0), Token(UNKNOWN, '#', 1:1), Token(UNKNOWN, '$', 1:2), Token(UNKNOWN, '%', 1:3), Token(EOF, '', 1:4)]
Unknown tokens: [Token(UNKNOWN, '@', 1:0), Token(UNKNOWN, '#', 1:1), Token(UNKNOWN, '$', 1:2), Token(UNKNOWN, '%', 1:3)]
ok
test_tokenize_identifiers (unit.test_tokenizer.TestCTokenizer)
Test tokenization of identifiers ... ok
test_tokenize_keywords (unit.test_tokenizer.TestCTokenizer)
Test tokenization of C keywords ... ok
test_tokenize_line_numbers_and_columns (unit.test_tokenizer.TestCTokenizer)
Test that line numbers and columns are correctly tracked ... ok
test_tokenize_numbers (unit.test_tokenizer.TestCTokenizer)
Test tokenization of numbers ... ok
test_tokenize_operators_and_punctuation (unit.test_tokenizer.TestCTokenizer)
Test tokenization of operators and punctuation ... ok
test_tokenize_preprocessor (unit.test_tokenizer.TestCTokenizer)
Test tokenization of preprocessor directives ... ok
test_tokenize_preprocessor_if_directives (unit.test_tokenizer.TestCTokenizer)
Test tokenization of #if preprocessor directives ... ok
test_tokenize_strings (unit.test_tokenizer.TestCTokenizer)
Test tokenization of string literals ... ok
test_tokenize_whitespace (unit.test_tokenizer.TestCTokenizer)
Test tokenization of whitespace ... ok
test_find_enums_simple (unit.test_tokenizer.TestStructureFinder)
Test finding simple enum definitions ... ok
test_find_functions_declarations (unit.test_tokenizer.TestStructureFinder)
Test finding function declarations ... ok
test_find_functions_definitions (unit.test_tokenizer.TestStructureFinder)
Test finding function definitions ... ok
test_find_functions_pointer_return (unit.test_tokenizer.TestStructureFinder)
Test finding functions with pointer return types ... ok
test_find_functions_with_modifiers (unit.test_tokenizer.TestStructureFinder)
Test finding functions with modifiers ... ok
test_find_matching_brace (unit.test_tokenizer.TestStructureFinder)
Test finding matching braces ... ok
test_find_matching_brace_no_match (unit.test_tokenizer.TestStructureFinder)
Test finding matching brace when there's no match ... ok
test_find_structs_anonymous (unit.test_tokenizer.TestStructureFinder)
Test finding anonymous struct definitions ... ok
test_find_structs_simple (unit.test_tokenizer.TestStructureFinder)
Test finding simple struct definitions ... ok
test_find_typedef_enums (unit.test_tokenizer.TestStructureFinder)
Test finding typedef enum definitions ... ok
test_find_typedef_structs (unit.test_tokenizer.TestStructureFinder)
Test finding typedef struct definitions ... ok
test_comment_block_with_code_inside (unit.test_tokenizer.TestTokenizerEdgeCases)
Test that comment blocks containing code-like content are properly ignored ... ok
test_tokenize_complex_expressions (unit.test_tokenizer.TestTokenizerEdgeCases)
Test tokenization of complex C expressions ... ok
test_tokenize_escaped_characters (unit.test_tokenizer.TestTokenizerEdgeCases)
Test tokenization of escaped characters ... ok
test_tokenize_large_multiline_comment_block (unit.test_tokenizer.TestTokenizerEdgeCases)
Test tokenization of large multi-line comment blocks ... ok
test_tokenize_mixed_content (unit.test_tokenizer.TestTokenizerEdgeCases)
Test tokenization of mixed content with all token types ... ok
test_tokenize_multiline_strings (unit.test_tokenizer.TestTokenizerEdgeCases)
Test tokenization of multiline strings ... String tokens: [Token(STRING, '"Line 1
Line 2
Line 3"', 1:0)]
String values: ['"Line 1\nLine 2\nLine 3"']
ok
test_tokenize_nested_comments (unit.test_tokenizer.TestTokenizerEdgeCases)
Test tokenization with nested comments ... ok
test_tokenize_preprocessor_edge_cases (unit.test_tokenizer.TestTokenizerEdgeCases)
Test tokenization of preprocessor edge cases ... ok
test_very_large_comment_block_parsing (unit.test_tokenizer.TestTokenizerEdgeCases)
Test that very large comment blocks are properly filtered out during parsing ... ok
test_extract_token_range (unit.test_tokenizer.TestUtilityFunctions)
Test extracting text from token range ... All tokens: [Token(INT, 'int', 1:0), Token(WHITESPACE, ' ', 1:3), Token(IDENTIFIER, 'x', 1:4), Token(WHITESPACE, ' ', 1:5), Token(ASSIGN, '=', 1:6), Token(WHITESPACE, ' ', 1:7), Token(NUMBER, '42', 1:8), Token(SEMICOLON, ';', 1:10), Token(EOF, '', 1:11)]
Extracted text: int x
ok
test_extract_token_range_invalid (unit.test_tokenizer.TestUtilityFunctions)
Test extracting token range with invalid indices ... ok
test_find_enum_values (unit.test_tokenizer.TestUtilityFunctions)
Test extracting enum values ... ok
test_find_enum_values_complex (unit.test_tokenizer.TestUtilityFunctions)
Test extracting complex enum values ... ok
test_find_struct_fields (unit.test_tokenizer.TestUtilityFunctions)
Test extracting struct fields ... ok
test_additions_with_file_selection (unit.test_transformer.TestTransformer)
Test additions with file selection ... ok
test_apply_element_filters_enums (unit.test_transformer.TestTransformer)
Test element filtering for enums ... ok
test_apply_element_filters_functions (unit.test_transformer.TestTransformer)
Test element filtering for functions ... ok
test_apply_element_filters_globals (unit.test_transformer.TestTransformer)
Test element filtering for globals ... ok
test_apply_element_filters_macros (unit.test_transformer.TestTransformer)
Test element filtering for macros ... ok
test_apply_element_filters_structs (unit.test_transformer.TestTransformer)
Test element filtering for structs ... ok
test_apply_element_filters_typedefs (unit.test_transformer.TestTransformer)
Test element filtering for typedefs ... ok
test_apply_element_filters_unions (unit.test_transformer.TestTransformer)
Test element filtering for unions ... ok
test_apply_file_filters_both_patterns (unit.test_transformer.TestTransformer)
Test file filtering with both include and exclude patterns ... ok
test_apply_file_filters_exclude_only (unit.test_transformer.TestTransformer)
Test file filtering with exclude patterns only ... ok
test_apply_file_filters_include_only (unit.test_transformer.TestTransformer)
Test file filtering with include patterns only ... ok
test_apply_file_filters_no_patterns (unit.test_transformer.TestTransformer)
Test file filtering with no patterns (should return original model) ... ok
test_apply_transformations_no_config (unit.test_transformer.TestTransformer)
Test applying transformations with empty config ... 2025-07-25 21:03:44,338 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,338 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 2 files
ok
test_apply_transformations_with_all_sections (unit.test_transformer.TestTransformer)
Test applying transformations with all configuration sections ... 2025-07-25 21:03:44,338 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,338 - c_to_plantuml.transformer - INFO - Processing include relations with max depth: 2
2025-07-25 21:03:44,338 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 1 files
ok
test_compile_patterns_invalid (unit.test_transformer.TestTransformer)
Test compiling invalid regex patterns ... 2025-07-25 21:03:44,339 - c_to_plantuml.transformer - WARNING - Invalid regex pattern '[invalid': unterminated character set at position 0
ok
test_compile_patterns_valid (unit.test_transformer.TestTransformer)
Test compiling valid regex patterns ... ok
test_dict_to_file_model (unit.test_transformer.TestTransformer)
Test converting dictionary back to FileModel ... ok
test_file_selection_apply_to_all (unit.test_transformer.TestTransformer)
Test file selection with empty selected_files (apply to all) ... ok
test_file_selection_no_file_selection (unit.test_transformer.TestTransformer)
Test file selection with no file_selection specified (apply to all) ... ok
test_file_selection_no_matching_files (unit.test_transformer.TestTransformer)
Test file selection with no matching files ... ok
test_file_selection_selected_files (unit.test_transformer.TestTransformer)
Test file selection with specific file patterns ... ok
test_filter_dict_exclude_only (unit.test_transformer.TestTransformer)
Test dictionary filtering with exclude patterns only ... ok
test_filter_dict_include_only (unit.test_transformer.TestTransformer)
Test dictionary filtering with include patterns only ... ok
test_filter_list_include_only (unit.test_transformer.TestTransformer)
Test list filtering with include patterns only ... ok
test_filter_list_with_key_function (unit.test_transformer.TestTransformer)
Test list filtering with a key function ... ok
test_find_included_file (unit.test_transformer.TestTransformer)
Test finding included file paths ... ok
test_find_included_file_not_found (unit.test_transformer.TestTransformer)
Test finding non-existent included file ... ok
test_load_config_invalid_file (unit.test_transformer.TestTransformer)
Test loading a non-existent configuration file ... ok
test_load_config_valid_file (unit.test_transformer.TestTransformer)
Test loading a valid configuration file ... ok
test_load_model_invalid_file (unit.test_transformer.TestTransformer)
Test loading a non-existent model file ... ok
test_load_model_invalid_json (unit.test_transformer.TestTransformer)
Test loading a model file with invalid JSON ... ok
test_load_model_valid_file (unit.test_transformer.TestTransformer)
Test loading a valid model file ... ok
test_matches_pattern_invalid (unit.test_transformer.TestTransformer)
Test _matches_pattern method with invalid patterns ... 2025-07-25 21:03:44,344 - c_to_plantuml.transformer - WARNING - Invalid pattern '[invalid' for file matching
ok
test_matches_pattern_valid (unit.test_transformer.TestTransformer)
Test _matches_pattern method with valid patterns ... ok
test_process_include_relations (unit.test_transformer.TestTransformer)
Test processing include relations ... 2025-07-25 21:03:44,345 - c_to_plantuml.transformer - INFO - Processing include relations with max depth: 2
ok
test_removals_with_file_selection (unit.test_transformer.TestTransformer)
Test removals with file selection ... ok
test_renaming_with_file_selection (unit.test_transformer.TestTransformer)
Test renaming with file selection ... ok
test_save_model (unit.test_transformer.TestTransformer)
Test saving model to file ... ok
test_should_include_file_both_patterns (unit.test_transformer.TestTransformer)
Test file inclusion with both include and exclude patterns ... ok
test_should_include_file_exclude_patterns (unit.test_transformer.TestTransformer)
Test file inclusion with exclude patterns ... ok
test_should_include_file_include_patterns (unit.test_transformer.TestTransformer)
Test file inclusion with include patterns ... ok
test_transform_main_method (unit.test_transformer.TestTransformer)
Test the main transform method ... 2025-07-25 21:03:44,348 - c_to_plantuml.transformer - INFO - Step 2: Transforming model: /tmp/tmpdnhmjikf.json
2025-07-25 21:03:44,348 - c_to_plantuml.transformer - INFO - Applying transformations to model
2025-07-25 21:03:44,348 - c_to_plantuml.transformer - INFO - Transformations complete. Model now has 1 files
2025-07-25 21:03:44,349 - c_to_plantuml.transformer - INFO - Step 2 complete! Transformed model saved to: /tmp/tmpdnhmjikf.json
ok
test_comments_and_whitespace (unit.test_typedef_extraction.TestTypedefExtraction)
Test extraction with comments and whitespace ... ok
test_comprehensive_typedef_extraction (unit.test_typedef_extraction.TestTypedefExtraction)
Test comprehensive typedef extraction with all types ... 
Extracted 10 typedefs:
1. typedef uint32_t MyLen;
2. typedef int32_t MyInt;
3. typedef char * MyString;
4. typedef MyComplex * MyComplexPtr;
5. typedef MyComplexPtr MyComplexArray[10];
6. typedef int (*MyCallback)(MyBuffer * buffer);
7. typedef struct MyBuffer_tag
8. typedef struct MyComplexStruct_tag
9. typedef enum Color_tag
10. typedef union Number_tag

Checking expected patterns:
âœ… typedef uint32_t MyLen
âœ… typedef int32_t MyInt
âœ… typedef char * MyString
âœ… typedef struct MyBuffer_tag
âœ… typedef int (*MyCallback)
âœ… typedef struct MyComplexStruct_tag
âœ… typedef MyComplex * MyComplexPtr
âœ… typedef MyComplexPtr MyComplexArray
âœ… typedef enum Color_tag
âœ… typedef union Number_tag
ok
test_empty_content (unit.test_typedef_extraction.TestTypedefExtraction)
Test extraction with empty content ... ok
test_enum_typedefs (unit.test_typedef_extraction.TestTypedefExtraction)
Test extraction of enum typedefs ... ok
test_function_pointer_typedefs (unit.test_typedef_extraction.TestTypedefExtraction)
Test extraction of function pointer typedefs ... ok
test_no_typedefs_content (unit.test_typedef_extraction.TestTypedefExtraction)
Test extraction with content that has no typedefs ... ok
test_simple_typedefs (unit.test_typedef_extraction.TestTypedefExtraction)
Test extraction of simple typedefs ... ok
test_struct_typedefs (unit.test_typedef_extraction.TestTypedefExtraction)
Test extraction of struct typedefs ... ok
test_union_typedefs (unit.test_typedef_extraction.TestTypedefExtraction)
Test extraction of union typedefs ... ok
test_detect_file_encoding_ascii (unit.test_utils.TestUtils)
Test encoding detection for ASCII files ... ok
test_detect_file_encoding_utf8 (unit.test_utils.TestUtils)
Test encoding detection for UTF-8 files ... ok
test_detect_file_encoding_with_bom (unit.test_utils.TestUtils)
Test encoding detection for files with BOM ... ok
test_get_acceptable_encodings (unit.test_utils.TestUtils)
Test getting acceptable encodings ... ok
test_get_platform_default_encoding (unit.test_utils.TestUtils)
Test platform default encoding detection ... ok
test_is_acceptable_encoding (unit.test_utils.TestUtils)
Test encoding acceptability check ... ok
test_normalize_encoding (unit.test_utils.TestUtils)
Test encoding normalization ... ok
test_empty_names_detected (unit.test_verifier.TestModelVerifier)
Test that empty names are detected ... 2025-07-25 21:03:44,353 - c_to_plantuml.verifier - WARNING - Model verification found 2 issues:
2025-07-25 21:03:44,353 - c_to_plantuml.verifier - WARNING -   - Invalid struct name '' in file.c
2025-07-25 21:03:44,353 - c_to_plantuml.verifier - WARNING -   - Struct name is empty in file.c
ok
test_invalid_global_name_detected (unit.test_verifier.TestModelVerifier)
Test that invalid global variable names are detected ... 2025-07-25 21:03:44,354 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,354 - c_to_plantuml.verifier - WARNING -   - Invalid field name ']' in global in file.c
ok
test_invalid_identifier_detected (unit.test_verifier.TestModelVerifier)
Test that invalid identifiers are detected ... 2025-07-25 21:03:44,354 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,354 - c_to_plantuml.verifier - WARNING -   - Invalid struct name '123invalid' in file.c
ok
test_invalid_identifiers_fail (unit.test_verifier.TestModelVerifier)
Test that invalid identifiers fail verification ... 2025-07-25 21:03:44,354 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,354 - c_to_plantuml.verifier - WARNING -   - Invalid field name '123invalid' in global in file.c
2025-07-25 21:03:44,355 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,355 - c_to_plantuml.verifier - WARNING -   - Invalid field name 'invalid-name' in global in file.c
2025-07-25 21:03:44,355 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,355 - c_to_plantuml.verifier - WARNING -   - Invalid field name 'invalid.name' in global in file.c
2025-07-25 21:03:44,355 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,355 - c_to_plantuml.verifier - WARNING -   - Invalid field name 'invalid name' in global in file.c
2025-07-25 21:03:44,355 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,355 - c_to_plantuml.verifier - WARNING -   - Invalid field name ']' in global in file.c
2025-07-25 21:03:44,355 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,355 - c_to_plantuml.verifier - WARNING -   - Invalid field name '[' in global in file.c
2025-07-25 21:03:44,355 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,355 - c_to_plantuml.verifier - WARNING -   - Invalid field name '{' in global in file.c
2025-07-25 21:03:44,355 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,355 - c_to_plantuml.verifier - WARNING -   - Invalid field name '}' in global in file.c
2025-07-25 21:03:44,356 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,356 - c_to_plantuml.verifier - WARNING -   - Invalid field name '(' in global in file.c
2025-07-25 21:03:44,356 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,356 - c_to_plantuml.verifier - WARNING -   - Invalid field name ')' in global in file.c
ok
test_missing_opening_brackets_detected (unit.test_verifier.TestModelVerifier)
Test that missing opening brackets are detected ... 2025-07-25 21:03:44,356 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,356 - c_to_plantuml.verifier - WARNING -   - Suspicious field type ']int' for 'test' in global in file.c
2025-07-25 21:03:44,356 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,356 - c_to_plantuml.verifier - WARNING -   - Suspicious field type ')char*' for 'test' in global in file.c
2025-07-25 21:03:44,356 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,356 - c_to_plantuml.verifier - WARNING -   - Suspicious field type '}struct' for 'test' in global in file.c
2025-07-25 21:03:44,357 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,357 - c_to_plantuml.verifier - WARNING -   - Suspicious field type 'int]' for 'test' in global in file.c
2025-07-25 21:03:44,357 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,357 - c_to_plantuml.verifier - WARNING -   - Suspicious field type 'char* ptr]' for 'test' in global in file.c
ok
test_missing_opening_brackets_in_values_detected (unit.test_verifier.TestModelVerifier)
Test that missing opening brackets in values are detected ... 2025-07-25 21:03:44,357 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,357 - c_to_plantuml.verifier - WARNING -   - Suspicious field value ']42' for 'test' in global in file.c
2025-07-25 21:03:44,357 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,357 - c_to_plantuml.verifier - WARNING -   - Suspicious field value ')hello' for 'test' in global in file.c
2025-07-25 21:03:44,357 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,357 - c_to_plantuml.verifier - WARNING -   - Suspicious field value '}data' for 'test' in global in file.c
ok
test_project_level_validation (unit.test_verifier.TestModelVerifier)
Test project-level validation ... 2025-07-25 21:03:44,358 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,358 - c_to_plantuml.verifier - WARNING -   - Project name is empty or whitespace
2025-07-25 21:03:44,358 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,358 - c_to_plantuml.verifier - WARNING -   - Project root is empty or whitespace
2025-07-25 21:03:44,358 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,358 - c_to_plantuml.verifier - WARNING -   - No files found in project
ok
test_suspicious_type_detected (unit.test_verifier.TestModelVerifier)
Test that suspicious types are detected ... 2025-07-25 21:03:44,358 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,358 - c_to_plantuml.verifier - WARNING -   - Suspicious field type '{ \ 
 ( ptr_pau8 ) [ 3 U' for 'test_var' in global in file.c
ok
test_suspicious_value_detected (unit.test_verifier.TestModelVerifier)
Test that suspicious values are detected ... 2025-07-25 21:03:44,359 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,359 - c_to_plantuml.verifier - WARNING -   - Suspicious field value '\ 
 } 
 
 
 
 
 
 
 
 
 #define CRYPTO_PRV_UTILS_U16_TO_U8ARR_BIG_ENDIAN(value_u16, ptr_pau8) \ 
 { \ 
 ( ptr_pau8 ) [ 1 U' for 'test_var' in global in file.c
ok
test_unbalanced_brackets_detected (unit.test_verifier.TestModelVerifier)
Test that unbalanced brackets are detected ... 2025-07-25 21:03:44,359 - c_to_plantuml.verifier - WARNING - Model verification found 1 issues:
2025-07-25 21:03:44,359 - c_to_plantuml.verifier - WARNING -   - Suspicious field type 'int[10' for 'test' in global in file.c
ok
test_valid_identifiers_pass (unit.test_verifier.TestModelVerifier)
Test that valid identifiers pass verification ... 2025-07-25 21:03:44,359 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,360 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,360 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,360 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,360 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
2025-07-25 21:03:44,360 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
ok
test_valid_model_passes_verification (unit.test_verifier.TestModelVerifier)
Test that a valid model passes verification ... 2025-07-25 21:03:44,360 - c_to_plantuml.verifier - INFO - Model verification passed - all values look sane
ok

----------------------------------------------------------------------
Ran 329 tests in 1.708s

OK

--------------------------------------------------
                 unittest Summary                 
--------------------------------------------------
Tests run: 329
Failures: 0
Errors: 0

======================================================================
                       ðŸŽ¯ Test Execution Summary                       
======================================================================
Duration: 1.85 seconds
âœ… All tests passed!
