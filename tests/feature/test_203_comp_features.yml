test:
  name: Component Features â€“ Types and Relationships (Comprehensive)
  description: Validate typedefs, unions, function pointers, cross-file dependencies, and recursive includes; ensure model captures aliases and relationships
  category: feature
  id: '203'
---
source_files:
  main.c: |
    #include "api.h"
    #include "util.h"
    int main() { return add(1, 2) + (int)call_cb(cb_default); }
  api.h: |
    #ifndef API_H
    #define API_H
    #include "types.h"
    typedef int (*callback_t)(int);
    int add(int a, int b);
    callback_t cb_default;
    #endif
  types.h: |
    #ifndef TYPES_H
    #define TYPES_H
    typedef struct Point { int x; int y; } Point;
    typedef union Value { int i; float f; } Value;
    #endif
  util.h: |
    #ifndef UTIL_H
    #define UTIL_H
    #include "api.h"
    static inline int call_cb(callback_t cb) { return cb(42); }
    #endif
---
config.json: |
  {
    "project_name": "component_features",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true
  }
---
assertions:
  execution:
    exit_code: 0
    max_execution_time: 30.0
  model:
    validate_structure: true
    project_name: component_features
    expected_files:
      - main.c
      - api.h
      - types.h
      - util.h
    functions_exist:
      - main
      - add
    structs_exist:
      - Point
    enums_exist: []
    unions_exist:
      - Value
    aliases_exist:
      - callback_t
    includes_exist:
      - api.h
      - types.h
      - util.h
  puml:
    syntax_valid: true
  files:
    output_dir_exists: ./output
    files_exist:
      - ./output/model.json
      - ./output/model_transformed.json
