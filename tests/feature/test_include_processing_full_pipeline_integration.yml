# Test metadata
test:
  name: "Full Pipeline Integration"
  description: "Test full pipeline with complex include relationships"
  category: "feature"
  id: "1007"

---
# Source files
source_files:
  main.c: |
    #include "module_a.h"
    #include "module_b.h"

    int main() {
        ComponentA comp_a = create_component_a();
        ComponentB comp_b = create_component_b();
        return 0;
    }
  module_a.h: |
    #ifndef MODULE_A_H
    #define MODULE_A_H

    #include "common.h"

    typedef struct {
        int id;
        BaseData data;
    } ComponentA;

    ComponentA create_component_a();

    #endif
  module_b.h: |
    #ifndef MODULE_B_H
    #define MODULE_B_H

    #include "common.h"

    typedef struct {
        int type;
        BaseData data;
    } ComponentB;

    ComponentB create_component_b();

    #endif
  common.h: |
    #ifndef COMMON_H
    #define COMMON_H

    typedef struct {
        int value;
        char name[64];
    } BaseData;

    #endif

---
# Configuration
config.json: |
  {
    "project_name": "test_full_pipeline_integration",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true,
    "include_depth": 3
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    max_execution_time: 30.0
  
  model:
    validate_structure: true
    files:
      main.c:
        functions: ["main"]
      module_a.h:
        structs:
          ComponentA:
            fields: ["id", "data"]
        functions: ["create_component_a"]
      module_b.h:
        structs:
          ComponentB:
            fields: ["type", "data"]
        functions: ["create_component_b"]
      common.h:
        structs:
          BaseData:
            fields: ["value", "name"]
    element_counts:
      functions: 3
      structs: 3
  
  puml:
    syntax_valid: true
    contains_elements: ["ComponentA", "ComponentB", "BaseData", "main"]
    class_count: 7
    relationship_count: 9