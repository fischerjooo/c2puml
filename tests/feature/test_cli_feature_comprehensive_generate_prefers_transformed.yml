# Test metadata
test:
  name: "CLI Feature Generate Prefers Transformed Model"
  description: "Test generate command preferring transformed model over model.json through CLI interface"
  category: "feature"
  id: "1003"

---
# Source files - need to provide both model.json and model_transformed.json for generate step
source_files:
  model.json: |
    {
      "project_name": "cli_test",
      "source_folder": ".",
      "files": {
        "test.c": {
          "file_path": "test.c",
          "name": "test.c",
          "structs": {
            "Point": {
              "name": "Point",
              "fields": [
                {"name": "x", "type": "int"}
              ]
            }
          },
          "enums": {},
          "unions": {},
          "functions": [
            {
              "name": "main",
              "return_type": "int",
              "parameters": []
            }
          ],
          "globals": [],
          "includes": [],
          "macros": [],
          "aliases": {},
          "include_relations": [],
          "anonymous_relationships": {}
        }
      }
    }
  model_transformed.json: |
    {
      "project_name": "cli_test",
      "source_folder": ".",
      "files": {
        "test.c": {
          "file_path": "test.c",
          "name": "test.c",
          "structs": {
            "Point": {
              "name": "Point",
              "fields": [
                {"name": "x", "type": "int"}
              ]
            }
          },
          "enums": {},
          "unions": {},
          "functions": [
            {
              "name": "main",
              "return_type": "int",
              "parameters": []
            }
          ],
          "globals": [],
          "includes": [],
          "macros": [],
          "aliases": {},
          "include_relations": [],
          "anonymous_relationships": {}
        }
      }
    }

---
# Configuration
config.json: |
  {
    "project_name": "cli_test",
    "source_folders": ["."],
    "recursive_search": true,
    "output_dir": "./output"
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    max_execution_time: 30.0
    stdout_contains: "PlantUML generation complete"
  
  puml:
    syntax_valid: true
    file_count: 1
    contains_elements: ["Point", "main"]
    contains_lines: ["@startuml test", "@enduml"]
    
    files:
      test.puml:
        syntax_valid: true
        contains_elements: ["Point", "main"]
        not_empty: true
  
  files:
    files_exist:
      - "./output/test.puml"