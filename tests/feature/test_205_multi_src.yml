test:
  name: Multiple Source Folders CLI
  description: Verify parsing across multiple source folders
  category: feature
  id: '205'
---
source_files:
  src1/main.c: |
    #include "utils.h"

    struct Person {
        char name[50];
        int age;
    };

    int main() {
        struct Person p = {"John", 30};
        return 0;
    }
  src1/utils.h: |
    #ifndef UTILS_H
    #define UTILS_H

    typedef struct {
        int x, y;
    } Point;

    void print_point(Point p);

    #endif
  src2/app.c: |
    #include "types.h"

    enum Color { RED, GREEN, BLUE };

    void process_color(enum Color c) {}
  src2/types.h: |
    #ifndef TYPES_H
    #define TYPES_H

    typedef unsigned int uint32_t;
    typedef struct {
        uint32_t id;
        char name[100];
    } Item;

    #endif
  src3/complex.c: |
    #include "data.h"

    union Data { int i; float f; char str[20]; };

    struct Container {
        union Data data;
        int type;
    };
  src3/data.h: |
    #ifndef DATA_H
    #define DATA_H

    #define MAX_SIZE 100

    typedef struct {
        int values[MAX_SIZE];
        int count;
    } Array;

    #endif
---
config.json: |
  {
    "project_name": "multi_source_test",
    "source_folders": ["./src/src1", "./src/src2", "./src/src3"],
    "output_dir": "./output",
    "recursive_search": true,
    "include_depth": 1
  }
---
assertions:
  execution:
    exit_code: 0
    max_execution_time: 60.0
  model:
    validate_structure: true
    project_name: multi_source_test
    expected_files:
    - main.c
    - app.c
    - complex.c
    - utils.h
    - types.h
    - data.h
    functions_exist:
    - main
    - process_color
    structs_exist:
    - Person
    - Item
    - Container
    - Array
    enums_exist:
    - Color
    macros_exist:
    - MAX_SIZE
    element_counts:
      files: 6
  puml:
    syntax_valid: true
  files:
    output_dir_exists: ./output
    files_exist:
      - ./output/model.json
      - ./output/model_transformed.json
