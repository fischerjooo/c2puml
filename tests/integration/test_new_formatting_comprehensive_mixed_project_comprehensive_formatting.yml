# Test metadata
test:
  name: "Mixed Project Comprehensive Formatting"
  description: "Test comprehensive formatting in a project with multiple files and cross-file visibility detection"
  category: "integration"
  id: "2102"

---
# Source files
source_files:
  main.c: |
    #include "main.h"
    #include "utils.h"

    // Global variables
    char* program_name = "TestApp";
    static int debug_mode = 0;

    // Public function (declared in main.h)
    int main(int argc, char** argv) {
        program_name = (argc > 0) ? argv[0] : "unknown";
        
        utility_function();
        internal_main_helper();
        
        return 0;
    }

    // Private function (not declared in any header)
    static void internal_main_helper(void) {
        debug_mode = 1;
    }

  utils.c: |
    #include "utils.h"
    #include "main.h"

    // Global variables
    int utils_initialized = 0;
    static void* private_cache = NULL;

    // Public function (declared in utils.h)
    void utility_function(void) {
        if (!utils_initialized) {
            utils_initialized = 1;
            internal_utils_helper();
        }
    }

    // Private function (not declared in any header)
    static int internal_utils_helper(void) {
        private_cache = malloc(1024);
        return (private_cache != NULL) ? 1 : 0;
    }

  main.h: |
    #ifndef MAIN_H
    #define MAIN_H

    // Public declarations from main.c
    extern char* program_name;
    int main(int argc, char** argv);

    #endif

  utils.h: |
    #ifndef UTILS_H
    #define UTILS_H

    #include <stdlib.h>

    // Public declarations from utils.c
    extern int utils_initialized;
    void utility_function(void);

    #endif

---
# Configuration
config.json: |
  {
    "project_name": "mixed_project_formatting_test",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true,
    "include_depth": 2,
    "file_filters": {
      "include": ["*.c", "*.h"],
      "exclude": []
    }
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    output_files: ["model.json", "model_transformed.json", "main.puml", "utils.puml"]
    max_execution_time: 45.0
  
  model:
    validate_structure: true
    expected_files: ["main.c", "utils.c", "main.h", "utils.h"]
    
    # Verify core element counts (simplified for robustness)
    element_counts:
      functions: 6        # actual count: main.c:2 + main.h:1 + utils.c:2 + utils.h:1
      globals: 6          # actual count found by the parser
  
  puml:
    syntax_valid: true
    file_count: 2