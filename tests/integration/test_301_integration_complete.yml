test:
  name: Complete System Integration
  description: Test complete system integration with a realistic multi-module game
    project structure
  category: integration
  id: '301'
---
source_files:
  src/main.c: "#include \"game/game.h\"\n#include \"platform/platform.h\"\n\nint main(int\
    \ argc, char** argv) {\n    Platform platform;\n    Game game;\n\n    if (!platform_init(&platform))\
    \ {\n        return -1;\n    }\n\n    if (!game_init(&game, &platform)) {\n  \
    \      platform_shutdown(&platform);\n        return -1;\n    }\n\n    while (platform_is_running(&platform))\
    \ {\n        platform_update(&platform);\n        game_update(&game, platform_get_delta_time(&platform));\n\
    \        game_render(&game);\n    }\n\n    game_shutdown(&game);\n    platform_shutdown(&platform);\n\
    \n    return 0;\n}\n"
  src/game/game.h: "#ifndef GAME_H\n#define GAME_H\n\n#include \"../platform/platform.h\"\
    \n#include \"entities/player.h\"\n#include \"world/level.h\"\n#include \"rendering/renderer.h\"\
    \n\ntypedef struct {\n    Platform* platform;\n    Player player;\n    Level current_level;\n\
    \    Renderer renderer;\n    double total_time;\n} Game;\n\nint game_init(Game*\
    \ game, Platform* platform);\nvoid game_update(Game* game, double delta_time);\n\
    void game_render(Game* game);\nvoid game_shutdown(Game* game);\n\n#endif\n"
  src/game/entities/player.h: "#ifndef PLAYER_H\n#define PLAYER_H\n\n#include \"../../math/vector.h\"\
    \n#include \"../../physics/rigidbody.h\"\n\ntypedef struct {\n    Vector3 position;\n\
    \    Vector3 velocity;\n    RigidBody physics;\n    float health;\n    int score;\n\
    } Player;\n\n#endif\n"
  src/game/world/level.h: "#ifndef LEVEL_H\n#define LEVEL_H\n\n#include \"../entities/player.h\"\
    \n#include \"../../graphics/mesh.h\"\n\ntypedef struct {\n    Mesh* geometry;\n\
    \    Player* players;\n    int player_count;\n    char* name;\n} Level;\n\n#endif\n"
  src/game/rendering/renderer.h: "#ifndef RENDERER_H\n#define RENDERER_H\n\n#include\
    \ \"../../graphics/context.h\"\n#include \"../../graphics/shader.h\"\n\ntypedef\
    \ struct {\n    GraphicsContext context;\n    Shader* active_shader;\n    int\
    \ frame_count;\n} Renderer;\n\n#endif\n"
  src/platform/platform.h: "#ifndef PLATFORM_H\n#define PLATFORM_H\n\ntypedef struct\
    \ {\n    void* window_handle;\n    int window_width;\n    int window_height;\n\
    \    double last_frame_time;\n} Platform;\n\nint platform_init(Platform* platform);\n\
    void platform_update(Platform* platform);\nint platform_is_running(Platform* platform);\n\
    double platform_get_delta_time(Platform* platform);\nvoid platform_shutdown(Platform*\
    \ platform);\n\n#endif\n"
  src/math/vector.h: "#ifndef VECTOR_H\n#define VECTOR_H\n\ntypedef struct {\n   \
    \ float x, y, z;\n} Vector3;\n\nVector3 vector_add(Vector3 a, Vector3 b);\nVector3\
    \ vector_scale(Vector3 v, float scalar);\n\n#endif\n"
  src/physics/rigidbody.h: "#ifndef RIGIDBODY_H\n#define RIGIDBODY_H\n\n#include \"\
    ../math/vector.h\"\n\ntypedef struct {\n    Vector3 position;\n    Vector3 velocity;\n\
    \    Vector3 acceleration;\n    float mass;\n} RigidBody;\n\n#endif\n"
  src/graphics/context.h: "#ifndef CONTEXT_H\n#define CONTEXT_H\n\ntypedef struct\
    \ {\n    void* api_context;\n    int api_version;\n} GraphicsContext;\n\n#endif\n"
  src/graphics/shader.h: "#ifndef SHADER_H\n#define SHADER_H\n\ntypedef struct {\n\
    \    unsigned int program_id;\n    char* source_code;\n} Shader;\n\n#endif\n"
  src/graphics/mesh.h: "#ifndef MESH_H\n#define MESH_H\n\ntypedef struct {\n    float*\
    \ vertices;\n    unsigned int* indices;\n    int vertex_count;\n    int index_count;\n\
    } Mesh;\n\n#endif\n"
---
config.json: "{\n  \"project_name\": \"complete_system_integration_test\",\n  \"source_folders\"\
  : [\"src\"],\n  \"output_dir\": \"./output\",\n  \"recursive_search\": true,\n \
  \ \"include_depth\": 5,\n  \"file_filters\": {\n    \"include\": [\"*.c\", \"*.h\"\
  ],\n    \"exclude\": []\n  }\n}\n"
---
assertions:
  execution:
    exit_code: 0
    output_files:
    - model.json
    - model_transformed.json
    - main.puml
    max_execution_time: 60.0
  model:
    validate_structure: true
    expected_files:
    - main.c
    - game.h
    - player.h
    - level.h
    - renderer.h
    - platform.h
    - vector.h
    - rigidbody.h
    - context.h
    - shader.h
    - mesh.h
    element_counts:
      functions: 12
      structs: 10
  puml:
    syntax_valid: true
    file_count: 1
