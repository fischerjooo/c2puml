# Test metadata
test:
  name: "Comprehensive Typedef Relationships Integration"
  description: "Test comprehensive typedef relationships across files with complex type dependencies"
  category: "integration"
  id: "2003"

---
# Source files
source_files:
  main.c: |
    #include "database/models.h"

    int main() {
        User user = create_user("john", 25);
        Product product = create_product("laptop", 999.99);
        Order order = create_order(&user, &product);
        return 0;
    }

  database/models.h: |
    #ifndef MODELS_H
    #define MODELS_H

    #include "types.h"
    #include "relationships.h"

    typedef struct {
        UserId id;
        UserName name;
        Age age;
        Address address;
    } User;

    typedef struct {
        ProductId id;
        ProductName name;
        Price price;
        Category category;
    } Product;

    User create_user(const char* name, int age);
    Product create_product(const char* name, double price);

    #endif

  database/types.h: |
    #ifndef TYPES_H
    #define TYPES_H

    typedef unsigned int UserId;
    typedef unsigned int ProductId;
    typedef unsigned int OrderId;
    typedef char* UserName;
    typedef char* ProductName;
    typedef double Price;
    typedef int Age;

    typedef enum {
        ELECTRONICS,
        CLOTHING,
        BOOKS,
        OTHER
    } Category;

    typedef struct {
        char* street;
        char* city;
        char* zip_code;
    } Address;

    #endif

  database/relationships.h: |
    #ifndef RELATIONSHIPS_H
    #define RELATIONSHIPS_H

    #include "types.h"

    typedef struct {
        OrderId id;
        UserId user_id;
        ProductId product_id;
        int quantity;
        Price total_price;
    } Order;

    Order create_order(void* user, void* product);

    #endif

---
# Configuration
config.json: |
  {
    "project_name": "typedef_relationships_test",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true,
    "include_depth": 3,
    "file_filters": {
      "include": ["*.c", "*.h"],
      "exclude": []
    }
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    output_files: ["model.json", "model_transformed.json", "main.puml"]
    max_execution_time: 45.0
  
  model:
    validate_structure: true
    expected_files: ["main.c", "models.h", "types.h", "relationships.h"]
    
    # Verify core element counts (simplified for robustness)
    element_counts:
      functions: 4        # main, create_user, create_product, create_order
      structs: 4          # User, Product, Address, Order
      enums: 1            # Category
  
  puml:
    syntax_valid: true
    file_count: 1