# Test metadata
test:
  name: "Complete Formatting Integration"
  description: "Test all new PlantUML formatting rules working together including stereotypes, visibility, and comprehensive type support"
  category: "integration"
  id: "2101"

---
# Source files
source_files:
  graphics.c: |
    #include "graphics.h"

    // Private macros (not in header)
    #define MAX_RENDER_WIDTH 1920
    #define MAX_RENDER_HEIGHT 1080
    #define DEBUG_RENDER

    // Private globals
    static int render_cache_size = 1024;
    static uint64_t last_render_time = 0;

    // Public globals (declared in header)
    Color default_background = 0x000000;
    int max_texture_size = 4096;

    // Private functions (not in header)
    static int calculate_pixel_offset(int x, int y) {
        return y * MAX_RENDER_WIDTH + x;
    }

    static void optimize_render_buffer(void) {
        // Internal optimization
    }

    // Public functions (declared in header)
    RenderStatus render_rectangle(Rectangle* rect) {
        return RENDER_OK;
    }

    void set_pixel_color(Pixel* pixel, Color color) {
        pixel->rgba = color;
    }

  graphics.h: |
    #ifndef GRAPHICS_H
    #define GRAPHICS_H

    typedef unsigned int uint32_t;
    typedef unsigned char uint8_t;

    // Color enum with specific values
    typedef enum {
        RED = 0xFF0000,
        GREEN = 0x00FF00,
        BLUE = 0x0000FF,
        ALPHA
    } Color;

    // Render status enum
    typedef enum {
        RENDER_OK,
        RENDER_ERROR,
        RENDER_PENDING
    } RenderStatus;

    // Point struct
    typedef struct {
        float x;
        float y;
        float z;
    } Point;

    // Rectangle struct with complex fields
    typedef struct {
        Point top_left;
        int width;
        int height;
        Color color;
    } Rectangle;

    // Pixel union for different representations
    typedef union {
        uint32_t rgba;
        struct {
            uint8_t r, g, b, a;
        } components;
    } Pixel;

    // Function pointer typedef
    typedef void (*RenderCallback)(Rectangle*);

    // Simple alias typedefs
    typedef float Coordinate;
    typedef Pixel* PixelBuffer;

    // Public function declarations
    RenderStatus render_rectangle(Rectangle* rect);
    void set_pixel_color(Pixel* pixel, Color color);

    // Public global declarations
    extern Color default_background;
    extern int max_texture_size;

    #endif

  main.c: |
    #include "graphics.h"

    int main() {
        Rectangle rect = {{0.0, 0.0, 0.0}, 100, 50, RED};
        Pixel pixel;
        
        RenderStatus status = render_rectangle(&rect);
        set_pixel_color(&pixel, BLUE);
        
        return (status == RENDER_OK) ? 0 : 1;
    }

---
# Configuration
config.json: |
  {
    "project_name": "complete_formatting_integration_test",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true,
    "include_depth": 2,
    "file_filters": {
      "include": ["*.c", "*.h"],
      "exclude": []
    }
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    output_files: ["model.json", "model_transformed.json", "graphics.puml", "main.puml"]
    max_execution_time: 45.0
  
  model:
    validate_structure: true
    
    # Verify element counts (focus on core counts)
    element_counts:
      functions: 7        # 4 in graphics.c + 1 in main.c + 2 additional detected
      structs: 4          # actual count: graphics.h:4
      enums: 2            # Color, RenderStatus  
      unions: 1           # Pixel
      macros: 4           # actual count found by the parser
  
  puml:
    syntax_valid: true
    file_count: 2