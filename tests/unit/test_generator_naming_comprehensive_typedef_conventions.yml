# Test metadata
test:
  name: "Generator Typedef Naming Conventions"
  description: "Test that typedef UML IDs follow the correct naming conventions (TYPEDEF_UPPERCASE)"
  category: "unit"
  id: "0025"

---
# Source files
source_files:
  model.json: |
    {
      "project_name": "test_generator_naming",
      "source_folder": "/tmp",
      "files": {
        "test.c": {
          "file_path": "/tmp/test.c",
          "aliases": {
            "Integer": {
              "original_type": "int"
            }
          },
          "anonymous_relationships": {},
          "enums": {
            "Color": {
              "values": ["RED", "GREEN", "BLUE"]
            }
          },
          "functions": [],
          "globals": [],
          "include_relations": [],
          "includes": [],
          "macros": {},
          "structs": {
            "MyBuffer": {
              "fields": [
                {"name": "data", "type": "char*"},
                {"name": "size", "type": "size_t"}
              ]
            }
          },
          "unions": {
            "Value": {
              "fields": [
                {"name": "integer", "type": "int"},
                {"name": "decimal", "type": "float"}
              ]
            }
          }
        }
      },
      "include_relations": []
    }

---
# Configuration
config.json: |
  {
    "project_name": "test_generator_naming",
    "source_folders": ["src"],
    "output_dir": "output",
    "recursive_search": false
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    
  puml:
    syntax_valid: true
    
    # Global PlantUML assertions - validate typedef naming conventions
    contains_elements: ["TYPEDEF_MYBUFFER", "TYPEDEF_COLOR", "TYPEDEF_VALUE", "TYPEDEF_INTEGER"]
    
    # Per-file PlantUML assertions
    files:
      test.puml:
        # Validate specific typedef class declarations with correct naming
        contains_lines:
          - "class \"MyBuffer\" as TYPEDEF_MYBUFFER"
          - "class \"Color\" as TYPEDEF_COLOR"
          - "class \"Value\" as TYPEDEF_VALUE"
          - "class \"Integer\" as TYPEDEF_INTEGER"
        
        # Validate typedef stereotypes
        contains_elements: ["<<struct>>", "<<enumeration>>", "<<union>>", "<<typedef>>"]
        
        # Ensure correct class count (1 source + 4 typedefs)
        class_count: 5