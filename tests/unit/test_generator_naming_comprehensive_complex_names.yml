# Test metadata
test:
  name: "Generator Complex Typedef Names"
  description: "Test that complex typedef names with underscores and mixed case are handled correctly"
  category: "unit"
  id: "0027"

---
# Source files
source_files:
  model.json: |
    {
      "project_name": "test_complex_naming",
      "source_folder": "/tmp",
      "files": {
        "test.c": {
          "file_path": "/tmp/test.c",
          "aliases": {
            "pointer_to_int": {
              "original_type": "int*"
            }
          },
          "anonymous_relationships": {},
          "enums": {
            "LOG_LEVEL_T": {
              "values": ["DEBUG", "INFO", "WARNING", "ERROR"]
            }
          },
          "functions": [],
          "globals": [],
          "include_relations": [],
          "includes": [],
          "macros": {},
          "structs": {
            "complex_naming_test_t": {
              "fields": [
                {"name": "field1", "type": "int"},
                {"name": "field2", "type": "char*"}
              ]
            }
          },
          "unions": {
            "callback_function_t": {
              "fields": [
                {"name": "ptr", "type": "void*"},
                {"name": "value", "type": "int"}
              ]
            }
          }
        }
      },
      "include_relations": []
    }

---
# Configuration
config.json: |
  {
    "project_name": "test_complex_naming",
    "source_folders": ["src"],
    "output_dir": "output",
    "recursive_search": false
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    
  puml:
    syntax_valid: true
    
    # Global PlantUML assertions - validate complex typedef naming conventions
    contains_elements: ["TYPEDEF_COMPLEX_NAMING_TEST_T", "TYPEDEF_LOG_LEVEL_T", "TYPEDEF_CALLBACK_FUNCTION_T", "TYPEDEF_POINTER_TO_INT"]
    
    # Per-file PlantUML assertions
    files:
      test.puml:
        # Validate specific complex typedef class declarations with correct naming
        contains_lines:
          - "class \"complex_naming_test_t\" as TYPEDEF_COMPLEX_NAMING_TEST_T"
          - "class \"LOG_LEVEL_T\" as TYPEDEF_LOG_LEVEL_T"
          - "class \"callback_function_t\" as TYPEDEF_CALLBACK_FUNCTION_T"
          - "class \"pointer_to_int\" as TYPEDEF_POINTER_TO_INT"
        
        # Validate typedef stereotypes
        contains_elements: ["<<struct>>", "<<enumeration>>", "<<union>>", "<<typedef>>"]
        
        # Ensure correct class count (1 source + 4 complex typedefs)
        class_count: 5