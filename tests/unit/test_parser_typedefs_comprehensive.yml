# Test metadata
test:
  name: "Parser â€“ Typedefs Comprehensive"
  description: "Consolidated parsing of typedef aliases, function pointers, typedef struct, and simple/typedef enums"
  category: "unit"
  id: "0040"

---
# Source files
source_files:
  typedefs.c: |
    typedef int Integer;
    typedef char* String;
    typedef void (*Callback)(int);
    typedef struct {
        int x;
        int y;
    } Point;

  point_typedef.c: |
    typedef struct point_tag {
        int x;
        int y;
    } point_t;

  status.c: |
    enum Status {
        OK = 0,
        ERROR = 1,
        PENDING = 2
    };

  color.c: |
    typedef enum {
        RED,
        GREEN,
        BLUE
    } Color;

---
# Configuration
config.json: |
  {
    "project_name": "test_parser_typedefs_comprehensive",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    output_files: [
      "model.json", "model_transformed.json",
      "typedefs.puml", "point_typedef.puml", "status.puml", "color.puml"
    ]
  
  model:
    files:
      typedefs.c:
        aliases: ["Integer", "String", "Callback"]
        structs:
          Point:
            fields: ["x", "y"]
      point_typedef.c:
        structs:
          point_t:
            fields: ["x", "y"]
      status.c:
        enums:
          Status:
            values: ["OK", "ERROR", "PENDING"]
      color.c:
        enums:
          Color:
            values: ["RED", "GREEN", "BLUE"]

  puml:
    syntax_valid: true
    files:
      typedefs.puml:
        contains_elements: ["Integer", "String", "Callback", "Point"]
      point_typedef.puml:
        contains_elements: ["point_t"]
      status.puml:
        contains_elements: ["Status"]
      color.puml:
        contains_elements: ["Color"]