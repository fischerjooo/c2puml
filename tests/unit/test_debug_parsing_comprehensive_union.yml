# Test metadata
test:
  name: "Debug Complex Union Parsing"
  description: "Test parsing complex union with nested structures for debugging purposes"
  category: "unit"
  id: "0091"

---
# Source files
source_files:
  test_union.c: |
    typedef union {
        int primary_int;
        union {
            float nested_float;
            double nested_double;
        } nested_union;
        char primary_bytes[32];
    } test_union_t;
    
    typedef struct {
        test_union_t data;
        char label[16];
    } container_t;

---
# Configuration
config.json: |
  {
    "project_name": "debug_complex_union_parsing",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    output_files: ["model.json", "model_transformed.json", "test_union.puml"]
  
  model:
    validate_structure: true
    project_name: "debug_complex_union_parsing"
    expected_files: ["test_union.c"]
    
    # Validate union parsing
    unions_exist: ["test_union_t"]
    structs_exist: ["container_t"]
    
    # Validate union field details
    union_details:
      test_union_t:
        fields: ["primary_int", "nested_union", "primary_bytes"]
    
    # Validate struct details
    struct_details:
      container_t:
        fields: ["data", "label"]
    
    # Validate element counts
    element_counts:
      unions: 2  # test_union_t and nested_union (anonymous becomes named)
      structs: 1  # container_t
      aliases: 0  # typedef union/struct creates union/struct, not alias
  
  puml:
    syntax_valid: true
    file_count: 1
    
    files:
      test_union.puml:
        contains_elements: ["test_union_t", "container_t", "nested_union"]
        class_count: 4  # source + 3 typedef classes
        relationship_count: 4  # 2 declares + 1 uses + 1 composition