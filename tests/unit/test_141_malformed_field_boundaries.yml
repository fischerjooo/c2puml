test:
  name: Malformed Field Boundary Detection
  description: Test for the specific malformed field boundary issue found in complex.h where nested_a2 gets incorrect field type
  category: unit
  id: '141'
---
source_files:
  malformed_boundaries_test.c: |
    // Test for the specific malformed field boundary issue found in complex.h
    // This reproduces the exact structure that causes the problem
    
    typedef struct {
        // First level - multiple structs
        struct {
            int first_a;
            struct {
                int nested_a1;
                struct {
                    int deep_a1;
                } deep_struct_a1;
                struct {
                    int deep_a2;
                } deep_struct_a2;
            } nested_struct_a;
            struct {
                int nested_a2;
            } nested_struct_a2;
        } first_struct;
        
        struct {
            int second_a;
            struct {
                int nested_b1;
            } nested_struct_b;
        } second_struct;
        
        // Mixed unions and structs
        union {
            int union_value;
            struct {
                int union_struct_field;
                struct {
                    int deep_union_struct;
                } deep_in_union;
            } union_struct;
        } mixed_union;
        
        struct {
            int third_a;
            union {
                int struct_union_int;
                struct {
                    int struct_union_struct_field;
                } struct_union_struct;
            } struct_union;
        } third_struct;
    } complex_naming_test_t;
    
    // Test the specific case from extreme_nesting_test_t
    typedef struct {
        struct {
            struct {
                struct {
                    int level4_field;
                } level4_struct_1;
                struct {
                    int level4_field2;
                } level4_struct_2;
            } level3_struct_1;
            struct {
                int level3_field;
            } level3_struct_2;
        } level2_struct_1;
        
        struct {
            union {
                struct {
                    int mixed_field;
                } mixed_struct;
            } mixed_union;
        } level2_struct_2;
    } extreme_nesting_test_t;
    
    // Global variables
    complex_naming_test_t global_complex;
    extreme_nesting_test_t global_extreme;
    
    // Functions
    void process_complex(complex_naming_test_t* c) {
        c->first_struct.first_a = 1;
        c->first_struct.nested_struct_a.nested_a1 = 10;
        c->first_struct.nested_struct_a.deep_struct_a1.deep_a1 = 100;
        c->first_struct.nested_struct_a.deep_struct_a2.deep_a2 = 200;
        c->first_struct.nested_struct_a2.nested_a2 = 20;
    }
    
    void process_extreme(extreme_nesting_test_t* e) {
        e->level2_struct_1.level3_struct_1.level4_struct_1.level4_field = 1000;
        e->level2_struct_1.level3_struct_1.level4_struct_2.level4_field2 = 2000;
        e->level2_struct_1.level3_struct_2.level3_field = 3000;
    }
    
    int main() {
        process_complex(&global_complex);
        process_extreme(&global_extreme);
        return 0;
    }
---
config.json: |
  {
    "project_name": "malformed_boundaries_test",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true,
    "include_depth": 1
  }
---
assertions:
  execution:
    exit_code: 0
    output_files:
    - model.json
    - model_transformed.json
    - malformed_boundaries_test.puml
  model:
    validate_structure: true
    project_name: malformed_boundaries_test
    expected_files:
    - malformed_boundaries_test.c
    files:
      malformed_boundaries_test.c:
        structs_exist:
        - complex_naming_test_t
        - extreme_nesting_test_t
        - complex_naming_test_t_first_struct
        - complex_naming_test_t_first_struct_nested_struct_a
        - complex_naming_test_t_first_struct_nested_struct_a_deep_struct_a1
        - complex_naming_test_t_first_struct_nested_struct_a_deep_struct_a2
        - complex_naming_test_t_first_struct_nested_struct_a2
        - complex_naming_test_t_second_struct
        - complex_naming_test_t_second_struct_nested_struct_b
        - complex_naming_test_t_mixed_union
        - complex_naming_test_t_mixed_union_union_struct
        - complex_naming_test_t_mixed_union_union_struct_deep_in_union
        - complex_naming_test_t_third_struct
        - complex_naming_test_t_third_struct_struct_union
        - complex_naming_test_t_third_struct_struct_union_struct_union_struct
        - extreme_nesting_test_t
        - extreme_nesting_test_t_level2_struct_1
        - extreme_nesting_test_t_level2_struct_1_level3_struct_1
        - extreme_nesting_test_t_level2_struct_1_level3_struct_1_level4_struct_1
        - extreme_nesting_test_t_level2_struct_1_level3_struct_1_level4_struct_2
        - extreme_nesting_test_t_level2_struct_1_level3_struct_2
        - extreme_nesting_test_t_level2_struct_2
        - extreme_nesting_test_t_level2_struct_2_mixed_union
        - extreme_nesting_test_t_level2_struct_2_mixed_union_mixed_struct
        functions_exist:
        - process_complex
        - process_extreme
        - main
        globals_exist:
        - global_complex
        - global_extreme
    struct_fields:
      complex_naming_test_t_first_struct:
        - name: first_a
          type: int
        - name: nested_struct_a
          type: complex_naming_test_t_first_struct_nested_struct_a
        - name: nested_struct_a2
          type: complex_naming_test_t_first_struct_nested_struct_a2
      complex_naming_test_t_first_struct_nested_struct_a:
        - name: nested_a1
          type: int
        - name: deep_struct_a1
          type: complex_naming_test_t_first_struct_nested_struct_a_deep_struct_a1
        - name: deep_struct_a2
          type: complex_naming_test_t_first_struct_nested_struct_a_deep_struct_a2
      complex_naming_test_t_first_struct_nested_struct_a2:
        - name: nested_a2
          type: int
      extreme_nesting_test_t_level2_struct_1:
        - name: level3_struct_1
          type: extreme_nesting_test_t_level2_struct_1_level3_struct_1
        - name: level3_struct_2
          type: extreme_nesting_test_t_level2_struct_1_level3_struct_2
      extreme_nesting_test_t_level2_struct_1_level3_struct_2:
        - name: level3_field
          type: int
  puml:
    syntax_valid: true
    file_count: 1
    contains_elements:
    - complex_naming_test_t
    - extreme_nesting_test_t
    - complex_naming_test_t_first_struct
    - complex_naming_test_t_first_struct_nested_struct_a
    - complex_naming_test_t_first_struct_nested_struct_a_deep_struct_a1
    - complex_naming_test_t_first_struct_nested_struct_a_deep_struct_a2
    - complex_naming_test_t_first_struct_nested_struct_a2
    - extreme_nesting_test_t_level2_struct_1
    - extreme_nesting_test_t_level2_struct_1_level3_struct_2
    files:
      malformed_boundaries_test.puml:
        syntax_valid: true
        contains_lines:
        - class "complex_naming_test_t" as TYPEDEF_COMPLEX_NAMING_TEST_T
        - class "extreme_nesting_test_t" as TYPEDEF_EXTREME_NESTING_TEST_T
        - class "complex_naming_test_t_first_struct" as TYPEDEF_COMPLEX_NAMING_TEST_T_FIRST_STRUCT
        - class "complex_naming_test_t_first_struct_nested_struct_a2" as TYPEDEF_COMPLEX_NAMING_TEST_T_FIRST_STRUCT_NESTED_STRUCT_A2
        - class "extreme_nesting_test_t_level2_struct_1_level3_struct_2" as TYPEDEF_EXTREME_NESTING_TEST_T_LEVEL2_STRUCT_1_LEVEL3_STRUCT_2
        - "+ int nested_a2"  # Should have correct field type, not malformed
        - "+ int level3_field"  # Should have correct field type, not malformed
        - void process_complex(
        - void process_extreme(
        - int main()