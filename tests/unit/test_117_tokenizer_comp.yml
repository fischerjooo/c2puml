test:
  name: Tokenizer â€“ Comprehensive
  description: Consolidated tokenizer validation across complex parsing, edge cases, preprocessor, functions, mixed structures, nested unions, and keyword handling
  category: unit
  id: '117'
---
source_files:
  complex.c: |
    #include <stdio.h>
    #include <stdlib.h>

    // Complex typedefs with function pointers
    typedef struct Node {
        int data;
        struct Node* next;
        int (*compare)(const void* a, const void* b);
        void (*callback)(struct Node* self, void* context);
    } Node;

    // Complex enum with explicit values
    typedef enum {
        STATE_INIT = 0x01,
        STATE_RUNNING = 0x02,
        STATE_PAUSED = 0x04,
        STATE_STOPPED = 0x08,
        STATE_ERROR = 0xFF
    } SystemState;

    // Complex union with nested structs
    typedef union {
        struct {
            uint8_t r, g, b, a;
        } color;
        uint32_t value;
        struct {
            uint16_t high;
            uint16_t low;
        } words;
    } ColorUnion;

    // Complex function with multiple pointer levels
    int** allocate_matrix(size_t rows, size_t cols);

    // Function with complex parameter types
    void process_data(
        const Node* const * nodes,
        size_t count,
        int (*processor)(const Node*, void*),
        void* context
    );

    // Simple global variable
    static int global_counter = 0;

    // Complex macro with multi-line definition
    #define SAFE_FREE(ptr) do { \
        if ((ptr) != NULL) { \
            free(ptr); \
            (ptr) = NULL; \
        } \
    } while(0)

    // Function with complex body that tests expression parsing
    Node* create_node(int data) {
        Node* node = (Node*)malloc(sizeof(Node));
        if (node != NULL) {
            node->data = data;
            node->next = NULL;
            node->compare = NULL;
            node->callback = NULL;
        }
        return node;
    }
  edge_cases.c: |
    #include <stdio.h>
    #include <string.h>

    /* Multi-line comment with
       complex content like:
       struct fake { int x; };
       This should be ignored */

    // Single line comment with code: int y = 5;

    struct EdgeCase {
        char string_with_quotes[50];  // "embedded quotes"
        char escaped_chars[20];       // contains \n, \t, \\, \"
        int complex_expr;             // result of (a * b + c) / d
    };

    // String literals with special content
    const char* test_strings[] = {
        "Simple string",
        "String with \"escaped quotes\"",
        "String with \\ backslash",
        "String with \n newline",
        "Multi line string",
        ""  // Empty string
    };

    // Complex expressions with multiple operators
    int complex_calculation() {
        int a = 10, b = 20, c = 30;
        int result1 = ((a + b) * c - (a / b)) % 7;
        int result2 = (a << 2) | (b >> 1) & ~c;
        int result3 = (a > b) ? (c * 2) : (c / 2);
        return strlen("test") + result1 + result2 + result3;
    }

    // Macro with complex content
    #define COMPLEX_MACRO(x, y) \
        do { \
            if ((x) > (y)) { \
                printf("x=%d > y=%d\n", (x), (y)); \
            } else { \
                printf("x=%d <= y=%d\n", (x), (y)); \
            } \
        } while(0)

    // Edge case: function with many punctuation marks
    void punctuation_test(int array[], size_t len, int (*cmp)(const void*, const void*)) {
        int* ptr = &array[0];
        (*ptr)++;
        array[len-1] = *ptr;
    }
  preprocessor.c: "#include <stdio.h>\n#include <stdlib.h>\n\n// Complex conditional compilation\n#ifdef DEBUG\n    #define LOG(msg) printf(\"DEBUG: %s\\n\", msg)\n    #define DEBUG_ONLY(code) code\n#else\n    #define LOG(msg) \n    #define DEBUG_ONLY(code)\n#endif\n\n// Multi-level nested preprocessor conditions\n#if defined(FEATURE_A) && !defined(FEATURE_B)\n    #ifdef PLATFORM_LINUX\n        #define PLATFORM_SPECIFIC_FUNC linux_func\n    #elif defined(PLATFORM_WINDOWS)\n        #define PLATFORM_SPECIFIC_FUNC windows_func\n    #else\n        #define PLATFORM_SPECIFIC_FUNC generic_func\n    #endif\n#else\n    #define PLATFORM_SPECIFIC_FUNC default_func\n#endif\n\n// Preprocessor with complex expressions\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n#define CLAMP(x, min, max) MIN(MAX(x, min), max)\n\n// Macro with stringification and token pasting\n#define DECLARE_FUNC(name) \\\n    void name##_init(void); \\\n    void name##_cleanup(void); \\\n \
    \   const char* name##_get_name(void) { return #name; }\n\nstruct Config {\n    int base_value;\n#ifdef EXTENDED_CONFIG\n    int extended_value;\n    char* description;\n#endif\n#if MAX_FEATURES > 10\n    int feature_flags[MAX_FEATURES];\n#else\n    int feature_flags[10];\n#endif\n};\n\nint calculate_result(int input) {\n    int result = input;\n#ifdef APPLY_MULTIPLIER\n    result *= 2;\n#endif\n#ifndef DISABLE_BOUNDS_CHECK\n    if (result < 0) result = 0;\n    if (result > 1000) result = 1000;\n#endif\n    DEBUG_ONLY(LOG(\"Result calculated\"));\n    return result;\n}\n\n#define COMPLEX_OPERATION(x, y, z) \\\n    do { \\\n        int temp1 = (x) + (y); \\\n        int temp2 = temp1 * (z); \\\n        printf(\"Operation: %d + %d = %d, * %d = %d\\n\", \\\n               (x), (y), temp1, (z), temp2); \\\n    } while(0)\n\nDECLARE_FUNC(module_a)\nDECLARE_FUNC(module_b)\n"
  complex_functions.c: |
    #include <stdarg.h>

    struct complex_struct;
    typedef struct complex_struct complex_t;

    typedef void (*callback_t)(int result, void* user_data);
    typedef int (*comparator_t)(const void* a, const void* b);

    int complex_function(
        const char* name,
        complex_t* data,
        callback_t callback,
        void* user_data,
        int flags,
        ...  // variadic parameters
    );

    static complex_t* create_complex(
        const char* name,
        size_t name_len,
        int initial_value
    ) {
        return NULL;
    }

    comparator_t get_comparator(
        const char* type,
        int (*custom_compare)(const void*, const void*)
    );

    inline void process_array(
        complex_t** array,
        size_t count,
        void (*processor)(complex_t*, int index)
    ) {}

    void log_message(int level, const char* format, ...);
    const volatile int* get_status_pointer(void);
  mixed_structures.c: |
    #include <stdio.h>
    #include <stdlib.h>

    typedef enum {
        STATE_IDLE = 0,
        STATE_RUNNING = 1,
        STATE_PAUSED = 2,
        STATE_ERROR = -1
    } state_t;

    typedef struct {
        char name[64];
        state_t current_state;
        struct {
            int x, y, z;
            union {
                float as_float[3];
                int as_int[3];
            } coordinates;
        } position;
        union {
            struct {
                char type;
                int value;
            } typed_data;
            float raw_float;
            int raw_int;
        } data;
    } complex_entity_t;

    typedef int (*process_func_t)(complex_entity_t*, state_t);

    int process_entity(complex_entity_t* entity, state_t new_state) {
        if (entity && new_state >= STATE_IDLE) {
            entity->current_state = new_state;
            return 1;
        }
        return 0;
    }

    complex_entity_t global_entity;
    process_func_t global_processor = process_entity;
  complex_union.c: |
    typedef union {
        int primary_int;
        union {
            float nested_float;
            double nested_double;
            union {
                char deep_char;
                short deep_short;
            } deep_union;
        } nested_union;
        char primary_bytes[32];
        struct {
            int struct_in_union;
            float struct_float;
        } embedded_struct;
    } complex_union_t;

    void process_complex_union(complex_union_t* cu) {}
    complex_union_t global_complex_union;
  keywords.c: |
    struct DataStruct {
        int value;
        const char* name;
    };

    enum DataEnum {
        OPTION_A,
        OPTION_B
    };

    union DataUnion {
        int intVal;
        float floatVal;
    };

    static int static_var = 10;
    extern int extern_var;

    inline void inline_func() {}
    void regular_func(const void* ptr) {}
---
config.json: |
  {
    "project_name": "test_tokenizer_comprehensive",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true
  }
---
assertions:
  execution:
    exit_code: 0
    output_files:
    - model.json
    - model_transformed.json
    - complex.puml
    - edge_cases.puml
    - preprocessor.puml
    - complex_functions.puml
    - mixed_structures.puml
    - complex_union.puml
    - keywords.puml
  model:
    files:
      complex.c:
        structs:
          Node:
            fields:
            - data
            - next
            - compare
            - callback
        enums:
          SystemState:
            values:
            - STATE_INIT
            - STATE_RUNNING
            - STATE_PAUSED
            - STATE_STOPPED
            - STATE_ERROR
        unions:
          ColorUnion:
            fields:
            - color
            - value
            - words
        functions:
        - allocate_matrix
        - process_data
        - create_node
        globals:
        - global_counter
        macros:
        - SAFE_FREE
        includes:
        - stdio.h
        - stdlib.h
      edge_cases.c:
        structs:
          EdgeCase:
            fields:
            - string_with_quotes
            - escaped_chars
            - complex_expr
        functions:
        - complex_calculation
        - punctuation_test
        globals:
        - test_strings
        macros:
        - COMPLEX_MACRO
        includes:
        - stdio.h
        - string.h
      preprocessor.c:
        structs:
          Config:
            fields:
            - base_value
        functions:
        - calculate_result
        macros:
        - CLAMP
        - COMPLEX_OPERATION
        - DECLARE_FUNC
        - MAX
        - MIN
        - PLATFORM_SPECIFIC_FUNC
        includes:
        - stdio.h
        - stdlib.h
      complex_functions.c:
        functions_exist:
        - complex_function
        - create_complex
        - get_comparator
        - process_array
        - log_message
        - get_status_pointer
        aliases_exist:
        - callback_t
        - comparator_t
        includes_exist:
        - stdarg.h
      mixed_structures.c:
        structs_exist:
        - complex_entity_t
        enums_exist:
        - state_t
        functions_exist:
        - process_entity
        globals_exist:
        - global_entity
        - global_processor
        includes_exist:
        - stdio.h
        - stdlib.h
        aliases_exist:
        - process_func_t
      complex_union.c:
        unions_exist:
        - complex_union_t
        functions_exist:
        - process_complex_union
        globals_exist:
        - global_complex_union
        structs_exist:
        - complex_union_t_embedded_struct
      keywords.c:
        structs:
          DataStruct:
            fields:
            - value
            - name
        enums:
          DataEnum:
            values:
            - OPTION_A
            - OPTION_B
        unions:
          DataUnion:
            fields:
            - intVal
            - floatVal
        functions:
        - inline_func
        - regular_func
        globals:
        - static_var
        - extern_var
  puml:
    syntax_valid: true
    files:
      complex.puml:
        contains_elements:
        - Node
        - SystemState
        - ColorUnion
        - complex
        contains_lines:
        - class "Node" as TYPEDEF_NODE
        - class "SystemState" as TYPEDEF_SYSTEMSTATE
        - class "ColorUnion" as TYPEDEF_COLORUNION
      edge_cases.puml:
        contains_elements:
        - EdgeCase
        - edge_cases
        contains_lines:
        - class "EdgeCase" as TYPEDEF_EDGECASE
      preprocessor.puml:
        contains_elements:
        - Config
        - preprocessor
        contains_lines:
        - class "Config" as TYPEDEF_CONFIG
      complex_functions.puml:
        contains_elements:
        - complex_function
        - create_complex
        - callback_t
        - comparator_t
        contains_lines:
        - complex_function
        - create_complex(
      mixed_structures.puml:
        contains_elements:
        - complex_entity_t
        - state_t
        - process_entity
        - global_entity
        contains_lines:
        - int process_entity(complex_entity_t * entity, state_t new_state)
      complex_union.puml:
        contains_elements:
        - complex_union_t
        - process_complex_union
        - global_complex_union
        contains_lines:
        - void process_complex_union(complex_union_t * cu)
        - complex_union_t global_complex_union
      keywords.puml:
        contains_elements:
        - DataStruct
        - DataEnum
        - DataUnion
        contains_lines:
        - class "DataStruct" as TYPEDEF_DATASTRUCT
        - class "DataEnum" as TYPEDEF_DATAENUM
