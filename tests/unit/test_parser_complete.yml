# Test metadata
test:
  name: "Parser Complete"
  description: "Test parsing a complete C file with all elements"
  category: "unit"
  id: "0011"

---
# Source files
source_files:
  complete.c: |
    #include <stdio.h>
    #include <stdlib.h>
    #include "config.h"

    #define MAX_SIZE 100
    #define DEBUG_MODE 1

    typedef int Integer;
    typedef char* String;

    struct Person {
        char name[50];
        int age;
        float height;
    };

    struct Config {
        int max_users;
        int timeout;
        String server_name;
    };

    enum Status {
        OK,
        ERROR,
        PENDING
    };

    int global_var = 42;
    String global_string = "test";

    int main() {
        printf("Hello, World!\\n");
        return 0;
    }

    void process_data(void* data) {
        // Process data
    }

    float calculate(float a, float b) {
        return a + b;
    }

---
# Configuration
config.json: |
  {
    "project_name": "test_parser_complete",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    output_files: ["model.json", "model_transformed.json", "complete.puml"]
  
  model:
    files:
      complete.c:
        includes: ["stdio.h", "stdlib.h", "config.h"]
        macros: ["MAX_SIZE", "DEBUG_MODE"]
        aliases: ["Integer", "String"]
        structs:
          Person:
            fields: ["name", "age", "height"]
          Config:
            fields: ["max_users", "timeout", "server_name"]
        enums:
          Status:
            values: ["OK", "ERROR", "PENDING"]
        functions: ["main", "process_data", "calculate"]
        globals: ["global_var", "global_string"]
    element_counts:
      structs: 2
      enums: 1
      functions: 3
      globals: 2
      includes: 3
      macros: 2
  
  puml:
    # Global PlantUML assertions (applied to all files)
    syntax_valid: true
    
    # Per-file PlantUML assertions
    files:
      complete.puml:
        contains_elements: ["Person", "Config", "Status", "Integer", "String", "main", "process_data", "calculate", "global_var", "global_string"]
        contains_lines: ["class \"Person\" as TYPEDEF_PERSON", "class \"Config\" as TYPEDEF_CONFIG", "class \"Status\" as TYPEDEF_STATUS", "class \"Integer\" as TYPEDEF_INTEGER", "class \"String\" as TYPEDEF_STRING"]
        class_count: 6
        relationship_count: 6