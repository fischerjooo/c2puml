test:
  name: Include Filtering Comprehensive
  description: Comprehensive test for include filtering with depth control and file-specific
    filters
  category: unit
  id: '133'
---
source_files:
  processor.c: "#include \"api.h\"\n#include \"worker.h\"\n#include \"private_worker.h\"\
    \n\n// Main processor functions\nvoid process_data() {\n    api_function();\n\
    \    worker_function();\n}\n\nint main() {\n    process_data();\n    return 0;\n\
    }\n"
  api.h: '#ifndef API_H

    #define API_H


    #include "types.h"

    #include "platform.h"

    #include "memory.h"


    // Public API functions

    void api_function(void);

    extern int api_global;


    #endif

    '
  worker.h: '#ifndef WORKER_H

    #define WORKER_H


    #include "validation.h"

    #include "errors.h"


    // Worker functions

    void worker_function(void);

    extern int worker_global;


    #endif

    '
  private_worker.h: '#ifndef PRIVATE_WORKER_H

    #define PRIVATE_WORKER_H


    #include "internal.h"


    // Private worker functions

    void private_worker_function(void);


    #endif

    '
  types.h: "#ifndef TYPES_H\n#define TYPES_H\n\n#include \"constants.h\"\n\ntypedef\
    \ int ProcessorID;\ntypedef struct {\n    int x, y;\n} Point;\n\n#endif\n"
  platform.h: '#ifndef PLATFORM_H

    #define PLATFORM_H


    #define PLATFORM_LINUX

    #define MAX_THREADS 16


    #endif

    '
  memory.h: '#ifndef MEMORY_H

    #define MEMORY_H


    void* allocate_memory(size_t size);

    void free_memory(void* ptr);


    #endif

    '
  validation.h: '#ifndef VALIDATION_H

    #define VALIDATION_H


    int validate_input(int value);


    #endif

    '
  errors.h: "#ifndef ERRORS_H\n#define ERRORS_H\n\nenum ErrorCode {\n    ERROR_NONE,\n\
    \    ERROR_INVALID,\n    ERROR_MEMORY\n};\n\n#endif\n"
  constants.h: '#ifndef CONSTANTS_H

    #define CONSTANTS_H


    #define MAX_BUFFER_SIZE 1024

    #define DEFAULT_TIMEOUT 5000


    #endif

    '
  internal.h: '#ifndef INTERNAL_H

    #define INTERNAL_H


    void internal_function(void);


    #endif

    '
---
config.json: "{\n  \"project_name\": \"test_include_filtering\",\n  \"source_folders\"\
  : [\".\"],\n  \"output_dir\": \"./output\",\n  \"recursive_search\": true,\n  \"\
  include_depth\": 3,\n  \"file_specific\": {\n    \"processor.c\": {\n      \"include_filter\"\
  : [\"^api\\\\.h$\", \"^worker\\\\.h$\", \"^types\\\\.h$\", \"^platform\\\\.h$\"\
  ],\n      \"include_depth\": 2\n    }\n  }\n}\n"
---
assertions:
  execution:
    exit_code: 0
    output_files:
    - model.json
    - model_transformed.json
    - processor.puml
  model:
    validate_structure: true
    project_name: test_include_filtering
    expected_files:
    - processor.c
    - api.h
    - worker.h
    - types.h
    - platform.h
    - private_worker.h
    - memory.h
    - validation.h
    - errors.h
    - constants.h
    - internal.h
    files:
      processor.c:
        includes_exist:
        - api.h
        - worker.h
        - private_worker.h
        functions_exist:
        - process_data
        - main
      api.h:
        includes_exist:
        - types.h
        - platform.h
        - memory.h
        functions_exist:
        - api_function
        globals_exist:
        - api_global
      worker.h:
        includes_exist:
        - validation.h
        - errors.h
        functions_exist:
        - worker_function
        globals_exist:
        - worker_global
      types.h:
        includes_exist:
        - constants.h
        structs_exist:
        - Point
      platform.h:
        macros_exist:
        - PLATFORM_LINUX
        - MAX_THREADS
  puml:
    syntax_valid: true
    file_count: 1
    contains_elements:
    - processor
    - api
    - worker
    - types
    - platform
    files:
      processor.puml:
        syntax_valid: true
        contains_elements:
        - api
        - worker
        - types
        - platform
        contains_lines:
        - PROCESSOR --> HEADER_API
        - PROCESSOR --> HEADER_WORKER
        - void process_data()
        - int main()
