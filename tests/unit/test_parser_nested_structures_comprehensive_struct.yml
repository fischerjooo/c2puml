# Test metadata
test:
  name: "Nested Struct Preservation"
  id: "0106"
  description: "Test that nested structs maintain their structure and hierarchy during parsing"

---
# Source files
source_files:
  struct_nested.c: |
    typedef struct {
        int outer_id;
        char outer_name[32];
        struct {
            int inner_x;
            int inner_y;
            char inner_label[16];
        } inner_struct;
        int outer_flags;
    } struct_with_struct_t;
    
    void init_nested_struct(struct_with_struct_t* s) {
        s->outer_id = 1;
        s->inner_struct.inner_x = 10;
        s->inner_struct.inner_y = 20;
        s->outer_flags = 0xFF;
    }
    
    struct_with_struct_t global_struct;

---
# Configuration
config.json: |
  {
    "project_name": "nested_struct_preservation",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true
  }

---
cli_execution:
  steps:
    - parse_only

---
# Assertions
assertions:
  execution:
    should_succeed: true
    
  model:
    structs_exist: ["struct_with_struct_t", "struct_with_struct_t_inner_struct", "__anonymous_struct__"]
    functions_exist: ["init_nested_struct"]
    globals_exist: ["global_struct"]
    
    # Validate main struct field parsing
    struct_fields:
      struct_with_struct_t:
        - name: "outer_id"
          type: "int"
        - name: "outer_name"
          type: "char[32]"
        - name: "inner_struct"
          type: "struct_with_struct_t_inner_struct"
        - name: "outer_flags"
          type: "int"
    
    # Validate nested struct field parsing
    struct_fields:
      struct_with_struct_t_inner_struct:
        - name: "inner_x"
          type: "int"
        - name: "inner_y"
          type: "int"
        - name: "inner_label"
          type: "char[16]"
    
    # Validate anonymous struct (parsing artifact)
    struct_fields:
      __anonymous_struct__:
        - name: "inner_x"
          type: "int"
        - name: "inner_y"
          type: "int"
        - name: "inner_label"
          type: "char[16]"
    
    element_counts:
      structs: 3  # main struct + nested struct + anonymous struct artifact
      unions: 0
      functions: 1
      globals: 1
      aliases: 0
      
  puml:
    contains_elements: ["struct_with_struct_t", "init_nested_struct", "global_struct"]
    contains_lines:
      - "void init_nested_struct(struct_with_struct_t * s)"
      - "+ int outer_id"
      - "+ char[32] outer_name"
      - "+ struct_with_struct_t_inner_struct inner_struct"
      - "+ int outer_flags"
      - "+ int inner_x"
      - "+ int inner_y"
      - "+ char[16] inner_label"
      - "struct_with_struct_t global_struct"
    
    class_count: 4  # source + 3 structs (main + nested + anonymous)
    relationship_count: 3  # 2 declares + 1 composition relationship