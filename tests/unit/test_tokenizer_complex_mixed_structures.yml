# Test metadata
test:
  name: "Tokenizer Complex Mixed Structures Validation"
  description: "Test tokenization of complex mixed structures through parsing validation"
  category: "unit"
  id: "0095"

---
# Source files
source_files:
  mixed_structures.c: |
    #include <stdio.h>
    #include <stdlib.h>
    
    // Complex enum with values
    typedef enum {
        STATE_IDLE = 0,
        STATE_RUNNING = 1,
        STATE_PAUSED = 2,
        STATE_ERROR = -1
    } state_t;
    
    // Complex struct with nested anonymous structures
    typedef struct {
        char name[64];
        state_t current_state;
        struct {
            int x, y, z;
            union {
                float as_float[3];
                int as_int[3];
            } coordinates;
        } position;
        union {
            struct {
                char type;
                int value;
            } typed_data;
            float raw_float;
            int raw_int;
        } data;
    } complex_entity_t;
    
    // Function pointer typedef
    typedef int (*process_func_t)(complex_entity_t*, state_t);
    
    // Global function that uses everything
    int process_entity(complex_entity_t* entity, state_t new_state) {
        if (entity && new_state >= STATE_IDLE) {
            entity->current_state = new_state;
            return 1;
        }
        return 0;
    }
    
    // Global variables
    complex_entity_t global_entity;
    process_func_t global_processor = process_entity;

---
# Configuration
config.json: |
  {
    "project_name": "tokenizer_complex_mixed_structures",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    output_files: ["model.json", "model_transformed.json", "mixed_structures.puml"]
  
  model:
    validate_structure: true
    project_name: "tokenizer_complex_mixed_structures"
    expected_files: ["mixed_structures.c"]
    
    # Validate mixed structure parsing
    structs_exist: ["complex_entity_t"]
    enums_exist: ["state_t"]
    functions_exist: ["process_entity"]
    globals_exist: ["global_entity", "global_processor"]
    includes_exist: ["stdio.h", "stdlib.h"]
    aliases_exist: ["process_func_t"]  # Function pointer typedef creates alias
    
    # Validate enum details
    enum_details:
      state_t:
        values: ["STATE_IDLE", "STATE_RUNNING", "STATE_PAUSED", "STATE_ERROR"]
    
    # Validate element counts
    element_counts:
      structs: 4  # complex_entity_t + 3 anonymous structs become named
      enums: 1
      unions: 3   # anonymous unions become named
      functions: 1
      globals: 2
      includes: 2
      aliases: 1  # function pointer typedef
  
  puml:
    syntax_valid: true
    file_count: 1
    
    files:
      mixed_structures.puml:
        contains_elements: ["complex_entity_t", "state_t", "process_entity", "global_entity"]
        contains_lines: ["int process_entity(complex_entity_t * entity, state_t new_state)"]
        class_count: 9  # source + 8 typedef classes
        relationship_count: 10  # multiple declares, uses, and composition relationships