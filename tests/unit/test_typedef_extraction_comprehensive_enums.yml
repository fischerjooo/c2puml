# Test metadata
test:
  name: "Typedef Extraction - Enum Typedefs"
  description: "Test extraction of enum typedef declarations"
  category: "unit"
  id: "0054"

---
# Source files
source_files:
  enum_typedefs.c: |
    // Enum typedef declarations
    typedef enum Color_tag {
        COLOR_RED,
        COLOR_GREEN,
        COLOR_BLUE
    } Color_t;
    
    typedef enum log_level_tag {
        LOG_DEBUG,
        LOG_INFO,
        LOG_WARN,
        LOG_ERROR
    } log_level_t;
    
    typedef enum Status {
        STATUS_OK,
        STATUS_ERROR,
        STATUS_PENDING
    } Status_t;
    


---
# Configuration
config.json: |
  {
    "project_name": "test_typedef_extraction_enums",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    output_files: ["model.json", "model_transformed.json", "enum_typedefs.puml"]
  
  model:
    files:
      enum_typedefs.c:
        enums:
          Color_t:
            values: ["COLOR_RED", "COLOR_GREEN", "COLOR_BLUE"]
          log_level_t:
            values: ["LOG_DEBUG", "LOG_INFO", "LOG_WARN", "LOG_ERROR"]
          Status_t:
            values: ["STATUS_OK", "STATUS_ERROR", "STATUS_PENDING"]
    element_counts:
      structs: 0
      enums: 3
      functions: 0
      globals: 0
      includes: 0
  
  puml:
    # Global PlantUML assertions (applied to all files)
    syntax_valid: true
    
    # Per-file PlantUML assertions
    files:
      enum_typedefs.puml:
        contains_elements: ["Color_t", "log_level_t", "Status_t"]
        contains_lines: ["class \"Color_t\" as TYPEDEF_COLOR_T", "class \"log_level_t\" as TYPEDEF_LOG_LEVEL_T", "class \"Status_t\" as TYPEDEF_STATUS_T"]
        class_count: 4  # 3 enum typedefs + 1 source file
        relationship_count: 3  # Each enum typedef has relationship to source file