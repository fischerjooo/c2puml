test:
  name: "Debug Complex Struct Field Processing"
  id: "0100"
  description: "Validate complex struct field processing with nested structures and arrays"

---
source_files:
  complex_struct.c: |
    typedef struct {
        int base_id;
        struct {
            char name[64];
            float value;
            struct {
                int x, y, z;
            } coordinates;
        } metadata;
        union {
            long long_value;
            double double_value;
        } data_variant;
        char buffer[256];
    } complex_struct_t;
    
    void init_complex_struct(complex_struct_t* cs) {
        cs->base_id = 0;
        cs->metadata.value = 0.0f;
    }
    
    complex_struct_t global_complex;

---
config.json: |
  {
    "project_name": "debug_complex_struct_field_processing",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true
  }

---
cli_execution:
  steps:
    - parse_only

---
assertions:
  execution:
    should_succeed: true
    
  model:
    structs_exist: ["complex_struct_t", "complex_struct_t_metadata", "__anonymous_struct__", "__anonymous_struct___coordinates"]
    unions_exist: ["complex_struct_t_data_variant", "data_variant"]
    functions_exist: ["init_complex_struct"]
    globals_exist: ["global_complex"]
    
    # Validate field parsing for the main struct
    struct_fields:
      complex_struct_t:
        - name: "base_id"
          type: "int"
        - name: "metadata"
          type: "complex_struct_t_metadata"
        - name: "buffer"
          type: "char[256]"
        - name: "data_variant"
          type: "data_variant"
    
    # Validate nested struct field parsing (coordinates got flattened)
    struct_fields:
      complex_struct_t_metadata:
        - name: "x"
          type: "int"
        - name: "y"
          type: "int"
        - name: "z"
          type: "int"
    
    # Validate anonymous struct
    struct_fields:
      __anonymous_struct__:
        - name: "name"
          type: "char[64]"
        - name: "value"
          type: "float"
        - name: "coordinates"
          type: "__anonymous_struct___coordinates"
    
    # Validate deeply nested struct
    struct_fields:
      __anonymous_struct___coordinates:
        - name: "x"
          type: "int"
        - name: "y"
          type: "int"
        - name: "z"
          type: "int"
    
    # Validate union fields
    union_fields:
      complex_struct_t_data_variant:
        - name: "long_value"
          type: "long"
        - name: "double_value"
          type: "double"
          
    union_fields:
      data_variant:
        - name: "long_value"
          type: "long"
        - name: "double_value"
          type: "double"
    
    element_counts:
      structs: 4  # complex_struct_t + complex_struct_t_metadata + 2 anonymous structs
      unions: 2   # duplicated union parsing creates 2 unions
      functions: 1
      globals: 1
      aliases: 0
      
  puml:
    contains_elements: ["complex_struct_t", "init_complex_struct", "global_complex"]
    contains_lines:
      - "void init_complex_struct(complex_struct_t * cs)"
      - "+ int base_id"
      - "+ complex_struct_t_metadata metadata"
      - "+ data_variant data_variant"
      - "+ char[256] buffer"
      - "+ char[64] name"
      - "+ float value"
      - "+ __anonymous_struct___coordinates coordinates"
      - "+ int x"
      - "+ int y"
      - "+ int z"
      - "+ long long_value"
      - "+ double double_value"
      - "complex_struct_t global_complex"
    
    class_count: 7  # source + complex_struct_t + complex_struct_t_metadata + __anonymous_struct__ + __anonymous_struct___coordinates + 2 unions
    relationship_count: 6  # 2 declares + 4 composition relationships