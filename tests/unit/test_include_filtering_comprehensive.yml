# Test metadata
test:
  name: "Include Filtering Comprehensive"
  description: "Comprehensive test for include filtering with depth control and file-specific filters"
  category: "unit"
  id: "0502"

---
# Source files
source_files:
  processor.c: |
    #include "api.h"
    #include "worker.h"
    #include "private_worker.h"
    
    // Main processor functions
    void process_data() {
        api_function();
        worker_function();
    }
    
    int main() {
        process_data();
        return 0;
    }

  api.h: |
    #ifndef API_H
    #define API_H
    
    #include "types.h"
    #include "platform.h"
    #include "memory.h"
    
    // Public API functions
    void api_function(void);
    extern int api_global;
    
    #endif

  worker.h: |
    #ifndef WORKER_H
    #define WORKER_H
    
    #include "validation.h"
    #include "errors.h"
    
    // Worker functions
    void worker_function(void);
    extern int worker_global;
    
    #endif

  private_worker.h: |
    #ifndef PRIVATE_WORKER_H
    #define PRIVATE_WORKER_H
    
    #include "internal.h"
    
    // Private worker functions
    void private_worker_function(void);
    
    #endif

  types.h: |
    #ifndef TYPES_H
    #define TYPES_H
    
    #include "constants.h"
    
    typedef int ProcessorID;
    typedef struct {
        int x, y;
    } Point;
    
    #endif

  platform.h: |
    #ifndef PLATFORM_H
    #define PLATFORM_H
    
    #define PLATFORM_LINUX
    #define MAX_THREADS 16
    
    #endif

  memory.h: |
    #ifndef MEMORY_H
    #define MEMORY_H
    
    void* allocate_memory(size_t size);
    void free_memory(void* ptr);
    
    #endif

  validation.h: |
    #ifndef VALIDATION_H
    #define VALIDATION_H
    
    int validate_input(int value);
    
    #endif

  errors.h: |
    #ifndef ERRORS_H
    #define ERRORS_H
    
    enum ErrorCode {
        ERROR_NONE,
        ERROR_INVALID,
        ERROR_MEMORY
    };
    
    #endif

  constants.h: |
    #ifndef CONSTANTS_H
    #define CONSTANTS_H
    
    #define MAX_BUFFER_SIZE 1024
    #define DEFAULT_TIMEOUT 5000
    
    #endif

  internal.h: |
    #ifndef INTERNAL_H
    #define INTERNAL_H
    
    void internal_function(void);
    
    #endif

---
# Configuration
config.json: |
  {
    "project_name": "test_include_filtering",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true,
    "include_depth": 3,
    "file_specific": {
      "processor.c": {
        "include_filter": ["^api\\.h$", "^worker\\.h$", "^types\\.h$", "^platform\\.h$"],
        "include_depth": 2
      }
    }
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    output_files: ["model.json", "model_transformed.json", "processor.puml"]
  
  model:
    validate_structure: true
    project_name: "test_include_filtering"
    expected_files: ["processor.c", "api.h", "worker.h", "types.h", "platform.h", "private_worker.h", "memory.h", "validation.h", "errors.h", "constants.h", "internal.h"]
    
    # Test file-specific include filtering
    files:
      processor.c:
        includes_exist: ["api.h", "worker.h", "private_worker.h"]
        functions_exist: ["process_data", "main"]
        
        # Test that filtered includes are not present in include_relations
        # (include_filter only allows api.h, worker.h, types.h, platform.h)
        # private_worker.h and its dependencies should be filtered out
        
      api.h:
        includes_exist: ["types.h", "platform.h", "memory.h"]
        functions_exist: ["api_function"]
        globals_exist: ["api_global"]
        
      worker.h:
        includes_exist: ["validation.h", "errors.h"]
        functions_exist: ["worker_function"]
        globals_exist: ["worker_global"]
        
      types.h:
        includes_exist: ["constants.h"]
        structs_exist: ["Point"]
        
      platform.h:
        macros_exist: ["PLATFORM_LINUX", "MAX_THREADS"]
    
    # Note: Include filtering at file level may not fully exclude files from the model
    # but should affect include_relations processing during transformation
    
    # Test basic parsing - counts may vary based on implementation details
    # Focus on core functionality rather than exact counts
  
  puml:
    syntax_valid: true
    file_count: 1
    
    # Test that includes appear in PlantUML (filtering affects relations, not element presence)
    contains_elements: ["processor", "api", "worker", "types", "platform"]
    
    files:
      processor.puml:
        syntax_valid: true
        contains_elements: ["api", "worker", "types", "platform"]
        
        # Test basic include relationships are present
        contains_lines: [
          "PROCESSOR --> HEADER_API",
          "PROCESSOR --> HEADER_WORKER", 
          "void process_data()",
          "int main()"
        ]
        
        # Class and relationship counts depend on implementation details
        # Focus on presence of key elements rather than exact counts