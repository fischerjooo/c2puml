@startuml geometry

class "geometry" as GEOMETRY <<source>> #LightBlue
{
    -- Functions --
    + triangle_t create_triangle(const point_t * a, const point_t * b, const point_t * c, const char * label)
    + int triangle_area(const triangle_t * tri)
}

class "geometry" as HEADER_GEOMETRY <<header>> #LightGreen
{
    -- Macros --
    + #define GEOMETRY_H
    -- Functions --
    + triangle_t create_triangle(const point_t * a, const point_t * b, const point_t * c, const char * label)
    + int triangle_area(const triangle_t * tri)
}

class "math_utils" as HEADER_MATH_UTILS <<header>> #LightGreen
{
    -- Macros --
    + #define MATH_UTILS_H
    -- Functions --
    + int add(int a, int b)
    + real_t average(const int * arr, size_t len)
    + int subtract(int a, int b)
}

class "sample" as HEADER_SAMPLE <<header>> #LightGreen
{
    -- Macros --
    + #define MAX(a, b)
    + #define MIN(a, b)
    + #define PI
    + #define SAMPLE_H
    + #define VERSION
    -- Global Variables --
    + char * DEFAULT_LABEL
    + int MAX_POINTS
    -- Functions --
    + int calculate_sum(int a, int b)
    + point_t * create_point(int x, int y, const char * label)
    + void process_point(point_t * p)
}

class "triangle_t" as TYPEDEF_TRIANGLE_T <<struct>> #LightYellow
{
    + point_t[3] vertices
    + char[MAX_LABEL_LEN] label
}

class "math_op_t" as TYPEDEF_MATH_OP_T <<function pointer>> #LightYellow
{
    alias of int(* math_op_t)(int , int)
}

class "real_t" as TYPEDEF_REAL_T <<typedef>> #LightYellow
{
    alias of double
}

class "point_t" as TYPEDEF_POINT_T <<struct>> #LightYellow
{
    + int x
    + int y
    + char[32] label
}

class "system_state_t" as TYPEDEF_SYSTEM_STATE_T <<enumeration>> #LightYellow
{
    STATE_IDLE = 0
    STATE_RUNNING
    STATE_ERROR
}


' Include relationships
GEOMETRY --> HEADER_GEOMETRY : <<include>>
HEADER_GEOMETRY --> HEADER_MATH_UTILS : <<include>>
HEADER_GEOMETRY --> HEADER_SAMPLE : <<include>>

' Declaration relationships
HEADER_GEOMETRY ..> TYPEDEF_TRIANGLE_T : <<declares>>
HEADER_MATH_UTILS ..> TYPEDEF_MATH_OP_T : <<declares>>
HEADER_MATH_UTILS ..> TYPEDEF_REAL_T : <<declares>>
HEADER_SAMPLE ..> TYPEDEF_POINT_T : <<declares>>
HEADER_SAMPLE ..> TYPEDEF_SYSTEM_STATE_T : <<declares>>

' Uses relationships
TYPEDEF_TRIANGLE_T ..> TYPEDEF_POINT_T : <<uses>>

@enduml