@startuml network

class "network" as NETWORK <<source>> #LightBlue
{
    -- Functions --
    + void network_cleanup(NetworkConfig * config)
    + int network_connect(NetworkConfig * config, const char * host, int port)
    + NetworkStatus network_get_status(const NetworkConfig * config)
    + int network_init(NetworkConfig * config)
    + int network_listen(NetworkConfig * config, int port)
    + ssize_t network_receive(int socket_fd, void * buffer, size_t size)
    + ssize_t network_send(int socket_fd, const void * data, size_t size)
    + int network_set_nonblocking(int socket_fd)
    + const char * network_status_string(NetworkStatus status)
}

class "common" as HEADER_COMMON <<header>> #LightGreen
{
    -- Macros --
    + #define ARRAY_SIZE(arr)
    + #define COMMON_H
    + #define DEPRECATED
    + #define ERROR_GENERAL
    + #define ERROR_INVALID_PARAM
    + #define ERROR_MEMORY
    + #define ERROR_TIMEOUT
    + #define MAX(a, b)
    + #define MIN(a, b)
    + #define PACKED
    + #define SUCCESS
    + #define UNUSED(x)
    -- Functions --
    + void common_cleanup()
    + const char * common_get_error_string(result_t error)
    + result_t common_init()
}

class "network" as HEADER_NETWORK <<header>> #LightGreen
{
    -- Macros --
    + #define DEFAULT_PORT
    + #define MAX_CONNECTIONS
    + #define NETWORK_H
    -- Functions --
    + int network_accept(NetworkConfig * config)
    + void network_cleanup(NetworkConfig * config)
    + int network_connect(NetworkConfig * config, const char * host, int port)
    + void network_disconnect(NetworkConfig * config)
    + NetworkStatus network_get_status(const NetworkConfig * config)
    + int network_init(NetworkConfig * config)
    + int network_listen(NetworkConfig * config, int port)
    + ssize_t network_receive(int socket_fd, void * buffer, size_t size)
    + ssize_t network_send(int socket_fd, const void * data, size_t size)
    + int network_set_nonblocking(int socket_fd)
    + const char * network_status_string(NetworkStatus status)
}

class "common_status_t" as TYPEDEF_COMMON_STATUS_T <<enumeration>> #LightYellow
{
    STATUS_OK = 0
    STATUS_ERROR = - 1
    STATUS_PENDING = 1
    STATUS_TIMEOUT = 2
}

class "id_t" as TYPEDEF_ID_T <<typedef>> #LightYellow
{
    alias of uint32_t
}

class "result_t" as TYPEDEF_RESULT_T <<typedef>> #LightYellow
{
    alias of int32_t
}

class "status_bool_t" as TYPEDEF_STATUS_BOOL_T <<typedef>> #LightYellow
{
    alias of bool
}

class "NetworkConfig" as TYPEDEF_NETWORKCONFIG <<struct>> #LightYellow
{
    + int socket_fd
    + struct sockaddr_in address
    + int port
    + char * hostname
}

class "NetworkStatus" as TYPEDEF_NETWORKSTATUS <<enumeration>> #LightYellow
{
    NET_STATUS_DISCONNECTED
    NET_STATUS_CONNECTING
    NET_STATUS_CONNECTED
    NET_STATUS_ERROR
}


' Include relationships
NETWORK --> HEADER_NETWORK : <<include>>
HEADER_NETWORK --> HEADER_COMMON : <<include>>

' Declaration relationships
HEADER_COMMON ..> TYPEDEF_COMMON_STATUS_T : <<declares>>
HEADER_COMMON ..> TYPEDEF_ID_T : <<declares>>
HEADER_COMMON ..> TYPEDEF_RESULT_T : <<declares>>
HEADER_COMMON ..> TYPEDEF_STATUS_BOOL_T : <<declares>>
HEADER_NETWORK ..> TYPEDEF_NETWORKCONFIG : <<declares>>
HEADER_NETWORK ..> TYPEDEF_NETWORKSTATUS : <<declares>>

' Uses relationships

@enduml