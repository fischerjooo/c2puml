@startuml preprocessed

class "preprocessed" as PREPROCESSED <<source>> #LightBlue
{
    -- Functions --
    + int main()

    - void complex_function()
    - void test_function_pointers()
    - void test_preprocessing_edge_cases()
    - void test_typedef_preprocessing()
}

class "preprocessed" as HEADER_PREPROCESSED <<header>> #LightGreen
{
    -- Macros --
    + #define DEBUG_MODE
    + #define FEATURE_ENABLED
    + #define MAX_SIZE
    + #define MIN_SIZE
    + #define PREPROCESSED_H
    -- Global Variables --
    + int global_basic
    + debug_struct_t global_debug
    + enabled_feature_t global_feature
    -- Functions --
    + void debug_feature(enabled_feature_t * feature)
    + int process_basic()
    + int process_feature(enabled_feature_t * feature)
}

class "basic_struct_t" as TYPEDEF_BASIC_STRUCT_T <<struct>> #LightYellow
{
    + int basic_id
}

class "debug_enabled_t" as TYPEDEF_DEBUG_ENABLED_T <<struct>> #LightYellow
{
    + int debug_enabled_id
    + char[64] debug_enabled_name
}

class "debug_feature_t" as TYPEDEF_DEBUG_FEATURE_T <<struct>> #LightYellow
{
    + int debug_id
    + char[64] debug_name
}

class "debug_optimized_t" as TYPEDEF_DEBUG_OPTIMIZED_T <<struct>> #LightYellow
{
    + int debug_field
    + char[128] debug_buffer
}

class "debug_struct_t" as TYPEDEF_DEBUG_STRUCT_T <<struct>> #LightYellow
{
    + int debug_id
    + char[64] debug_name
    + int extra_debug_field
}

class "default_struct_t" as TYPEDEF_DEFAULT_STRUCT_T <<struct>> #LightYellow
{
    + int default_field
}

class "disabled_feature_t" as TYPEDEF_DISABLED_FEATURE_T <<struct>> #LightYellow
{
    + int id
}

class "disabled_t" as TYPEDEF_DISABLED_T <<struct>> #LightYellow
{
    + int disabled_id
}

class "enabled_feature_t" as TYPEDEF_ENABLED_FEATURE_T <<struct>> #LightYellow
{
    + int id
    + char[32] name
}

class "enabled_t" as TYPEDEF_ENABLED_T <<struct>> #LightYellow
{
    + int enabled_id
    + char[32] enabled_name
}

class "feature_struct_t" as TYPEDEF_FEATURE_STRUCT_T <<struct>> #LightYellow
{
    + int feature_id
    + char[32] feature_name
}

class "optimized_struct_t" as TYPEDEF_OPTIMIZED_STRUCT_T <<struct>> #LightYellow
{
    + int optimized_field
    + char[MAX_SIZE] large_buffer
    + char[MIN_SIZE] small_buffer
}

class "release_struct_t" as TYPEDEF_RELEASE_STRUCT_T <<struct>> #LightYellow
{
    + int release_id
}

class "simple_debug_t" as TYPEDEF_SIMPLE_DEBUG_T <<struct>> #LightYellow
{
    + int debug_id
}

class "status_t" as TYPEDEF_STATUS_T <<enumeration>> #LightYellow
{
    STATUS_ENABLED = 1
    STATUS_DISABLED = 0
    STATUS_OFF = 0
    STATUS_UNKNOWN = - 1
}

class "basic_callback_t" as TYPEDEF_BASIC_CALLBACK_T <<function pointer>> #LightYellow
{
    alias of int(* basic_callback_t)(void)
}

class "feature_callback_t" as TYPEDEF_FEATURE_CALLBACK_T <<function pointer>> #LightYellow
{
    alias of int(* feature_callback_t)(enabled_feature_t * feature)
}

class "large_buffer_t" as TYPEDEF_LARGE_BUFFER_T <<typedef>> #LightYellow
{
    alias of char large_buffer_t[MAX_SIZE]
}

class "small_buffer_t" as TYPEDEF_SMALL_BUFFER_T <<typedef>> #LightYellow
{
    alias of char small_buffer_t[MIN_SIZE]
}

class "basic_union_t" as TYPEDEF_BASIC_UNION_T <<union>> #LightYellow
{
    + int int_value
    + char char_value
}

class "feature_union_t" as TYPEDEF_FEATURE_UNION_T <<union>> #LightYellow
{
    + int int_value
    + char char_value
    + double debug_value
}


' Include relationships
PREPROCESSED --> HEADER_PREPROCESSED : <<include>>

' Declaration relationships
HEADER_PREPROCESSED ..> TYPEDEF_BASIC_STRUCT_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_DEBUG_ENABLED_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_DEBUG_FEATURE_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_DEBUG_OPTIMIZED_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_DEBUG_STRUCT_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_DEFAULT_STRUCT_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_DISABLED_FEATURE_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_DISABLED_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_ENABLED_FEATURE_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_ENABLED_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_FEATURE_STRUCT_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_OPTIMIZED_STRUCT_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_RELEASE_STRUCT_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_SIMPLE_DEBUG_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_STATUS_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_BASIC_CALLBACK_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_FEATURE_CALLBACK_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_LARGE_BUFFER_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_SMALL_BUFFER_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_BASIC_UNION_T : <<declares>>
HEADER_PREPROCESSED ..> TYPEDEF_FEATURE_UNION_T : <<declares>>

' Uses relationships
TYPEDEF_FEATURE_CALLBACK_T ..> TYPEDEF_ENABLED_FEATURE_T : <<uses>>

@enduml