@startuml application

class "application" as APPLICATION <<source>> #LightBlue
{
    -- Global Variables --
    volatile int running
    -- Functions --
    int main(int argc, char * argv [ ])
    void signal_handler(int sig)
}

class "database" as HEADER_DATABASE <<header>> #LightGreen
{
    -- Macros --
    + #define DATABASE_H
    + #define MAX_DB_NAME_LENGTH
    + #define MAX_QUERY_LENGTH
    -- Functions --
    + int database_begin_transaction(DatabaseConfig * config)
    + int database_commit_transaction(DatabaseConfig * config)
    + int database_connect(DatabaseConfig * config)
    + void database_disconnect(DatabaseConfig * config)
    + int database_escape_string(const DatabaseConfig * config, const char * input, char * output, ...)
    + QueryResult * database_execute_query(DatabaseConfig * config, const char * query)
    + int database_execute_update(DatabaseConfig * config, const char * query)
    + void database_free_result(QueryResult * result)
    + const char * database_get_error(const DatabaseConfig * config)
    + int database_is_connected(const DatabaseConfig * config)
    + int database_rollback_transaction(DatabaseConfig * config)
}

class "network" as HEADER_NETWORK <<header>> #LightGreen
{
    -- Macros --
    + #define DEFAULT_PORT
    + #define MAX_CONNECTIONS
    + #define NETWORK_H
    -- Functions --
    + int network_accept(NetworkConfig * config)
    + void network_cleanup(NetworkConfig * config)
    + int network_connect(NetworkConfig * config, const char * host, int port)
    + void network_disconnect(NetworkConfig * config)
    + NetworkStatus network_get_status(const NetworkConfig * config)
    + int network_init(NetworkConfig * config)
    + int network_listen(NetworkConfig * config, int port)
    + ssize_t network_receive(int socket_fd, void * buffer, size_t size)
    + ssize_t network_send(int socket_fd, const void * data, size_t size)
    + int network_set_nonblocking(int socket_fd)
    + const char * network_status_string(NetworkStatus status)
}

class "DatabaseConfig" as TYPEDEF_DATABASECONFIG <<typedef>> #LightYellow
{
    + void * connection
    + char[MAX_DB_NAME_LENGTH] db_name
    + char[256] host
    + char[128] password
    + int port
    + DatabaseType type
    + char[128] username
}

class "QueryResult" as TYPEDEF_QUERYRESULT <<typedef>> #LightYellow
{
    + int column_count
    + char * * column_names
    + char * * data
    + int row_count
}

class "DatabaseType" as TYPEDEF_DATABASETYPE <<typedef>> #LightYellow
{
    + DB_TYPE_MYSQL
    + DB_TYPE_POSTGRESQL
    + DB_TYPE_SQLITE
}

class "NetworkConfig" as TYPEDEF_NETWORKCONFIG <<typedef>> #LightYellow
{
    + struct sockaddr_in address
    + char * hostname
    + int port
    + int socket_fd
}

class "__anonymous_struct__" as TYPEDEF___ANONYMOUS_STRUCT__ <<typedef>> #LightYellow
{
}

class "NetworkStatus" as TYPEDEF_NETWORKSTATUS <<typedef>> #LightYellow
{
    + NET_STATUS_CONNECTED
    + NET_STATUS_CONNECTING
    + NET_STATUS_DISCONNECTED
    + NET_STATUS_ERROR
}


' Include relationships
APPLICATION --> HEADER_DATABASE : <<include>>
APPLICATION --> HEADER_NETWORK : <<include>>

' Declaration relationships
HEADER_DATABASE ..> TYPEDEF_DATABASECONFIG : <<declares>>
HEADER_DATABASE ..> TYPEDEF_QUERYRESULT : <<declares>>
HEADER_DATABASE ..> TYPEDEF_DATABASETYPE : <<declares>>
HEADER_NETWORK ..> TYPEDEF_NETWORKCONFIG : <<declares>>
HEADER_NETWORK ..> TYPEDEF___ANONYMOUS_STRUCT__ : <<declares>>
HEADER_NETWORK ..> TYPEDEF_NETWORKSTATUS : <<declares>>

' Uses relationships
TYPEDEF_DATABASECONFIG ..> TYPEDEF_DATABASETYPE : <<uses>>

@enduml