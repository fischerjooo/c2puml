/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/coverage/inorout.py:469: CoverageWarning: --include is ignored because --source is set (include-ignored)
  self.warn("--include is ignored because --source is set", slug="include-ignored")
============================= test session starts ==============================
platform linux -- Python 3.9.23, pytest-8.4.1, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.9.23/x64/bin/python3
cachedir: .pytest_cache
metadata: {'Python': '3.9.23', 'Platform': 'Linux-6.11.0-1018-azure-x86_64-with-glibc2.39', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'xdist': '3.8.0', 'cov': '6.2.1', 'mock': '3.14.1', 'metadata': '3.1.1', 'html': '4.1.1', 'benchmark': '5.1.0'}, 'CI': 'true', 'JAVA_HOME': '/usr/lib/jvm/temurin-17-jdk-amd64'}
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/runner/work/c2puml/c2puml
configfile: pytest.ini
plugins: xdist-3.8.0, cov-6.2.1, mock-3.14.1, metadata-3.1.1, html-4.1.1, benchmark-5.1.0
collecting ... collected 68 items

tests/example/test_901_basic_example.py::TestBasicExample::test_basic_example FAILED [  1%]
tests/feature/test_201_cli_modes.py::TestCLIModesComprehensive::test_cli_modes_and_features_comprehensive PASSED [  2%]
tests/feature/test_202_include_proc.py::TestIncludeProcessingConsolidated::test_include_processing_basic_consolidated PASSED [  4%]
tests/feature/test_202_include_proc.py::TestIncludeProcessingConsolidated::test_include_processing_consolidated PASSED [  5%]
tests/feature/test_202_include_proc.py::TestIncludeProcessingConsolidated::test_include_processing_error_handling_consolidated PASSED [  7%]
tests/feature/test_203_comp_features.py::TestComponentFeaturesConsolidated::test_component_features_types_and_relationships_comprehensive PASSED [  8%]
tests/feature/test_204_errors.py::TestErrorHandlingComprehensive::test_invalid_config_errors PASSED [ 10%]
tests/feature/test_204_errors.py::TestErrorHandlingComprehensive::test_invalid_source_folder_errors PASSED [ 11%]
tests/feature/test_204_errors.py::TestErrorHandlingComprehensive::test_partial_failure_scenarios PASSED [ 13%]
tests/feature/test_205_multi_src.py::TestMultipleSourceFoldersCLI::test_multiple_source_folders PASSED [ 14%]
tests/feature/test_206_trans_features.py::TestTransformerFeaturesCLI::test_transform_renaming PASSED [ 16%]
tests/feature/test_207_crypto_filter_pattern.py::TestCryptoFilterPatternComprehensive::test_crypto_filter_pattern_functionality PASSED [ 17%]
tests/feature/test_208_crypto_filter_usecase.py::TestCryptoFilterUsecaseComprehensive::test_crypto_filter_usecase_functionality PASSED [ 19%]
tests/feature/test_209_integration_cli.py::TestIntegrationCLI::test_complete_workflow PASSED [ 20%]
tests/integration/test_301_integration.py::TestComprehensiveIntegrationCLI::test_complete_system_integration PASSED [ 22%]
tests/integration/test_301_integration.py::TestComprehensiveIntegrationCLI::test_integration_relationships_and_formatting_comprehensive PASSED [ 23%]
tests/unit/test_101_gen_basic.py::TestGeneratorBasicPlantuml::test_generator_basic_plantuml PASSED [ 25%]
tests/unit/test_101_gen_basic.py::TestGeneratorBasicPlantuml::test_generator_basic_plantuml_truncation PASSED [ 26%]
tests/unit/test_102_trans_basic.py::TestTransformerBasic::test_transformer_basic PASSED [ 27%]
tests/unit/test_103_abs_path.py::TestAbsolutePathBugComprehensive::test_absolute_vs_relative_path_consistency PASSED [ 29%]
tests/unit/test_103_abs_path.py::TestAbsolutePathBugComprehensive::test_mixed_path_styles_handling PASSED [ 30%]
tests/unit/test_103_abs_path.py::TestAbsolutePathBugComprehensive::test_path_resolution_and_include_tree_comprehensive PASSED [ 32%]
tests/unit/test_103_abs_path.py::TestAbsolutePathBugComprehensive::test_relative_path_handling_in_include_tree PASSED [ 33%]
tests/unit/test_103_abs_path.py::TestAbsolutePathBugComprehensive::test_subdirectory_includes_path_resolution PASSED [ 35%]
tests/unit/test_104_anon_proc.py::TestAnonymousProcessingComprehensive::test_anonymous_processing_comprehensive PASSED [ 36%]
tests/unit/test_105_anon_structs.py::TestAnonymousStructureComprehensive::test_anonymous_structures_and_unions_comprehensive PASSED [ 38%]
tests/unit/test_106_config.py::TestConfigComprehensive::test_config_comprehensive PASSED [ 39%]
tests/unit/test_107_debug_fields.py::TestDebugFieldParsingComprehensive::test_complex_struct_field_processing PASSED [ 41%]
tests/unit/test_107_debug_fields.py::TestDebugFieldParsingComprehensive::test_nested_anonymous_structure_fields PASSED [ 42%]
tests/unit/test_107_debug_fields.py::TestDebugFieldParsingComprehensive::test_nested_union_field_parsing PASSED [ 44%]
tests/unit/test_108_debug_parse.py::TestDebugParsingComprehensive::test_anonymous_structure_parsing PASSED [ 45%]
tests/unit/test_108_debug_parse.py::TestDebugParsingComprehensive::test_complex_union_parsing PASSED [ 47%]
tests/unit/test_108_debug_parse.py::TestDebugParsingComprehensive::test_nested_struct_parsing PASSED [ 48%]
tests/unit/test_109_file_spec_cfg.py::TestFileSpecificConfigurationComprehensive::test_file_specific_configuration_comprehensive PASSED [ 50%]
tests/unit/test_110_gen_comp.py::TestGeneratorComprehensive::test_generator_comprehensive PASSED [ 51%]
tests/unit/test_111_gen_exact.py::TestGeneratorExactFormatCLI::test_exact_requested_format PASSED [ 52%]
tests/unit/test_111_gen_exact.py::TestGeneratorExactFormatCLI::test_format_with_parameters PASSED [ 54%]
tests/unit/test_112_gen_grouping.py::TestGeneratorGroupingCLI::test_generator_grouping_comprehensive PASSED [ 55%]
tests/unit/test_113_gen_inctree.py::TestGeneratorIncludeTreeCLI::test_include_tree_comprehensive PASSED [ 57%]
tests/unit/test_113_gen_inctree.py::TestGeneratorIncludeTreeCLI::test_include_tree_with_absolute_paths PASSED [ 58%]
tests/unit/test_114_preproc.py::TestPreprocessorHandlingComprehensive::test_preprocessor_and_macros_comprehensive PASSED [ 60%]
tests/unit/test_115_parser_basics.py::TestParserComprehensiveBasics::test_parser_comprehensive_basics PASSED [ 61%]
tests/unit/test_116_struct_order.py::TestStructOrderPuml::test_struct_and_nested_ordering_comprehensive PASSED [ 63%]
tests/unit/test_117_tokenizer_comp.py::TestTokenizerComprehensive::test_tokenizer_comprehensive PASSED [ 64%]
tests/unit/test_118_token_keywords.py::TestTokenizerKeywords::test_tokenizer_keywords PASSED [ 66%]
tests/unit/test_119_trans_comp.py::TestTransformerComprehensive::test_transformer_comprehensive PASSED [ 67%]
tests/unit/test_120_typedef_extr.py::TestTypedefExtractionComprehensive::test_typedef_extraction_comprehensive PASSED [ 69%]
tests/unit/test_120_typedef_extr.py::TestTypedefExtractionComprehensive::test_typedef_extraction_edge PASSED [ 70%]
tests/unit/test_120_typedef_extr.py::TestTypedefExtractionComprehensive::test_typedef_extraction_enums PASSED [ 72%]
tests/unit/test_120_typedef_extr.py::TestTypedefExtractionComprehensive::test_typedef_extraction_mixed PASSED [ 73%]
tests/unit/test_120_typedef_extr.py::TestTypedefExtractionComprehensive::test_typedef_extraction_unions PASSED [ 75%]
tests/unit/test_121_verifier.py::TestVerifierComprehensive::test_verifier_comprehensive PASSED [ 76%]
tests/unit/test_122_gen_includes.py::TestGeneratorIncludesComprehensive::test_generator_includes_and_filtering_comprehensive PASSED [ 77%]
tests/unit/test_123_gen_naming.py::TestGeneratorNamingComprehensive::test_generator_naming_conventions_comprehensive PASSED [ 79%]
tests/unit/test_124_gen_newfmt.py::TestGeneratorNewFormattingCLI::test_generator_new_formatting_stereotypes_comprehensive PASSED [ 80%]
tests/unit/test_124_gen_newfmt.py::TestGeneratorNewFormattingCLI::test_newfmt_complex_typedef PASSED [ 82%]
tests/unit/test_124_gen_newfmt.py::TestGeneratorNewFormattingCLI::test_newfmt_visibility_logic PASSED [ 83%]
tests/unit/test_125_gen_visibility.py::TestGeneratorVisibilityLogicCLI::test_generator_visibility_logic_comprehensive PASSED [ 85%]
tests/unit/test_126_parser_typedefs.py::TestParserTypedefsConsolidated::test_parser_typedefs_comprehensive PASSED [ 86%]
tests/unit/test_127_parser_simple_c.py::TestParserSimpleCFile::test_parser_simple_c_file PASSED [ 88%]
tests/unit/test_128_parser_simple_struct.py::TestParserSimpleStruct::test_parser_simple_struct PASSED [ 89%]
tests/unit/test_129_parser_encoding.py::TestParserEncoding::test_parser_encoding PASSED [ 91%]
tests/unit/test_130_parser_elems.py::TestParserElementsConsolidated::test_parser_elements_consolidated PASSED [ 92%]
tests/unit/test_131_parser_funcs.py::TestParserFunctions::test_parser_functions_and_parameters_comprehensive PASSED [ 94%]
tests/unit/test_132_parser_includes.py::TestParserIncludes::test_parser_includes_comprehensive PASSED [ 95%]
tests/unit/test_133_include_filter.py::TestIncludeFilteringComprehensive::test_include_filtering_comprehensive PASSED [ 97%]
tests/unit/test_134_include_proc_unit.py::TestIncludeProcessingComprehensive::test_basic_include_processing PASSED [ 98%]
tests/unit/test_135_nested_structs.py::TestNestedStructuresPuml::test_nested_structures_puml PASSED [100%]

=================================== FAILURES ===================================
_____________________ TestBasicExample.test_basic_example ______________________

self = <test_901_basic_example.TestBasicExample testMethod=test_basic_example>

    def test_basic_example(self):
        """Run full pipeline on example project and validate outputs"""
        # Load assertions from YAML (assertions-only for example tests)
        test_data = self.data_loader.load_test_data("901_basic_example")
    
        # Determine workspace root (two levels up from this file)
        workspace_root = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
    
        # Execute c2puml with project root as working directory
        result = self.executor.run_full_pipeline("tests/example/config.json", workspace_root)
    
        # Validate execution
        self.cli_validator.assert_cli_success(result)
    
        # Collect outputs from configured output directory
        output_dir = os.path.join(workspace_root, "artifacts", "output_example")
        model_file = self.output_validator.assert_model_file_exists(output_dir)
    
        # Load model
        with open(model_file, 'r') as f:
            model_data = json.load(f)
    
        # Load all PUML files into a dict {filename: content}
        puml_files = {}
        for entry in os.listdir(output_dir):
            if entry.endswith('.puml'):
                puml_path = os.path.join(output_dir, entry)
                with open(puml_path, 'r', encoding='utf-8') as pf:
                    puml_files[entry] = pf.read()
    
        # Process YAML assertions
>       self.validators_processor.process_assertions(
            test_data["assertions"], model_data, puml_files, result, self
        )

tests/example/test_901_basic_example.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/framework/validators_processor.py:65: in process_assertions
    self._process_puml_assertions(assertions["puml"], puml_files, test_case)
tests/framework/validators_processor.py:324: in _process_puml_assertions
    self._process_single_puml_file_assertions(
tests/framework/validators_processor.py:413: in _process_single_puml_file_assertions
    self.puml_validator.assert_puml_relationship(puml_content, source, target, rel_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.framework.validators.PlantUMLValidator object at 0x7f02f0c30760>
puml_content = '@startuml complex\n\nclass "complex" as COMPLEX <<source>> #LightBlue\n{\n    -- Global Variables --\n    - Process_C...TRUCT : <<contains>>\nTYPEDEF_UNION_WITH_UNION_T *-- TYPEDEF_UNION_WITH_UNION_T_NESTED_UNION : <<contains>>\n\n@enduml'
source = 'TYPEDEF___ANONYMOUS_STRUCT__'
target = 'TYPEDEF___ANONYMOUS_STRUCT___LEVEL3_UNION', rel_type = '*--'

    def assert_puml_relationship(self, puml_content: str, source: str, target: str, rel_type: str) -> None:
        """Assert that a relationship exists in PlantUML content"""
        rel_pattern = rf'{re.escape(source)}\s+{re.escape(rel_type)}\s+{re.escape(target)}'
        if not re.search(rel_pattern, puml_content, re.IGNORECASE):
>           raise AssertionError(f"Relationship '{source} {rel_type} {target}' not found in PlantUML content")
E           AssertionError: Relationship 'TYPEDEF___ANONYMOUS_STRUCT__ *-- TYPEDEF___ANONYMOUS_STRUCT___LEVEL3_UNION' not found in PlantUML content

tests/framework/validators.py:347: AssertionError
=========================== short test summary info ============================
FAILED tests/example/test_901_basic_example.py::TestBasicExample::test_basic_example - AssertionError: Relationship 'TYPEDEF___ANONYMOUS_STRUCT__ *-- TYPEDEF___ANONYMOUS_STRUCT___LEVEL3_UNION' not found in PlantUML content
========================= 1 failed, 67 passed in 8.11s =========================
/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/coverage/control.py:943: CoverageWarning: No data was collected. (no-data-collected)
  self._warn("No data was collected.", slug="no-data-collected")
