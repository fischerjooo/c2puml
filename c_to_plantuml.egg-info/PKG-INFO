Metadata-Version: 2.4
Name: c_to_plantuml
Version: 1.1.0
Summary: Convert C/C++ code to PlantUML diagrams with high-performance parsing
Author: C to PlantUML Team
Project-URL: Bug Reports, https://github.com/yourusername/c_to_plantuml/issues
Project-URL: Source, https://github.com/yourusername/c_to_plantuml
Keywords: c cpp plantuml diagram visualization code-analysis parsing
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Documentation
Classifier: Topic :: Software Development :: Code Generators
Classifier: Topic :: Text Processing :: Markup
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: keywords
Dynamic: project-url
Dynamic: provides-extra
Dynamic: requires-python
Dynamic: summary

# C to PlantUML

**A robust Python tool for converting C/C++ projects into comprehensive PlantUML diagrams, with advanced parsing, flexible configuration, and structured output packaging.**

---

## Features

- **Deep C/C++ Parsing**: Handles multi-line macros, function declarations, global/static variables, typedefs, and header file resolution (case-insensitive, recursive).
- **Comprehensive Visualization**: Generates PlantUML diagrams showing:
  - All macros (`#define`), with visibility (`+` for public, `-` for private).
  - All functions (struct-associated and top-level), with static/public visibility.
  - All global variables, with static/public visibility.
  - All typedefs, rendered as PlantUML type aliases with `<<typedef>>`.
- **Multi-Project & Config-Driven**: Accepts a JSON config specifying project roots, output directories, file name prefixes, and custom packaging structure.
- **Clean Output**: Output and packaged directories are always cleaned before generation to prevent stale files.
- **Structured Packaging**: `.puml` files are copied and renamed into a structured output directory, preserving the source folder structure and supporting custom overrides.
- **Robust File Handling**: Handles encoding issues gracefully (UTF-8, Latin-1 fallback).
- **Single-Command Workflow**: Run the entire process (generation + packaging) with one command and a config file.

---

## Installation

```bash
pip install .
# or for development:
pip install -e .
```

---

## Usage

1. **Prepare a config file** (see below for an example).
2. **Run the tool from the project root:**

```bash
python -m c_to_plantuml.main
```

- The tool will:
  - Parse the config file (`test_config.json` by default, located in the project root).
  - Clean and generate PlantUML files into the specified output directory.
  - Clean and package `.puml` files into the structured output directory.

---

## Configuration Example (`test_config.json`)

```json
{
  "project_roots": [
    "D:/WORK/Sandbox/doom/ipx",
    "D:/WORK/Sandbox/doom/linuxdoom-1.10",
    "D:/WORK/Sandbox/doom/sersrc",
    "D:/WORK/Sandbox/doom/sndserv"
  ],
  "output_dir": "./output_uml",
  "output_dir_packaged": "./output_packaged",
  "recursive": true,
  "c_file_prefixes": [],
  "structure_overrides": [
    {"from_puml": "am_map.puml", "to_folder": "special_folder"},
    {"from_puml": "vehicle.puml", "to_folder": "vehicles"}
  ]
}
```

- **project_roots**: List of root directories to scan for C/C++ files.
- **output_dir**: Where to write initial `.puml` files.
- **output_dir_packaged**: Where to copy/rename `.puml` files, preserving structure.
- **recursive**: Whether to search subdirectories.
- **c_file_prefixes**: Only process files starting with these prefixes (empty = all).
- **structure_overrides**: (Optional) Move specific `.puml` files to custom folders in the packaged output.

---

## Output & Packaging

- **Initial output**: `.puml` files are generated for each C/C++ file in `output_dir`.
- **Packaging**: Files are renamed to `CLS_<BASENAME>.puml` (all caps) and copied into `output_dir_packaged`, mirroring the source folder structure. Structure overrides are applied as specified.

---

## Project Structure

- `c_to_plantuml/` – Main parsing and generation logic.
- `packager/` – Packaging logic for structuring `.puml` output.
- `test_config.json` – Example config file.
- `output_uml/` – (Generated) Raw PlantUML files.
- `output_packaged/` – (Generated) Structured/packaged PlantUML files.

---

## License

MIT

---

**For advanced usage, extensibility, or troubleshooting, see the source code and comments in each module.** 
