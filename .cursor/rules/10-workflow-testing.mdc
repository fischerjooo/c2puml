# Workflow and Testing Procedures

## Testing Workflow Scripts

### Regression Testing (Full System Test)
```bash
# Run complete regression testing - validates entire system
./scripts/run_all.sh
```
**Purpose**: Full system validation including tests, examples, and image generation. Use for:
- Final validation before releases
- Complete system regression testing
- End-to-end workflow verification

### Debugging and Development Testing
```bash
# Run debugging-focused tests with detailed output
./scripts/run_all_tests.sh
```
**Purpose**: Focused testing for debugging and development. Use for:
- Debugging specific issues
- Development iteration
- Unit and integration test validation
- Detailed error reporting

### Spiking and Integration Testing
```bash
# Run example workflow for spiking and integration testing
./scripts/run_example.sh
```
**Purpose**: Spiking new features and integration testing. Use for:
- Integration testing with new source files
- Testing new C code features
- Validating edge cases in typedefs and macros

## Standard Workflow (Manual Steps)
```bash
# 0. For debugging: Run focused tests
./scripts/run_all_tests.sh

# 1. For spiking: Run example workflow (includes cleaning and generation)
./scripts/run_example.sh

# 2. For regression: Run complete system test
./scripts/run_all.sh

# 3. Generate images from PlantUML files (optional)
./scripts/picgen.sh

# 4. Review generated output (optional)
# Examine the generated PlantUML diagrams and images

# 5. Update specification.md if needed
# Always review and update specification.md with any new findings or changes

# 6. Development or extend tests for new feature or feature change
# Add new tests or modify existing tests based on feature development
```

## Testing Guidelines

### Bug Fixing Workflow
- **Before fixing a bug**: Develop a test that reproduces the bug if it makes sense
- Write a failing test that demonstrates the issue
- Fix the bug to make the test pass
- This ensures the bug is properly understood and won't regress

### New Feature Development
- **After developing a new feature**: Always add comprehensive tests for it
- Include unit tests for individual components
- Add integration tests for complete workflows
- Test both normal cases and edge cases
- Ensure the feature works as expected and doesn't break existing functionality

## Output and Validation
- **Test Results**: Pass/fail status with detailed reporting
- **Example Output**: Generated PlantUML diagrams in `./output`
- **Images**: PNG images generated from PlantUML files using `picgen.sh`
- **Logs**: Processing logs and error reports

## Image Generation
The `scripts/picgen.sh` script converts all `.puml` files in the output directory to PNG images:
- Requires PlantUML to be installed (`sudo apt-get install plantuml`)
- Generates high-quality PNG images for documentation and sharing

