# Cursor Rules for Python Project â€“ Clean Code & Test-Driven Development

# Project Workflow Reference
- Always consider the instructions and practices described in `workflow.md` as part of the coding and testing guidelines.
- Align refactors, feature implementations, and test practices with the documented workflow whenever applicable.

# General Principles
- Write readable, maintainable code following Pythonic conventions.
- Every new function must have a corresponding test written first (TDD).
- Keep each file focused on a single concern or responsibility.
- Avoid side effects in functions unless explicitly needed.

# Style and Formatting
- Use `snake_case` for variables and function names.
- Use `PascalCase` for class names.
- Use 4 spaces per indent level.
- Limit lines to 88 characters (follow Black formatting).
- All files must be auto-formatted using Black and isort before commit.

# Documentation
- Every public function, class, and module must include a docstring.
- Use Google-style docstrings for consistency.
- Write comments only when the code's intention isn't self-evident.
- Update docstrings and comments when changing behavior.

# Type Hints
- All function signatures must include type hints.
- Use `Optional`, `Union`, and `Literal` types to clarify intent.
- Don't use `Any` unless absolutely necessary.
- Use Mypy to enforce strict type checking.

# Testing
- Use `pytest` for all unit and integration tests.
- Name all test files with the prefix `test_`, and place them in the `tests/` directory.
- Every new function must be accompanied by tests that cover normal, edge, and failure cases.
- Target 90%+ test coverage, tracked by `coverage.py`.
- Avoid testing internal implementation details; test behaviors instead.

# Project Structure
- Keep logic and I/O separate. Pure logic in `src/`, entry points in `main.py` or CLI.
- Avoid deeply nested directories. Prefer flat and clear structure.
- Use `__init__.py` to define module boundaries when needed.
- Group related files together (e.g. models, services, tests).

# Code Quality
- Use Flake8 and Pylint to catch style violations and potential bugs.
- Do not use wildcard imports (`from module import *`).
- Avoid using mutable default arguments (like `def f(x=[])`).
- Avoid deeply nested conditionals (prefer early returns).
- Prefer dependency injection over hard-coded values.

# Refactoring & Suggestions
- When rewriting code:
  - Preserve existing docstrings and comments.
  - Extract long methods into smaller functions.
  - Don't introduce global variables or hidden state.
  - Make changes that improve readability, not just brevity.

# Final Enforcement
- Before merging:
  - Run Black, isort, Flake8, Pylint, and Mypy.
  - Run the full pytest suite.
  - Ensure all public APIs are documented and tested.