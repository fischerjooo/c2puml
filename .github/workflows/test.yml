name: Test C to PlantUML Converter

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        echo "🔧 Installing Python dependencies..."
        python -m pip install --upgrade pip
        echo "📦 Installing package in development mode..."
        pip install -e .
        echo "📋 Installing additional requirements..."
        if [ -f requirements.txt ]; then 
          echo "Found requirements.txt, installing..."
          pip install -r requirements.txt
        else
          echo "No requirements.txt found"
        fi
        echo "✅ Dependencies installed successfully"

    - name: Show Python environment
      run: |
        echo "🐍 Python Environment Information:"
        echo "Python version: $(python --version)"
        echo "Pip version: $(pip --version)"
        echo "Installed packages:"
        pip list

    - name: Lint with flake8
      run: |
        echo "🔍 Running flake8 linting..."
        pip install flake8
        echo "📝 Checking for Python syntax errors and undefined names..."
        flake8 c_to_plantuml/ --count --select=E9,F63,F7,F82 --show-source --statistics
        echo "✅ Critical linting completed successfully"

    - name: Test new 3-step architecture
      run: |
        echo "🧪 Testing new 3-step architecture..."
        echo "📁 Current directory: $(pwd)"
        echo "📋 Available config files:"
        ls -la *.json
        
        # Test Step 1: Parse
        echo "📝 Step 1: Testing parse command..."
        python main.py --verbose parse tests/test_files -o test_model.json
        
        # Test Step 2: Transform (if config exists)
        if [ -f "simple_config.json" ]; then
          echo "🔄 Step 2: Testing transform command..."
          python main.py transform test_model.json simple_config.json -o transformed_model.json
        else
          echo "⚠️ No config file found, skipping transform step"
        fi
        
        # Test Step 3: Generate
        echo "🎨 Step 3: Testing generate command..."
        model_file="transformed_model.json"
        if [ ! -f "transformed_model.json" ]; then
          model_file="test_model.json"
        fi
        python main.py generate $model_file -o test_plantuml_output
        
        echo "✅ 3-step architecture tests completed"

    - name: Test complete workflow
      run: |
        echo "🔄 Testing complete workflow..."
        if [ -f "simple_config.json" ]; then
          echo "📝 Running complete workflow with config..."
          python main.py workflow tests/test_files simple_config.json
        else
          echo "⚠️ No config file found, testing parse only..."
          python main.py parse tests/test_files -o workflow_model.json
        fi
        echo "✅ Complete workflow test finished"

    - name: Verify output files
      run: |
        echo "🔍 Verifying output files..."
        
        # Check that expected files were created
        if [ ! -f "test_model.json" ] && [ ! -f "workflow_model.json" ]; then
          echo "❌ Error: No model JSON file created"
          ls -la *.json
          exit 1
        else
          echo "✅ Model JSON file created successfully"
          if [ -f "test_model.json" ]; then
            echo "📊 test_model.json size: $(wc -c < test_model.json) bytes"
          fi
          if [ -f "workflow_model.json" ]; then
            echo "📊 workflow_model.json size: $(wc -c < workflow_model.json) bytes"
          fi
        fi
        
        if [ ! -d "test_plantuml_output" ] && [ ! -d "plantuml_output" ]; then
          echo "❌ Error: No PlantUML output directory created"
          ls -la
          exit 1
        else
          echo "✅ PlantUML output directory created successfully"
        fi
        
        # Check for .puml files
        output_dir="test_plantuml_output"
        if [ ! -d "$output_dir" ]; then
          output_dir="plantuml_output"
        fi
        
        puml_count=$(find $output_dir -name "*.puml" | wc -l)
        if [ "$puml_count" -eq 0 ]; then
          echo "❌ Error: No .puml files generated"
          echo "📁 Directory contents:"
          ls -la $output_dir/
          exit 1
        fi
        
        echo "✅ Success: Found $puml_count PlantUML files"
        echo "📊 PlantUML files:"
        find $output_dir -name "*.puml" -exec wc -l {} \;

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-outputs-${{ matrix.python-version }}
        path: |
          test_model.json
          transformed_model.json
          workflow_model.json
          test_plantuml_output/
          plantuml_output/
