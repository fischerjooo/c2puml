name: Test Suite with Coverage Reports

on:
  # Automatic triggers
  pull_request:
    branches: [main, master]
    types: [closed] # Trigger when PR is closed (merged)

  # Manual trigger
  workflow_dispatch:

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN || github.token }}
          fetch-depth: 0 # Full history for better coverage analysis

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📋 Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: 🧪 Run comprehensive test suite with coverage
        run: |
          echo "🧪 Running comprehensive test suite with coverage analysis..."
          ./run_tests_with_coverage.sh

      - name: 🔍 Debug workflow context
        if: always()
        run: |
          echo "🔍 Debugging workflow context..."
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Base ref: ${{ github.base_ref }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run number: ${{ github.run_number }}"
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR number: ${{ github.event.pull_request.number }}"
            echo "PR merged: ${{ github.event.pull_request.merged }}"
            echo "PR base ref: ${{ github.event.pull_request.base.ref }}"
            echo "PR head ref: ${{ github.event.pull_request.head.ref }}"
          fi
          
          echo "Personal Access Token available: ${{ secrets.PERSONAL_ACCESS_TOKEN != '' }}"

      - name: 🔧 Validate and configure Git credentials
        if: always()
        run: |
          echo "🔧 Setting up Git credentials..."
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Check if PERSONAL_ACCESS_TOKEN is available for better authentication
          if [ -n "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
            echo "✅ Using Personal Access Token for authentication"
            git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}
          else
            echo "⚠️ Personal Access Token not configured, using GitHub token"
            echo "💡 For more reliable authentication, add a Personal Access Token as PERSONAL_ACCESS_TOKEN secret"
            git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}
          fi

      - name: 🚀 Commit and push coverage reports
        if: always()
        run: |
          echo "🚀 Committing coverage reports to repository..."
          
          # Determine if we should commit and push
          SHOULD_COMMIT=false
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "✅ Manual trigger detected - will commit and push"
            SHOULD_COMMIT=true
            TARGET_BRANCH="main"
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "✅ Direct push to main detected - will commit and push"
            SHOULD_COMMIT=true
            TARGET_BRANCH="main"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            if [ "${{ github.event.pull_request.merged }}" = "true" ] && [ "${{ github.event.pull_request.base.ref }}" = "main" ]; then
              echo "✅ Merged PR to main detected - will commit and push"
              SHOULD_COMMIT=true
              TARGET_BRANCH="main"
            else
              echo "ℹ️ PR not merged or not to main - skipping commit and push"
              echo "PR merged: ${{ github.event.pull_request.merged }}"
              echo "PR base ref: ${{ github.event.pull_request.base.ref }}"
            fi
          else
            echo "ℹ️ Event not eligible for commit and push - skipping"
            echo "Event: ${{ github.event_name }}"
            echo "Ref: ${{ github.ref }}"
          fi
          
          if [ "$SHOULD_COMMIT" = "true" ]; then
            # Add coverage reports
            echo "📁 Adding coverage reports to git..."
            git add tests/reports/

            # Check if there are changes to commit
            if git diff --staged --quiet; then
              echo "ℹ️ No changes to commit"
            else
              echo "📝 Changes detected, creating commit..."
              
              # Create commit with timestamp
              TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
              COMMIT_SHA="${{ github.sha }}"
              PYTHON_VERSION="${{ matrix.python-version }}"
              WORKFLOW_NAME="${{ github.workflow }}"
              RUN_NUMBER="${{ github.run_number }}"
              EVENT_NAME="${{ github.event_name }}"

              # Create detailed commit message
              {
                echo "Update test coverage reports"
                echo ""
                echo "Generated: $TIMESTAMP"
                echo "Commit: $COMMIT_SHA"
                echo "Python: $PYTHON_VERSION"
                echo "Workflow: $WORKFLOW_NAME #$RUN_NUMBER"
                echo "Trigger: $EVENT_NAME"
                echo ""
                echo "Generated Reports:"
              } > /tmp/commit_msg

              # Add list of generated files
              find tests/reports -type f -name "*" | sort | sed 's/^/- /' >> /tmp/commit_msg

              echo "" >> /tmp/commit_msg
              echo "- Updated coverage analysis" >> /tmp/commit_msg
              echo "- Refreshed test execution reports" >> /tmp/commit_msg
              echo "- Generated by GitHub Actions" >> /tmp/commit_msg

              # Commit with detailed message
              git commit -F /tmp/commit_msg

              # Push changes to the target branch
              echo "🚀 Pushing changes to $TARGET_BRANCH..."
              
              # If we're not on the target branch, we need to handle the push carefully
              if [ "${{ github.ref }}" != "refs/heads/$TARGET_BRANCH" ]; then
                echo "🔄 Pushing to $TARGET_BRANCH branch from current branch..."
                
                # Fetch the latest main branch
                echo "📥 Fetching latest $TARGET_BRANCH branch..."
                git fetch origin "$TARGET_BRANCH:$TARGET_BRANCH"
                
                # Try to push to main branch
                if git push origin "HEAD:$TARGET_BRANCH"; then
                  echo "✅ Successfully pushed to $TARGET_BRANCH"
                else
                  echo "⚠️ Push failed, trying alternative approach..."
                  
                  # Create a new branch for the coverage reports
                  COVERAGE_BRANCH="coverage-reports-$(date +%Y%m%d-%H%M%S)"
                  echo "🔄 Creating coverage branch: $COVERAGE_BRANCH"
                  
                  # Push to a new branch instead
                  if git push origin "HEAD:$COVERAGE_BRANCH"; then
                    echo "✅ Successfully pushed to coverage branch: $COVERAGE_BRANCH"
                    echo "💡 Coverage reports are available in branch: $COVERAGE_BRANCH"
                    echo "💡 You can merge this branch to main manually if needed"
                  else
                    echo "❌ Failed to push to coverage branch"
                    exit 1
                  fi
                fi
              else
                echo "🔄 Pushing to current branch..."
                git push origin "${{ github.ref }}"
                echo "✅ Successfully pushed to current branch"
              fi
              
              echo "✅ Coverage reports committed and pushed"
            fi
          else
            echo "ℹ️ Skipping commit and push based on workflow conditions"
          fi

      - name: 📤 Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always() # Upload even if tests failed
        with:
          name: test-coverage-reports-py${{ matrix.python-version }}
          path: tests/reports/
          retention-days: 30

      - name: 🎯 Test Results Summary
        if: always()
        run: |
          echo "## 🎯 Final Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f tests/reports/coverage/index.html ]; then
            echo "📊 HTML reports generated successfully!" >> $GITHUB_STEP_SUMMARY
            echo "- [Coverage Report](tests/reports/coverage/index.html)" >> $GITHUB_STEP_SUMMARY
            echo "- [Test Summary](tests/reports/test-summary.txt)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Available Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- HTML test and coverage reports uploaded as workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage reports committed to repository (main branch only)" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage reports deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
          
          # Add debug information
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Workflow Context" >> $GITHUB_STEP_SUMMARY
          echo "- Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Ref: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow: ${{ github.workflow }} #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY

  deploy-pages:
    needs: test-coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    if: success() && (github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main') || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download coverage reports artifact
        uses: actions/download-artifact@v4
        with:
          name: test-coverage-reports-py3.9
          path: ./coverage-reports

      - name: 🏗️ Setup Pages
        uses: actions/configure-pages@v4

      - name: 📁 Prepare coverage reports for deployment
        run: |
          echo "📁 Preparing coverage reports for GitHub Pages deployment..."
          
          # Create the docs directory if it doesn't exist
          mkdir -p docs
          
          # Copy coverage reports to docs directory
          if [ -d "./coverage-reports" ]; then
            echo "📋 Copying coverage reports to docs directory..."
            cp -r ./coverage-reports/* ./docs/
            
            # Create an index.html file that redirects to the coverage report
            cat > ./docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Test Coverage Reports</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 2rem;
                      line-height: 1.6;
                      color: #333;
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 2rem;
                      padding: 2rem;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      border-radius: 10px;
                  }
                  .nav {
                      display: flex;
                      gap: 1rem;
                      margin-bottom: 2rem;
                      flex-wrap: wrap;
                  }
                  .nav a {
                      padding: 0.75rem 1.5rem;
                      background: #007acc;
                      color: white;
                      text-decoration: none;
                      border-radius: 5px;
                      transition: background 0.3s;
                  }
                  .nav a:hover {
                      background: #005a9e;
                  }
                  .info {
                      background: #f8f9fa;
                      padding: 1.5rem;
                      border-radius: 8px;
                      border-left: 4px solid #007acc;
                      margin-bottom: 2rem;
                  }
                  .timestamp {
                      font-size: 0.9rem;
                      color: #666;
                      text-align: center;
                      margin-top: 2rem;
                  }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>🧪 Test Coverage Reports</h1>
                  <p>Comprehensive test coverage analysis and reports</p>
              </div>
              
              <div class="nav">
                  <a href="coverage/index.html">📊 Coverage Report</a>
                  <a href="test-summary.txt">📋 Test Summary</a>
                  <a href="junit.xml">📈 JUnit Results</a>
              </div>
              
              <div class="info">
                  <h3>📁 Available Reports</h3>
                  <ul>
                      <li><strong>Coverage Report:</strong> Detailed HTML coverage analysis with line-by-line coverage information</li>
                      <li><strong>Test Summary:</strong> Summary of test execution results and statistics</li>
                      <li><strong>JUnit Results:</strong> XML format test results for CI/CD integration</li>
                  </ul>
              </div>
              
              <div class="timestamp">
                  <p>Last updated: <span id="timestamp"></span></p>
                  <script>
                      document.getElementById('timestamp').textContent = new Date().toLocaleString();
                  </script>
              </div>
          </body>
          </html>
          EOF
          
            echo "✅ Coverage reports prepared for deployment"
          else
            echo "⚠️ No coverage reports found in artifacts"
            # Create a placeholder page
            cat > ./docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Test Coverage Reports</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      max-width: 600px;
                      margin: 0 auto;
                      padding: 2rem;
                      text-align: center;
                      line-height: 1.6;
                      color: #333;
                  }
                  .message {
                      background: #fff3cd;
                      border: 1px solid #ffeaa7;
                      padding: 2rem;
                      border-radius: 8px;
                      margin: 2rem 0;
                  }
              </style>
          </head>
          <body>
              <h1>🧪 Test Coverage Reports</h1>
              <div class="message">
                  <h2>No Reports Available</h2>
                  <p>Coverage reports are generated when the test suite runs successfully.</p>
                  <p>Please check the GitHub Actions workflow for more information.</p>
              </div>
          </body>
          </html>
          EOF
          fi
          
          # List contents for debugging
          echo "📋 Contents of docs directory:"
          find ./docs -type f | head -20

      - name: 🚀 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
