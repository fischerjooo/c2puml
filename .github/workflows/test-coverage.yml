name: Test Suite with Coverage Reports

on:
  # Automatic triggers
  pull_request:
    branches: [main, master]
    types: [closed] # Trigger when PR is closed (merged)

  # Manual trigger
  workflow_dispatch:

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write

    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN || github.token }}
          fetch-depth: 0 # Full history for better coverage analysis

      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: üìã Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          # Install package in editable mode
          pip install -e .

      - name: üîç Verify package installation
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo "üîç Verifying package installation..."
          python -c "import sys; print('Python path:', sys.path)"
          python -c "import c2puml; print('‚úÖ Package installed successfully')"
          python -c "from c2puml.core.parser import CParser; print('‚úÖ Core modules accessible')"
          # Also test with PYTHONPATH fallback
          echo "üîç Testing with PYTHONPATH fallback..."
          python -c "import c2puml; print('‚úÖ PYTHONPATH approach works')"

      - name: üß™ Run comprehensive test suite with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo "üß™ Running comprehensive test suite with coverage analysis..."
          ./scripts/run_tests_with_coverage.sh

      - name: üîç Debug workflow context
        if: always()
        run: |
          echo "üîç Debugging workflow context..."
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Base ref: ${{ github.base_ref }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run number: ${{ github.run_number }}"

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR number: ${{ github.event.pull_request.number }}"
            echo "PR merged: ${{ github.event.pull_request.merged }}"
            echo "PR base ref: ${{ github.event.pull_request.base.ref }}"
            echo "PR head ref: ${{ github.event.pull_request.head.ref }}"
          fi

          echo "Personal Access Token available: ${{ secrets.PERSONAL_ACCESS_TOKEN != '' }}"

      - name: üîß Validate and configure Git credentials
        if: always()
        run: |
          echo "üîß Setting up Git credentials..."
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Check if PERSONAL_ACCESS_TOKEN is available for better authentication
          if [ -n "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
            echo "‚úÖ Using Personal Access Token for authentication"
            git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}
          else
            echo "‚ö†Ô∏è Personal Access Token not configured, using GitHub token"
            echo "üí° For more reliable authentication, add a Personal Access Token as PERSONAL_ACCESS_TOKEN secret"
            git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}
          fi

      - name: üöÄ Commit and push coverage reports
        if: always()
        run: |
          echo "üöÄ Committing coverage reports to repository..."

          # Determine if we should commit and push
          SHOULD_COMMIT=false

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "‚úÖ Manual trigger detected - will commit and push"
            SHOULD_COMMIT=true
            TARGET_BRANCH="main"
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "‚úÖ Direct push to main detected - will commit and push"
            SHOULD_COMMIT=true
            TARGET_BRANCH="main"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            if [ "${{ github.event.pull_request.merged }}" = "true" ] && [ "${{ github.event.pull_request.base.ref }}" = "main" ]; then
              echo "‚úÖ Merged PR to main detected - will commit and push"
              SHOULD_COMMIT=true
              TARGET_BRANCH="main"
            else
              echo "‚ÑπÔ∏è PR not merged or not to main - skipping commit and push"
              echo "PR merged: ${{ github.event.pull_request.merged }}"
              echo "PR base ref: ${{ github.event.pull_request.base.ref }}"
            fi
          else
            echo "‚ÑπÔ∏è Event not eligible for commit and push - skipping"
            echo "Event: ${{ github.event_name }}"
            echo "Ref: ${{ github.ref }}"
          fi

          if [ "$SHOULD_COMMIT" = "true" ]; then
            # Add coverage reports
            echo "üìÅ Adding coverage reports to git..."
            git add artifacts/test_reports/
            
            # Ensure HTML coverage reports are included
            if [ -d "artifacts/coverage/htmlcov" ]; then
              echo "üìÅ Adding HTML coverage reports..."
              git add artifacts/coverage/htmlcov/
            else
              echo "‚ö†Ô∏è HTML coverage reports directory not found"
            fi

            # Check if there are changes to commit
            if git diff --staged --quiet; then
              echo "‚ÑπÔ∏è No changes to commit"
            else
              echo "üìù Changes detected, creating commit..."

              # Create commit with timestamp
              TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
              COMMIT_SHA="${{ github.sha }}"
              PYTHON_VERSION="${{ matrix.python-version }}"
              WORKFLOW_NAME="${{ github.workflow }}"
              RUN_NUMBER="${{ github.run_number }}"
              EVENT_NAME="${{ github.event_name }}"

              # Create detailed commit message
              {
                echo "Update test coverage reports"
                echo ""
                echo "Generated: $TIMESTAMP"
                echo "Commit: $COMMIT_SHA"
                echo "Python: $PYTHON_VERSION"
                echo "Workflow: $WORKFLOW_NAME #$RUN_NUMBER"
                echo "Trigger: $EVENT_NAME"
                echo ""
                echo "Generated Reports:"
              } > /tmp/commit_msg

              # Add list of generated files
              find artifacts/test_reports -type f -name "*" | sort | sed 's/^/- /' >> /tmp/commit_msg

              echo "" >> /tmp/commit_msg
              echo "- Updated coverage analysis" >> /tmp/commit_msg
              echo "- Refreshed test execution reports" >> /tmp/commit_msg
              echo "- Generated by GitHub Actions" >> /tmp/commit_msg

              # Commit with detailed message
              git commit -F /tmp/commit_msg

              # Robust push strategy with retry logic and conflict resolution
              echo "üöÄ Pushing changes to $TARGET_BRANCH..."

              # Function to attempt push with retry logic
              push_with_retry() {
                local max_attempts=5
                local attempt=1
                local push_success=false
                
                while [ $attempt -le $max_attempts ] && [ "$push_success" = "false" ]; do
                  echo "üîÑ Push attempt $attempt of $max_attempts..."
                  
                  # Fetch latest changes before each attempt
                  echo "üì• Fetching latest changes from origin..."
                  if ! git fetch origin "$TARGET_BRANCH"; then
                    echo "‚ö†Ô∏è Failed to fetch from origin, retrying in 10 seconds..."
                    sleep 10
                    attempt=$((attempt + 1))
                    continue
                  fi
                  
                  # Check if we're on the target branch
                  CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
                  if [ "$CURRENT_BRANCH" != "$TARGET_BRANCH" ]; then
                    echo "üîÑ Switching to $TARGET_BRANCH branch..."
                    
                    # Try to checkout the target branch
                    if git checkout "$TARGET_BRANCH" 2>/dev/null; then
                      echo "‚úÖ Switched to $TARGET_BRANCH branch"
                    else
                      echo "üîÑ Creating and switching to $TARGET_BRANCH branch..."
                      git checkout -b "$TARGET_BRANCH" "origin/$TARGET_BRANCH" || {
                        echo "‚ùå Failed to create/switch to $TARGET_BRANCH branch"
                        attempt=$((attempt + 1))
                        continue
                      }
                    fi
                    
                    # Cherry-pick the commit to the target branch
                    echo "üçí Cherry-picking commit to $TARGET_BRANCH..."
                    COMMIT_HASH=$(git rev-parse HEAD~1)  # Get the commit we just made
                    git reset --hard "origin/$TARGET_BRANCH"  # Reset to origin state
                    
                    if ! git cherry-pick "$COMMIT_HASH"; then
                      echo "üîÑ Cherry-pick conflict detected, attempting automatic resolution..."
                      
                      # For coverage reports, prefer our changes
                      git add artifacts/test_reports/ || true
                      if ! git cherry-pick --continue; then
                        echo "‚ö†Ô∏è Manual resolution required, using force strategy..."
                        git cherry-pick --abort
                        
                        # Copy our changes manually
                        git checkout "$COMMIT_HASH" -- artifacts/test_reports/ || true
                        git add artifacts/test_reports/ || true
                        
                        if git diff --staged --quiet; then
                          echo "‚ÑπÔ∏è No changes to commit after conflict resolution"
                          push_success=true
                          break
                        else
                          git commit --no-edit -m "Update test coverage reports (auto-resolved conflicts)" || true
                        fi
                      fi
                    fi
                  else
                    # We're already on the target branch, try to rebase
                    echo "üîÑ Rebasing with latest changes..."
                    if ! git rebase "origin/$TARGET_BRANCH"; then
                      echo "üîÑ Rebase conflict detected, attempting resolution..."
                      
                      # For coverage reports, prefer our changes
                      git add artifacts/test_reports/ || true
                      if ! git rebase --continue; then
                        echo "‚ö†Ô∏è Rebase failed, trying merge strategy..."
                        git rebase --abort
                        
                        # Try merge instead
                        git merge "origin/$TARGET_BRANCH" --no-edit --strategy-option=ours || {
                          echo "‚ö†Ô∏è Merge failed, using reset and force strategy..."
                          git merge --abort || true
                          git reset --hard "origin/$TARGET_BRANCH"
                          git add artifacts/test_reports/
                          git commit -F /tmp/commit_msg || true
                        }
                      fi
                    fi
                  fi
                  
                  # Attempt the push
                  if git push origin "$TARGET_BRANCH"; then
                    echo "‚úÖ Successfully pushed to $TARGET_BRANCH on attempt $attempt"
                    push_success=true
                    break
                  else
                    echo "‚ö†Ô∏è Push failed on attempt $attempt"
                    if [ $attempt -lt $max_attempts ]; then
                      echo "‚è≥ Waiting 15 seconds before retry..."
                      sleep 15
                    fi
                    attempt=$((attempt + 1))
                  fi
                done
                
                if [ "$push_success" = "false" ]; then
                  echo "‚ùå All push attempts failed, trying fallback strategy..."
                  return 1
                else
                  return 0
                fi
              }
              
              # Try the robust push strategy
              if push_with_retry; then
                echo "‚úÖ Coverage reports successfully committed and pushed"
              else
                echo "üîÑ Primary push strategy failed, trying fallback..."
                
                # Fallback strategy: create a timestamped branch
                COVERAGE_BRANCH="coverage-reports-$(date +%Y%m%d-%H%M%S)-${{ github.run_number }}"
                echo "üîÑ Creating fallback coverage branch: $COVERAGE_BRANCH"
                
                # Ensure we're on our commit
                git checkout "${{ github.sha }}" || git checkout HEAD
                git checkout -b "$COVERAGE_BRANCH"
                
                # Force push to the new branch
                if git push origin "$COVERAGE_BRANCH"; then
                  echo "‚úÖ Successfully pushed to fallback branch: $COVERAGE_BRANCH"
                  echo "üí° Coverage reports are available in branch: $COVERAGE_BRANCH"
                  echo "üí° Create a PR to merge these changes to main if needed"
                  
                  # Add comment to original PR if applicable
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                    echo "üìù Coverage reports available in branch $COVERAGE_BRANCH" >> $GITHUB_STEP_SUMMARY
                  fi
                else
                  echo "‚ùå Fallback push also failed"
                  echo "‚ö†Ô∏è Coverage reports could not be committed to repository"
                  echo "üí° Reports are still available as workflow artifacts"
                  # Don't fail the workflow - artifacts are still available
                fi
              fi
            fi
          else
            echo "‚ÑπÔ∏è Skipping commit and push based on workflow conditions"
          fi

      - name: üì§ Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always() # Upload even if tests failed
        with:
          name: test-coverage-reports-py${{ matrix.python-version }}
          path: artifacts/test_reports/
          retention-days: 30

      - name: üéØ Test Results Summary
        if: always()
        run: |
          echo "## üéØ Final Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -d artifacts/coverage/htmlcov ]; then
            echo "üìä HTML coverage reports generated successfully!" >> $GITHUB_STEP_SUMMARY
            echo "- [HTML Coverage Report](artifacts/coverage/htmlcov/index.html)" >> $GITHUB_STEP_SUMMARY
            echo "- [Test Summary](artifacts/test_reports/test-summary.txt)" >> $GITHUB_STEP_SUMMARY
          elif [ -f artifacts/coverage/index.html ]; then
            echo "üìä Coverage reports generated successfully!" >> $GITHUB_STEP_SUMMARY
            echo "- [Coverage Report](artifacts/coverage/index.html)" >> $GITHUB_STEP_SUMMARY
            echo "- [Test Summary](artifacts/test_reports/test-summary.txt)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìÅ Available Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- HTML test and coverage reports uploaded as workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage reports committed to repository (main branch only)" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage reports deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY

          # Add debug information
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Workflow Context" >> $GITHUB_STEP_SUMMARY
          echo "- Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Ref: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow: ${{ github.workflow }} #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY

      - name: üñºÔ∏è Trigger PlantUML to PNG Conversion
        if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        uses: actions/github-script@v7
        with:
          script: |
            // This step triggers the puml2png workflow after successful test completion
            // This is the primary trigger for PlantUML conversion after PR merges
            try {
              const { data: runs } = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'puml2png.yml',
                ref: context.ref,
                inputs: {
                  output_folder: 'output',
                  commit_changes: 'true'
                }
              });
              console.log('‚úÖ PlantUML to PNG conversion workflow triggered successfully');
            } catch (error) {
              console.log('‚ö†Ô∏è Failed to trigger PlantUML workflow:', error.message);
              console.log('üí° PlantUML conversion can be triggered manually if needed');
              // Don't fail the workflow if PlantUML trigger fails
            }
