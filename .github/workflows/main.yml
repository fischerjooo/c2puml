name: Main Workflow - Lint, Format, and Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # Step 1: Lint and Format
  lint-and-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    outputs:
      has_changes: ${{ steps.check_changes.outputs.has_changes }}

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        echo "🔧 Installing Python dependencies..."
        python -m pip install --upgrade pip
        echo "📦 Installing linting and formatting tools..."
        pip install flake8 black isort
        echo "📋 Installing package in development mode..."
        pip install -e .
        echo "✅ Dependencies installed successfully"

    - name: Show Python environment
      run: |
        echo "🐍 Python Environment Information:"
        echo "Python version: $(python --version)"
        echo "Pip version: $(pip --version)"
        echo "Installed packages:"
        pip list

    - name: Check code formatting with black
      run: |
        echo "🎨 Checking code formatting with black..."
        black --check --diff c_to_plantuml/ main.py run_all_tests.py setup.py
        echo "✅ Black formatting check completed"

    - name: Check import sorting with isort
      run: |
        echo "📦 Checking import sorting with isort..."
        isort --check-only --diff c_to_plantuml/ main.py run_all_tests.py setup.py
        echo "✅ isort check completed"

    - name: Lint with flake8
      run: |
        echo "🔍 Running comprehensive flake8 linting..."
        flake8 c_to_plantuml/ main.py run_all_tests.py setup.py \
          --count \
          --select=E9,F63,F7,F82,W291,W292,W293,W391,E201,E202,E203,E211,E221,E222,E223,E224,E225,E226,E227,E228,E231,E241,E242,E251,E261,E262,E265,E266,E271,E272,E273,E274,E275,E301,E302,E303,E304,E305,E306,E401,E402,E701,E702,E703,E711,E712,E713,E714,E721,E722,E731,E741,E742,E743,E901,E902,W191,W291,W292,W293,W391,W503,W504,W601,W602,W603,W604,W605,W606 \
          --show-source \
          --statistics \
          --max-line-length=88 \
          --extend-ignore=E203,W503,E501
        echo "✅ flake8 linting completed"

    - name: Format code with black
      run: |
        echo "🎨 Formatting code with black..."
        black c_to_plantuml/ main.py run_all_tests.py setup.py
        echo "✅ Black formatting completed"

    - name: Sort imports with isort
      run: |
        echo "📦 Sorting imports with isort..."
        isort c_to_plantuml/ main.py run_all_tests.py setup.py
        echo "✅ isort completed"

    - name: Check for changes
      id: check_changes
      run: |
        echo "🔍 Checking for formatting changes..."
        if [ -n "$(git status --porcelain)" ]; then
          echo "📝 Changes detected"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          git diff
        else
          echo "✅ No changes needed"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push changes
      if: steps.check_changes.outputs.has_changes == 'true' && github.event_name != 'pull_request'
      run: |
        echo "📝 Committing and pushing formatting changes..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git commit -m "style: auto-format code with black and isort

        - Format code with black
        - Sort imports with isort
        - Auto-generated by GitHub Actions"
        git push
        echo "✅ Changes committed and pushed"

    - name: Comment on PR if changes needed
      if: steps.check_changes.outputs.has_changes == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '⚠️ **Code formatting issues detected!**\n\nThis PR has code formatting issues that need to be fixed. Please run the following commands locally:\n\n```bash\npip install black isort flake8\nblack c_to_plantuml/ main.py run_all_tests.py setup.py\nisort c_to_plantuml/ main.py run_all_tests.py setup.py\n```\n\nOr use the provided scripts:\n```bash\npython scripts/format.py\n```'
          })

    - name: Upload formatted files as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: formatted-python-files-${{ matrix.python-version }}
        path: |
          c_to_plantuml/
          main.py
          run_all_tests.py
          setup.py

  # Step 2: Test (runs after lint-and-format, on updated code)
  test:
    needs: lint-and-format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        echo "🔧 Installing Python dependencies..."
        python -m pip install --upgrade pip
        echo "📦 Installing package in development mode..."
        pip install -e .
        echo "📋 Installing additional requirements..."
        if [ -f requirements.txt ]; then 
          echo "Found requirements.txt, installing..."
          pip install -r requirements.txt
        else
          echo "No requirements.txt found"
        fi
        echo "✅ Dependencies installed successfully"

    - name: Install development dependencies
      run: |
        echo "📦 Installing development dependencies..."
        pip install -r requirements-dev.txt
        echo "✅ Development dependencies installed"

    - name: Show Python environment
      run: |
        echo "🐍 Python Environment Information:"
        echo "Python version: $(python --version)"
        echo "Pip version: $(pip --version)"
        echo "Installed packages:"
        pip list

    - name: Lint with flake8
      run: |
        echo "🔍 Running comprehensive flake8 linting..."
        flake8 c_to_plantuml/ main.py run_all_tests.py setup.py --count --show-source --statistics --extend-ignore=E501
        echo "✅ flake8 linting completed successfully"

    - name: Check code formatting with black
      run: |
        echo "🎨 Checking code formatting with black..."
        black --check --diff c_to_plantuml/ main.py run_all_tests.py setup.py
        echo "✅ Black formatting check completed"

    - name: Check import sorting with isort
      run: |
        echo "📦 Checking import sorting with isort..."
        isort --check-only --diff c_to_plantuml/ main.py run_all_tests.py setup.py
        echo "✅ isort check completed"

    - name: Test new 3-step architecture
      run: |
        echo "🧪 Testing new 3-step architecture..."
        echo "📁 Current directory: $(pwd)"
        echo "📋 Available config files:"
        ls -la *.json
        
        # Test Step 1: Parse
        echo "📝 Step 1: Testing parse command..."
        python main.py --verbose parse tests/test_files -o test_model.json
        
        # Test Step 2: Transform (if config exists)
        if [ -f "simple_config.json" ]; then
          echo "🔄 Step 2: Testing transform command..."
          python main.py transform test_model.json simple_config.json -o transformed_model.json
        else
          echo "⚠️ No config file found, skipping transform step"
        fi
        
        # Test Step 3: Generate
        echo "🎨 Step 3: Testing generate command..."
        model_file="transformed_model.json"
        if [ ! -f "transformed_model.json" ]; then
          model_file="test_model.json"
        fi
        python main.py generate $model_file -o test_plantuml_output
        
        echo "✅ 3-step architecture tests completed"

    - name: Test complete workflow
      run: |
        echo "🔄 Testing complete workflow..."
        if [ -f "simple_config.json" ]; then
          echo "📝 Running complete workflow with config..."
          python main.py workflow tests/test_files simple_config.json
        else
          echo "⚠️ No config file found, testing parse only..."
          python main.py parse tests/test_files -o workflow_model.json
        fi
        echo "✅ Complete workflow test finished"

    - name: Verify output files
      run: |
        echo "🔍 Verifying output files..."
        
        # Check that expected files were created
        if [ ! -f "test_model.json" ] && [ ! -f "workflow_model.json" ]; then
          echo "❌ Error: No model JSON file created"
          ls -la *.json
          exit 1
        else
          echo "✅ Model JSON file created successfully"
          if [ -f "test_model.json" ]; then
            echo "📊 test_model.json size: $(wc -c < test_model.json) bytes"
          fi
          if [ -f "workflow_model.json" ]; then
            echo "📊 workflow_model.json size: $(wc -c < workflow_model.json) bytes"
          fi
        fi
        
        if [ ! -d "test_plantuml_output" ] && [ ! -d "plantuml_output" ]; then
          echo "❌ Error: No PlantUML output directory created"
          ls -la
          exit 1
        else
          echo "✅ PlantUML output directory created successfully"
        fi
        
        # Check for .puml files
        output_dir="test_plantuml_output"
        if [ ! -d "$output_dir" ]; then
          output_dir="plantuml_output"
        fi
        
        puml_count=$(find $output_dir -name "*.puml" | wc -l)
        if [ "$puml_count" -eq 0 ]; then
          echo "❌ Error: No .puml files generated"
          echo "📁 Directory contents:"
          ls -la $output_dir/
          exit 1
        fi
        
        echo "✅ Success: Found $puml_count PlantUML files"
        echo "📊 PlantUML files:"
        find $output_dir -name "*.puml" -exec wc -l {} \;

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-outputs-${{ matrix.python-version }}
        path: |
          test_model.json
          transformed_model.json
          workflow_model.json
          test_plantuml_output/
          plantuml_output/