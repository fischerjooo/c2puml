name: Convert PlantUML to PNG

on:
  workflow_dispatch:
    inputs:
      output_folder:
        description: 'Output folder containing .puml files'
        required: false
        default: 'output'
        type: string
      commit_changes:
        description: 'Commit generated images to repository'
        required: false
        default: true
        type: boolean
  workflow_call:
    inputs:
      output_folder:
        description: 'Output folder containing .puml files'
        required: false
        type: string
      commit_changes:
        description: 'Commit generated images to repository'
        required: false
        type: boolean
  push:
    paths:
      - 'output/**/*.puml'
      - 'picgen.sh'
      - '.github/workflows/puml2png.yml'
    branches: [ main, master ]

jobs:
  convert-puml:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        fetch-depth: 0
        
    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
    - name: Validate Personal Access Token
      run: |
        if [ -z "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
          echo "‚ùå Error: PERSONAL_ACCESS_TOKEN secret is not configured"
          echo "Please add a Personal Access Token with 'repo' scope as a repository secret"
          exit 1
        fi
        echo "‚úÖ Personal Access Token is configured"
        
    - name: Setup Git credentials
      run: |
        echo "Setting up Git credentials with Personal Access Token"
        git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}
        
    - name: Install dependencies
      run: |
        echo "üì¶ Installing system dependencies..."
        sudo apt-get update
        sudo apt-get install -y graphviz default-jre
        
    - name: Verify Graphviz installation
      run: |
        echo "üîç Verifying Graphviz installation..."
        dot -V
        which dot
        
    - name: Setup PlantUML
      run: |
        echo "üì¶ Setting up PlantUML..."
        # Use the JAR file if it exists, otherwise download it
        if [ ! -f "plantuml.jar" ]; then
          echo "üì• Downloading PlantUML..."
          wget https://github.com/plantuml/plantuml/releases/download/v1.2024.0/plantuml-1.2024.0.jar -O plantuml.jar
        fi
        
        # Test PlantUML setup
        echo "üîç Testing PlantUML setup..."
        java -jar plantuml.jar -testdot
        
    - name: List .puml files
      run: |
        # Use input from workflow_call if available, otherwise use workflow_dispatch input or default
        OUTPUT_FOLDER="${{ github.event.inputs.output_folder || 'output' }}"
        echo "üìÅ Listing .puml files in $OUTPUT_FOLDER directory:"
        find $OUTPUT_FOLDER -name "*.puml" -type f || echo "No .puml files found"
        
    - name: Run PNG generation
      run: |
        echo "üöÄ Running PlantUML to PNG conversion..."
        chmod +x ./picgen.sh
        ./picgen.sh
        
    - name: List generated images
      run: |
        echo "üìÅ Generated images in output directory:"
        find output -name "*.png" | sort || echo "No images found"
        
        echo "üìä Summary of files in output directory:"
        echo "Total files: $(find output -type f | wc -l)"
        echo "PNG files: $(find output -name "*.png" | wc -l)"
        echo "PUML files: $(find output -name "*.puml" | wc -l)"
        
    - name: Check for changes
      id: check_changes
      run: |
        echo "üîç Checking for changes..."
        echo "Untracked files:"
        git ls-files --others --exclude-standard || echo "No untracked files"
        echo "Modified files:"
        git diff --name-only || echo "No modified files"
        
        # Check if there are any PNG files that are untracked or modified
        if git ls-files --others --exclude-standard | grep -q "\.png$" || ! git diff --quiet; then
          echo "no_changes=false" >> $GITHUB_OUTPUT
          echo "üìù Changes detected (untracked PNG files or other changes), will commit if enabled"
        else
          echo "no_changes=true" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è No changes to commit"
        fi
        
    - name: Commit and push changes
      if: ${{ (github.event.inputs.commit_changes != 'false' && steps.check_changes.outputs.no_changes != 'true') || (github.event_name == 'workflow_call' && github.event.inputs.commit_changes != 'false' && steps.check_changes.outputs.no_changes != 'true') }}
      run: |
        echo "üìù Committing generated images to repository..."
        
        # Add all generated PNG images (both tracked and untracked)
        git add output/*.png 2>/dev/null || echo "No new images to add"
        
        # Also add any other changes that might exist
        git add -A
        
        # Check if there are staged changes
        if git diff --cached --quiet; then
          echo "‚ÑπÔ∏è No staged changes to commit"
        else
          # Create commit message
          echo "üñºÔ∏è Auto-generate PlantUML PNG images" > /tmp/commit_msg
          
          # Add details about which files were converted
          echo "" >> /tmp/commit_msg
          echo "Generated from:" >> /tmp/commit_msg
          find output -name "*.puml" -exec basename {} \; | sed 's/^/- /' >> /tmp/commit_msg
          echo "" >> /tmp/commit_msg
          echo "Generated images:" >> /tmp/commit_msg
          find output -name "*.png" | sort | sed 's/^/- /' >> /tmp/commit_msg
          
          # Commit with detailed message
          git commit -F /tmp/commit_msg
          
          # Push to the same branch using Personal Access Token
          echo "Pushing with Personal Access Token..."
          git push origin ${{ github.ref }}
          
          echo "‚úÖ Successfully committed and pushed generated PNG images"
        fi
        
    - name: Skip commit (disabled by user)
      if: ${{ (github.event.inputs.commit_changes == 'false') || (github.event_name == 'workflow_call' && github.event.inputs.commit_changes == 'false') }}
      run: |
        echo "‚è≠Ô∏è Skipping commit as requested by user"
        
    - name: Upload generated images as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: plantuml-png-images
        path: output/*.png
        retention-days: 30

    - name: üöÄ Trigger Website Deployment
      if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: actions/github-script@v7
      with:
        script: |
          const { data: runs } = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploy-website.yml',
            ref: context.ref,
            inputs: {
              message: `Auto-deploy after PlantUML conversion run #${context.runNumber}`
            }
          });
          console.log('‚úÖ Website deployment workflow triggered successfully after PlantUML conversion');