name: Convert PlantUML to PNG

# This workflow converts PlantUML (.puml) files to PNG images and commits them to the repository.
# It includes robust git conflict resolution to handle cases where the remote repository
# has been updated while the workflow is running.
#
# NOTE: This workflow is triggered by:
# 1. Manual workflow_dispatch (for manual runs)
# 2. workflow_call from test-coverage.yml (for automated runs after PR merge)
# 3. push trigger on main/master branches when PlantUML files change (for direct commits)
#
# The workflow uses concurrency control to prevent multiple simultaneous executions
# that could conflict when committing generated images.

on:
  workflow_dispatch:
    inputs:
      output_folder:
        description: 'Output folder containing .puml files'
        required: false
        default: 'output'
        type: string
      commit_changes:
        description: 'Commit generated images to repository'
        required: false
        default: true
        type: boolean
  workflow_call:
    inputs:
      output_folder:
        description: 'Output folder containing .puml files'
        required: false
        type: string
      commit_changes:
        description: 'Commit generated images to repository'
        required: false
        type: boolean
  push:
    paths:
      - 'artifacts/output_example/**/*.puml'
      - 'picgen.sh'
      - '.github/workflows/puml2png.yml'
    branches: 
      # Only run on main/master branches for push triggers
      - main
      - master

jobs:
  convert-puml:
    runs-on: ubuntu-latest
    concurrency:
      group: "puml2png-conversion"
      cancel-in-progress: true
    permissions:
      contents: write
      pull-requests: write
      actions: write
    
    steps:
    - name: Check if this is a duplicate trigger
      id: check_duplicate
      run: |
        echo "🔍 Checking if this execution should be skipped to avoid duplication..."
        
        # Skip if this is a push trigger from a merge commit (likely handled by test-coverage workflow)
        if [ "${{ github.event_name }}" = "push" ]; then
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MESSAGE"
          
          # Check if this looks like a merge commit
          if echo "$COMMIT_MESSAGE" | grep -q "Merge pull request\|Merge branch"; then
            echo "🔀 This appears to be a merge commit"
            echo "⏭️ Skipping execution to avoid duplication with test-coverage workflow"
            echo "skip_execution=true" >> $GITHUB_OUTPUT
          else
            echo "📝 This appears to be a direct commit, proceeding with execution"
            echo "skip_execution=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "✅ Manual trigger or workflow_call, proceeding"
          echo "skip_execution=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Skip execution (duplicate prevention)
      if: steps.check_duplicate.outputs.skip_execution == 'true'
      run: |
        echo "⏭️ Skipping PlantUML conversion - likely already handled by test-coverage workflow"
        echo "This prevents duplicate PNG generation when PRs are merged"
    - name: Checkout code
      if: steps.check_duplicate.outputs.skip_execution != 'true'
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        fetch-depth: 0
        
    - name: Configure Git
      if: steps.check_duplicate.outputs.skip_execution != 'true'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
    - name: Validate Personal Access Token
      if: steps.check_duplicate.outputs.skip_execution != 'true'
      run: |
        if [ -z "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
          echo "❌ Error: PERSONAL_ACCESS_TOKEN secret is not configured"
          echo "Please add a Personal Access Token with 'repo' scope as a repository secret"
          exit 1
        fi
        echo "✅ Personal Access Token is configured"
        
    - name: Setup Git credentials
      if: steps.check_duplicate.outputs.skip_execution != 'true'
      run: |
        echo "Setting up Git credentials with Personal Access Token"
        git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}
        
    - name: Pull latest changes
      if: steps.check_duplicate.outputs.skip_execution != 'true'
      run: |
        echo "📥 Pulling latest changes from remote..."
        git pull origin ${{ github.ref }} || echo "No changes to pull or already up to date"
        
    - name: Install dependencies
      if: steps.check_duplicate.outputs.skip_execution != 'true'
      run: |
        echo "📦 Installing system dependencies..."
        sudo apt-get update
        sudo apt-get install -y graphviz default-jre
        
    - name: Verify Graphviz installation
      if: steps.check_duplicate.outputs.skip_execution != 'true'
      run: |
        echo "🔍 Verifying Graphviz installation..."
        dot -V
        which dot
        
    - name: Setup PlantUML
      if: steps.check_duplicate.outputs.skip_execution != 'true'
      run: |
        echo "📦 Setting up PlantUML..."
        # Use the JAR file if it exists, otherwise download it
        if [ ! -f "plantuml.jar" ]; then
          echo "📥 Downloading PlantUML..."
          wget https://github.com/plantuml/plantuml/releases/download/v1.2024.0/plantuml-1.2024.0.jar -O plantuml.jar
        fi
        
        # Test PlantUML setup
        echo "🔍 Testing PlantUML setup..."
        java -jar plantuml.jar -testdot
        
    - name: List .puml files
      if: steps.check_duplicate.outputs.skip_execution != 'true'
      run: |
        # Use input from workflow_call if available, otherwise use workflow_dispatch input or default
        OUTPUT_FOLDER="${{ github.event.inputs.output_folder || 'output' }}"
        echo "📁 Listing .puml files in $OUTPUT_FOLDER directory:"
        find $OUTPUT_FOLDER -name "*.puml" -type f || echo "No .puml files found"
        
    - name: Run PNG generation
      if: steps.check_duplicate.outputs.skip_execution != 'true'
      run: |
        echo "🚀 Running PlantUML to PNG conversion..."
        chmod +x ./scripts/picgen.sh
        ./scripts/picgen.sh
        
        # Verify that the script completed successfully and generated the diagram index
        echo "🔍 Verifying script completion..."
        if [ ! -f "artifacts/output_example/diagram_index.html" ]; then
          echo "❌ Error: diagram_index.html was not generated by picgen.sh"
          echo "📁 Contents of output directory:"
          ls -la artifacts/output_example/ || echo "No output directory"
          exit 1
        else
          echo "✅ diagram_index.html was successfully generated"
        fi
        
    - name: List generated images
      if: steps.check_duplicate.outputs.skip_execution != 'true'
      run: |
        echo "📁 Generated images in output directory:"
        find output -name "*.png" | sort || echo "No images found"
        
        echo "📊 Summary of files in output directory:"
        echo "Total files: $(find output -type f | wc -l)"
        echo "PNG files: $(find output -name "*.png" | wc -l)"
        echo "PUML files: $(find output -name "*.puml" | wc -l)"
        
        echo "📄 Checking for diagram index HTML file:"
        if [ -f "artifacts/output_example/diagram_index.html" ]; then
          echo "✅ diagram_index.html exists"
          echo "📏 File size: $(ls -lh artifacts/output_example/diagram_index.html | awk '{print $5}')"
        else
          echo "❌ diagram_index.html not found"
        fi
        
    - name: Check for changes
      if: steps.check_duplicate.outputs.skip_execution != 'true'
      id: check_changes
      run: |
        echo "🔍 Checking for changes..."
        echo "Untracked files:"
        git ls-files --others --exclude-standard || echo "No untracked files"
        echo "Modified files:"
        git diff --name-only || echo "No modified files"
        
        # Check if there are any PNG files or HTML files that are untracked or modified
        if git ls-files --others --exclude-standard | grep -E "\.(png|html)$" || ! git diff --quiet; then
          echo "no_changes=false" >> $GITHUB_OUTPUT
          echo "📝 Changes detected (untracked PNG/HTML files or other changes), will commit if enabled"
        else
          echo "no_changes=true" >> $GITHUB_OUTPUT
          echo "ℹ️ No changes to commit"
        fi
        
    - name: Commit and push changes
      if: ${{ steps.check_duplicate.outputs.skip_execution != 'true' && ((github.event.inputs.commit_changes != 'false' && steps.check_changes.outputs.no_changes != 'true') || (github.event_name == 'workflow_call' && github.event.inputs.commit_changes != 'false' && steps.check_changes.outputs.no_changes != 'true')) }}
      run: |
        echo "📝 Committing generated images to repository..."
        
        # Check what files exist before adding
        echo "📁 Files in output directory before git add:"
        ls -la artifacts/output_example/ || echo "No output directory"
        
        # Add all generated PNG images (both tracked and untracked)
        echo "📤 Adding PNG files..."
        git add artifacts/output_example/*.png 2>/dev/null || echo "No new PNG images to add"
        
        # Add the generated diagram index HTML file
        echo "📤 Adding diagram index HTML file..."
        if [ -f "artifacts/output_example/diagram_index.html" ]; then
          git add artifacts/output_example/diagram_index.html
          echo "✅ Added diagram_index.html"
        else
          echo "❌ diagram_index.html not found"
        fi
        
        # Also add any other changes that might exist
        echo "📤 Adding any other changes..."
        git add -A
        
        # Show what's staged
        echo "📋 Staged changes:"
        git diff --cached --name-only || echo "No staged changes"
        
        # Check if there are staged changes
        if git diff --cached --quiet; then
          echo "ℹ️ No staged changes to commit"
        else
          # Create commit message
          echo "🖼️ Auto-generate PlantUML PNG images and diagram index" > /tmp/commit_msg
          
          # Add details about which files were converted
          echo "" >> /tmp/commit_msg
          echo "Generated from:" >> /tmp/commit_msg
          find output -name "*.puml" -exec basename {} \; | sed 's/^/- /' >> /tmp/commit_msg
          echo "" >> /tmp/commit_msg
          echo "Generated images:" >> /tmp/commit_msg
          find output -name "*.png" | sort | sed 's/^/- /' >> /tmp/commit_msg
          echo "" >> /tmp/commit_msg
          echo "Generated index:" >> /tmp/commit_msg
          echo "- diagram_index.html (diagram gallery)" >> /tmp/commit_msg
          
          # Commit with detailed message
          git commit -F /tmp/commit_msg
          
          # Pull latest changes before pushing to avoid conflicts
          echo "📥 Pulling latest changes from remote..."
          git fetch origin
          if ! git pull origin ${{ github.ref }} --rebase; then
            echo "⚠️ Rebase failed, trying merge instead..."
            if ! git pull origin ${{ github.ref }} --no-rebase; then
              echo "❌ Failed to pull latest changes. This might be due to conflicts."
              echo "📋 Current status:"
              git status
              echo "🔍 Attempting to resolve by creating a new commit on top of latest..."
              git fetch origin
              git reset --hard origin/${{ github.ref }}
              git add -A
              git commit -F /tmp/commit_msg
            fi
          fi
          
          # Push to the same branch using Personal Access Token
          echo "Pushing with Personal Access Token..."
          if ! git push origin ${{ github.ref }}; then
            echo "⚠️ Regular push failed, trying force-with-lease..."
            git push origin ${{ github.ref }} --force-with-lease
          fi
          
          echo "✅ Successfully committed and pushed generated PNG images and diagram index"
        fi
        
    - name: Skip commit (disabled by user)
      if: ${{ steps.check_duplicate.outputs.skip_execution != 'true' && ((github.event.inputs.commit_changes == 'false') || (github.event_name == 'workflow_call' && github.event.inputs.commit_changes == 'false')) }}
      run: |
        echo "⏭️ Skipping commit as requested by user"
        
    - name: Upload generated images and index as artifacts
      if: steps.check_duplicate.outputs.skip_execution != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: plantuml-png-images
        path: |
          artifacts/output_example/*.png
          artifacts/output_example/diagram_index.html
        retention-days: 30

    - name: 🚀 Trigger Website Deployment
      if: steps.check_duplicate.outputs.skip_execution != 'true' && success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: actions/github-script@v7
      with:
        script: |
          const { data: runs } = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploy-website.yml',
            ref: context.ref,
            inputs: {
              message: `Auto-deploy after PlantUML conversion run #${context.runNumber}`
            }
          });
          console.log('✅ Website deployment workflow triggered successfully after PlantUML conversion');