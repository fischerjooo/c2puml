name: Deploy Website

on:
  # Manual trigger for deployment
  workflow_dispatch:
    inputs:
      message:
        description: 'Deployment message'
        required: false
        default: 'Website deployment'
        type: string

  # Called by test-coverage workflow
  workflow_call:
    inputs:
      message:
        description: 'Deployment message from calling workflow'
        required: false
        type: string

jobs:
  deploy-website:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      actions: write
    
    concurrency:
      group: "pages"
      cancel-in-progress: false
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN || github.token }}
        
    - name: 🔧 Install required tools
      run: |
        echo "🔧 Installing required tools..."
        sudo apt-get update
        sudo apt-get install -y bc
        
    - name: 🏗️ Prepare website files
      run: |
        echo "🏗️ Preparing website files for deployment..."
        
        # Create docs directory for GitHub Pages
        mkdir -p docs
        
        # Copy README as index page
        cp README.md docs/index.md
        
        # Create a minimal test deployment first
        echo "🧪 Creating minimal test deployment to debug issues..."
        
        # Only copy essential files for now
        if [ -f "README.md" ]; then
          cp README.md docs/
        fi
        
        # Copy test reports and coverage files
        if [ -d "tests/reports" ]; then
          mkdir -p docs/tests/reports
          # Copy all test report files
          cp -r tests/reports/* docs/tests/reports/
          echo "✅ Test reports copied to docs/tests/reports/"
          
          # Verify htmlcov folder is properly copied
          if [ -d "docs/tests/reports/coverage/htmlcov" ]; then
            echo "✅ htmlcov folder found in deployment"
            echo "📊 htmlcov contents:"
            ls -la docs/tests/reports/coverage/htmlcov/
            echo "📊 htmlcov file count: $(find docs/tests/reports/coverage/htmlcov -type f | wc -l)"
          else
            echo "⚠️ htmlcov folder not found in deployment"
            echo "🔍 Checking coverage directory contents:"
            ls -la docs/tests/reports/coverage/
          fi
        fi
        
        # Copy output folder with PNG images and PlantUML files
        if [ -d "output" ]; then
          mkdir -p docs/output
          # Copy all files from output directory
          cp -r output/* docs/output/
          echo "✅ Output folder copied to docs/output/"
        else
          echo "⚠️ Output folder not found, creating empty directory"
          mkdir -p docs/output
        fi
        
        # Copy example folder if it exists
        if [ -d "example" ]; then
          mkdir -p docs/example
          # Copy all files from example directory
          cp -r tests/example/* docs/example/
          echo "✅ Example folder copied to docs/example/"
        else
          echo "⚠️ Example folder not found, creating empty directory"
          mkdir -p docs/example
        fi
        
        # Create .nojekyll file to disable Jekyll processing
        touch docs/.nojekyll
        echo "✅ Created .nojekyll file to disable Jekyll processing"
        
        # Debug: List all files that will be deployed
        echo "🔍 Files to be deployed:"
        find docs -type f | sort
        echo ""
        echo "📊 Test report files:"
        find docs/tests/reports -type f | sort
        echo ""
        echo "📊 Coverage files:"
        find docs/tests/reports/coverage -type f | sort
        echo ""
        echo "📊 htmlcov folder verification:"
        if [ -d "docs/tests/reports/coverage/htmlcov" ]; then
          echo "✅ htmlcov folder exists"
          echo "📊 htmlcov files:"
          find docs/tests/reports/coverage/htmlcov -type f | sort
          echo "📊 htmlcov index.html exists: $(test -f docs/tests/reports/coverage/htmlcov/index.html && echo 'YES' || echo 'NO')"
        else
          echo "❌ htmlcov folder missing"
        fi
        echo ""
        echo "📊 Output files (PNG images and PlantUML):"
        find docs/output -type f | sort
        echo ""
        echo "📋 Example files:"
        find docs/example -type f | sort
        
        # Create a simple index.html
        cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>C to PlantUML Converter</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; margin: 0; padding: 20px; background: #f6f8fa; }
                .container { max-width: 1200px; margin: 0 auto; }
                .header { background: white; padding: 20px; border-radius: 6px; margin-bottom: 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
                .content { background: white; padding: 20px; border-radius: 6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
                .nav { background: #0366d6; color: white; padding: 15px 20px; border-radius: 6px; margin-bottom: 20px; }
                .nav a { color: white; text-decoration: none; margin-right: 20px; font-weight: 500; }
                .nav a:hover { text-decoration: underline; }
                .footer { text-align: center; margin-top: 40px; padding: 20px; color: #586069; }
                .card { background: white; padding: 20px; border-radius: 6px; margin: 10px 0; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
                .card h3 { margin-top: 0; color: #0366d6; }
                .btn { display: inline-block; background: #0366d6; color: white; padding: 10px 20px; text-decoration: none; border-radius: 6px; margin: 5px; }
                .btn:hover { background: #0256b3; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="nav">
                    <a href="index.html">🏠 Home</a>
                    <a href="tests/reports/coverage/htmlcov/index.html">📊 Coverage</a>
                    <a href="tests/reports/test_summary.html">📝 Tests</a>
                    <a href="output/diagram_index.html">📊 Diagrams</a>
                    <a href="example/">📋 Examples</a>
                </div>
                <div class="header">
                    <h1>🚀 C to PlantUML Converter</h1>
                    <p>Website deployment completed on $(date) by GitHub Actions</p>
                </div>
                <div class="content">
                    <h2>Welcome to the C to PlantUML Converter Project</h2>
                    <p>This is a Python tool for converting C/C++ source code to PlantUML diagrams. The website has been deployed with all available content.</p>
                    
                    <div class="card">
                        <h3>📊 Test Coverage & Reports</h3>
                        <p>View comprehensive test coverage reports and execution summaries.</p>
                        <a href="tests/reports/coverage/htmlcov/index.html" class="btn">📊 View Coverage</a>
                        <a href="tests/reports/test_summary.html" class="btn">📝 Test Summary</a>
                    </div>
                    
                    <div class="card">
                        <h3>📊 Generated Diagrams</h3>
                        <p>Browse PlantUML diagrams and PNG images generated from C/C++ code.</p>
                        <a href="output/diagram_index.html" class="btn">📊 View Diagrams</a>
                    </div>
                    
                    <div class="card">
                        <h3>📋 Examples & Documentation</h3>
                        <p>Explore project examples and detailed documentation.</p>
                        <a href="example/" class="btn">📋 Examples</a>
                        <a href="index.md" class="btn">📖 README</a>
                    </div>
                    
                    <div class="card">
                        <h3>🔄 Redeployment Info</h3>
                        <p><strong>Deployment Message:</strong> ${{ github.event.inputs.message || 'Quick website redeploy' }}</p>
                        <p><strong>Triggered by:</strong> ${{ github.event_name }}</p>
                        <p><strong>Repository:</strong> <a href="https://github.com/${{ github.repository }}">${{ github.repository }}</a></p>
                    </div>
                </div>
                <div class="footer">
                    <p>Website redeployed from <a href="https://github.com/${{ github.repository }}">${{ github.repository }}</a></p>
                    <p>For a full deployment with regenerated content, use the "Deploy Website to GitHub Pages" workflow</p>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        echo "✅ Website files prepared for deployment"
        
    - name: 🧹 Clean and validate deployment files
      run: |
        echo "🧹 Cleaning and validating deployment files..."
        
        # Debug: Check what files exist before cleaning
        echo "🔍 Files before cleaning:"
        find docs -type f -exec ls -la {} \;
        echo ""
        
        # Check for symlinks
        SYMLINKS=$(find docs -type l)
        if [ -n "$SYMLINKS" ]; then
          echo "⚠️ Found symlinks:"
          echo "$SYMLINKS"
          find docs -type l -delete
          echo "✅ Symlinks removed"
        else
          echo "✅ No symlinks found"
        fi
        
        # Check for hard links
        HARD_LINKS=$(find docs -type f -links +1)
        if [ -n "$HARD_LINKS" ]; then
          echo "⚠️ Found hard links:"
          echo "$HARD_LINKS"
          find docs -type f -links +1 -exec ls -la {} \;
          echo "🔄 Converting hard links to regular files..."
          find docs -type f -links +1 -exec cp {} {}.tmp \; -exec mv {}.tmp {} \;
        else
          echo "✅ No hard links found"
        fi
        
        # Check file sizes
        echo "📊 File sizes:"
        find docs -type f -exec ls -la {} \; | sort -k5 -nr | head -10
        
        # Check total size
        TOTAL_SIZE=$(du -sb docs | cut -f1)
        echo "📊 Total deployment size: $TOTAL_SIZE bytes ($(echo "scale=2; $TOTAL_SIZE/1024/1024" | bc) MB)"
        
        # Check file count
        FILE_COUNT=$(find docs -type f | wc -l)
        echo "📊 Total files: $FILE_COUNT"
        
        # Check directory structure
        echo "📁 Directory structure:"
        find docs -type d | sort
        
        echo "✅ Deployment files cleaned and validated"
        
    - name: 📋 List deployment files
      run: |
        echo "📋 Files ready for deployment:"
        find docs -type f | sort
        echo ""
        echo "📊 Summary:"
        echo "Total files: $(find docs -type f | wc -l)"
        echo "HTML files: $(find docs -name "*.html" | wc -l)"
        echo "PNG files: $(find docs -name "*.png" | wc -l)"
        echo "PlantUML files: $(find docs -name "*.puml" | wc -l)"
        echo "Markdown files: $(find docs -name "*.md" | wc -l)"
        echo "Output folder files: $(find docs/output -type f | wc -l)"
        echo "Example folder files: $(find docs/example -type f | wc -l)"
        echo "Total size: $(du -sh docs | cut -f1)"
        
    - name: 📤 Upload website files as artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/
        
    - name: 🔍 Debug artifact upload
      run: |
        echo "🔍 Debugging artifact upload..."
        echo "📁 Contents of docs directory:"
        ls -la docs/
        echo ""
        echo "📊 File count in docs: $(find docs -type f | wc -l)"
        echo "📊 Directory count in docs: $(find docs -type d | wc -l)"
        echo "📊 Total size: $(du -sh docs | cut -f1)"
        echo ""
        echo "🔍 Checking for any special files:"
        find docs -type f -exec file {} \; | head -10
        echo ""
        echo "🔍 Checking file permissions:"
        find docs -type f -exec ls -la {} \; | head -10
        echo ""
        echo "🔍 Checking for any hidden files:"
        find docs -name ".*" -type f

    - name: 🚀 Deploy to GitHub Pages
      uses: actions/deploy-pages@v4
        
    - name: 🔍 Debug deployment failure
      if: failure()
      run: |
        echo "🔍 Debugging deployment failure..."
        echo "📊 Checking if artifact exists:"
        ls -la $GITHUB_WORKSPACE/_actions/actions/deploy-pages/v4/
        echo ""
        echo "📊 Checking workflow context:"
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo "Event: ${{ github.event_name }}"
        echo "Actor: ${{ github.actor }}"
        echo ""
        echo "📊 Checking permissions:"
        echo "Contents write: ${{ github.permissions.contents }}"
        echo "Pages write: ${{ github.permissions.pages }}"
        echo "ID token write: ${{ github.permissions.id-token }}"
        
    - name: 🎯 Deployment Summary
      if: always()
      run: |
        echo "## 🚀 Website Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Deployment Completed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "- **Website URL**: https://${{ github.repository_owner }}.github.io/$(echo ${{ github.repository }} | cut -d'/' -f2)" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Message**: ${{ github.event.inputs.message || github.event.inputs.message || 'Website deployment' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📁 Deployed Content" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 Test coverage reports" >> $GITHUB_STEP_SUMMARY
        echo "- 📝 Test execution summaries" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 PlantUML diagrams and PNG images (from output folder)" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 Project examples (from example folder)" >> $GITHUB_STEP_SUMMARY
        echo "- 📖 Project documentation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [🏠 Home Page](https://${{ github.repository_owner }}.github.io/$(echo ${{ github.repository }} | cut -d'/' -f2)/)" >> $GITHUB_STEP_SUMMARY
        echo "- [📊 Coverage Report](https://${{ github.repository_owner }}.github.io/$(echo ${{ github.repository }} | cut -d'/' -f2)/tests/reports/coverage/htmlcov/)" >> $GITHUB_STEP_SUMMARY
        echo "- [📝 Test Summary](https://${{ github.repository_owner }}.github.io/$(echo ${{ github.repository }} | cut -d'/' -f2)/tests/reports/test_summary.html)" >> $GITHUB_STEP_SUMMARY
        echo "- [📊 Diagrams](https://${{ github.repository_owner }}.github.io/$(echo ${{ github.repository }} | cut -d'/' -f2)/output/diagram_index.html)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔄 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Website will be available in a few minutes" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub Pages may take up to 10 minutes to update" >> $GITHUB_STEP_SUMMARY