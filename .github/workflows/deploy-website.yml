name: Deploy Website

on:
  # Manual trigger for deployment
  workflow_dispatch:
    inputs:
      message:
        description: 'Deployment message'
        required: false
        default: 'Website deployment'
        type: string

  # Called by test-coverage workflow
  workflow_call:
    inputs:
      message:
        description: 'Deployment message from calling workflow'
        required: false
        type: string

jobs:
  deploy-website:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      actions: write
    
    concurrency:
      group: "pages"
      cancel-in-progress: false
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN || github.token }}
        
    - name: üîß Install required tools
      run: |
        echo "üîß Installing required tools..."
        sudo apt-get update
        sudo apt-get install -y bc
        
    - name: üèóÔ∏è Prepare website files
      run: |
        echo "üèóÔ∏è Preparing website files for deployment..."
        
        # Create docs directory for GitHub Pages
        mkdir -p docs
        
        # Copy README as index page
        cp README.md docs/index.md
        
        # Copy only essential test report files (HTML reports only)
        if [ -d "tests/reports" ]; then
          mkdir -p docs/tests/reports
          
          # Copy only HTML files from test reports (follow symlinks)
          find tests/reports -name "*.html" -type f -exec cp -L --parents {} docs/ \;
          
          # Copy CSS and JS files for styling (follow symlinks)
          find tests/reports -name "*.css" -o -name "*.js" -type f -exec cp -L --parents {} docs/ \;
          
          # Copy essential text files (but limit size, follow symlinks)
          find tests/reports -name "*.txt" -type f -size -50k -exec cp -L --parents {} docs/ \;
        fi
        
        # Copy only a limited number of output files (PNG and PUML)
        if [ -d "output" ]; then
          mkdir -p docs/output
          
          # Copy only very small PNG files (under 500KB each, follow symlinks)
          find output -name "*.png" -type f -size -500k | head -20 | xargs -I {} cp -L --parents {} docs/
          
          # Copy only small PUML files (under 50KB each, follow symlinks)
          find output -name "*.puml" -type f -size -50k | head -10 | xargs -I {} cp -L --parents {} docs/
        fi
        
        # Copy only very small example files (follow symlinks)
        if [ -d "example" ]; then
          mkdir -p docs/example
          find example -type f -size -50k | head -5 | xargs -I {} cp -L --parents {} docs/
        fi
        
        # Copy specification if it exists
        if [ -f "specification.md" ]; then
          cp specification.md docs/
        fi
        
        # Create a simple index.html
        cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>C to PlantUML Converter</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; margin: 0; padding: 20px; background: #f6f8fa; }
                .container { max-width: 1200px; margin: 0 auto; }
                .header { background: white; padding: 20px; border-radius: 6px; margin-bottom: 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
                .content { background: white; padding: 20px; border-radius: 6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
                .nav { background: #0366d6; color: white; padding: 15px 20px; border-radius: 6px; margin-bottom: 20px; }
                .nav a { color: white; text-decoration: none; margin-right: 20px; font-weight: 500; }
                .nav a:hover { text-decoration: underline; }
                .footer { text-align: center; margin-top: 40px; padding: 20px; color: #586069; }
                .card { background: white; padding: 20px; border-radius: 6px; margin: 10px 0; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
                .card h3 { margin-top: 0; color: #0366d6; }
                .btn { display: inline-block; background: #0366d6; color: white; padding: 10px 20px; text-decoration: none; border-radius: 6px; margin: 5px; }
                .btn:hover { background: #0256b3; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="nav">
                    <a href="index.html">üè† Home</a>
                    <a href="tests/reports/coverage/index.html">üìä Coverage</a>
                    <a href="tests/reports/test_summary.html">üìù Tests</a>
                    <a href="output/">üìä Diagrams</a>
                    <a href="example/">üìã Examples</a>
                </div>
                <div class="header">
                    <h1>üöÄ C to PlantUML Converter</h1>
                    <p>Quick redeploy completed on $(date) by GitHub Actions</p>
                </div>
                <div class="content">
                    <h2>Welcome to the C to PlantUML Converter Project</h2>
                    <p>This is a Python tool for converting C/C++ source code to PlantUML diagrams. The website has been quickly redeployed with the latest content.</p>
                    
                    <div class="card">
                        <h3>üìä Test Coverage & Reports</h3>
                        <p>View comprehensive test coverage reports and execution summaries.</p>
                        <a href="tests/reports/coverage/index.html" class="btn">üìä View Coverage</a>
                        <a href="tests/reports/test_summary.html" class="btn">üìù Test Summary</a>
                    </div>
                    
                    <div class="card">
                        <h3>üìä Generated Diagrams</h3>
                        <p>Browse PlantUML diagrams and PNG images generated from C/C++ code.</p>
                        <a href="output/" class="btn">üìä View Diagrams</a>
                    </div>
                    
                    <div class="card">
                        <h3>üìã Examples & Documentation</h3>
                        <p>Explore project examples and detailed documentation.</p>
                        <a href="example/" class="btn">üìã Examples</a>
                        <a href="index.md" class="btn">üìñ README</a>
                    </div>
                    
                    <div class="card">
                        <h3>üîÑ Redeployment Info</h3>
                        <p><strong>Deployment Message:</strong> ${{ github.event.inputs.message || 'Quick website redeploy' }}</p>
                        <p><strong>Triggered by:</strong> ${{ github.event_name }}</p>
                        <p><strong>Repository:</strong> <a href="https://github.com/${{ github.repository }}">${{ github.repository }}</a></p>
                    </div>
                </div>
                <div class="footer">
                    <p>Website redeployed from <a href="https://github.com/${{ github.repository }}">${{ github.repository }}</a></p>
                    <p>For a full deployment with regenerated content, use the "Deploy Website to GitHub Pages" workflow</p>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        echo "‚úÖ Website files prepared for deployment"
        
    - name: üßπ Clean and validate deployment files
      run: |
        echo "üßπ Cleaning and validating deployment files..."
        
        # Remove any symlinks that might have been created
        find docs -type l -delete
        
        # Remove any files larger than 1MB (strict limit)
        find docs -type f -size +1M -delete
        
        # Remove any hard links by converting them to regular files
        find docs -type f -links +1 -exec cp {} {}.tmp \; -exec mv {}.tmp {} \;
        
        # Check total size
        TOTAL_SIZE=$(du -sb docs | cut -f1)
        echo "üìä Total deployment size: $TOTAL_SIZE bytes ($(echo "scale=2; $TOTAL_SIZE/1024/1024" | bc) MB)"
        
        # If size is still too large, remove more files aggressively
        if [ "$TOTAL_SIZE" -gt 50000000 ]; then  # 50MB limit (much stricter)
          echo "‚ö†Ô∏è Deployment size too large, removing largest files..."
          
          # Remove largest files first
          find docs -type f -exec ls -la {} \; | sort -k5 -nr | head -20 | awk '{print $9}' | xargs rm -f
          
          # Recalculate size
          TOTAL_SIZE=$(du -sb docs | cut -f1)
          echo "üìä New deployment size: $TOTAL_SIZE bytes ($(echo "scale=2; $TOTAL_SIZE/1024/1024" | bc) MB)"
        fi
        
        # Double-check for any remaining symlinks or large files
        SYMLINKS=$(find docs -type l | wc -l)
        LARGE_FILES=$(find docs -type f -size +1M | wc -l)
        
        if [ "$SYMLINKS" -gt 0 ]; then
          echo "‚ö†Ô∏è Found $SYMLINKS symlinks, removing them..."
          find docs -type l -delete
        fi
        
        if [ "$LARGE_FILES" -gt 0 ]; then
          echo "‚ö†Ô∏è Found $LARGE_FILES files larger than 1MB, removing them..."
          find docs -type f -size +1M -delete
        fi
        
        # Ensure we have at least the essential files
        if [ ! -f "docs/index.html" ]; then
          echo "‚ùå Missing essential index.html file"
          exit 1
        fi
        
        echo "‚úÖ Deployment files cleaned and validated"
        
        # If we still have too many files, create a minimal deployment
        TOTAL_FILES=$(find docs -type f | wc -l)
        if [ "$TOTAL_FILES" -gt 100 ]; then
          echo "‚ö†Ô∏è Too many files, creating minimal deployment..."
          
          # Keep only essential files
          mkdir -p docs_minimal
          cp docs/index.html docs_minimal/
          cp docs/index.md docs_minimal/ 2>/dev/null || true
          
          # Keep only a few small files from each directory
          if [ -d "docs/tests/reports" ]; then
            mkdir -p docs_minimal/tests/reports
            find docs/tests/reports -name "*.html" -type f | head -5 | xargs -I {} cp {} docs_minimal/tests/reports/
          fi
          
          if [ -d "docs/output" ]; then
            mkdir -p docs_minimal/output
            find docs/output -name "*.png" -type f -size -100k | head -3 | xargs -I {} cp {} docs_minimal/output/
          fi
          
          # Replace docs with minimal version
          rm -rf docs
          mv docs_minimal docs
          
          echo "‚úÖ Created minimal deployment with $(find docs -type f | wc -l) files"
        fi
        
    - name: üìã List deployment files
      run: |
        echo "üìã Files ready for deployment:"
        find docs -type f | sort
        echo ""
        echo "üìä Summary:"
        echo "Total files: $(find docs -type f | wc -l)"
        echo "HTML files: $(find docs -name "*.html" | wc -l)"
        echo "PNG files: $(find docs -name "*.png" | wc -l)"
        echo "Markdown files: $(find docs -name "*.md" | wc -l)"
        echo "Total size: $(du -sh docs | cut -f1)"
        
    - name: üì§ Upload website files as artifact
      uses: actions/upload-artifact@v4
      with:
        name: github-pages
        path: docs/
        retention-days: 1

    - name: üöÄ Deploy to GitHub Pages
      uses: actions/deploy-pages@v4
      with:
        artifact_name: github-pages
        
    - name: üéØ Deployment Summary
      if: always()
      run: |
        echo "## üöÄ Website Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Deployment Completed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "- **Website URL**: https://${{ github.repository_owner }}.github.io/$(echo ${{ github.repository }} | cut -d'/' -f2)" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Message**: ${{ github.event.inputs.message || github.event.inputs.message || 'Website deployment' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üìÅ Deployed Content" >> $GITHUB_STEP_SUMMARY
        echo "- üìä Test coverage reports" >> $GITHUB_STEP_SUMMARY
        echo "- üìù Test execution summaries" >> $GITHUB_STEP_SUMMARY
        echo "- üìä PlantUML diagrams and PNG images" >> $GITHUB_STEP_SUMMARY
        echo "- üìã Project examples" >> $GITHUB_STEP_SUMMARY
        echo "- üìñ Project documentation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [üè† Home Page](https://${{ github.repository_owner }}.github.io/$(echo ${{ github.repository }} | cut -d'/' -f2)/)" >> $GITHUB_STEP_SUMMARY
        echo "- [üìä Coverage Report](https://${{ github.repository_owner }}.github.io/$(echo ${{ github.repository }} | cut -d'/' -f2)/tests/reports/coverage/)" >> $GITHUB_STEP_SUMMARY
        echo "- [üìù Test Summary](https://${{ github.repository_owner }}.github.io/$(echo ${{ github.repository }} | cut -d'/' -f2)/tests/reports/test_summary.html)" >> $GITHUB_STEP_SUMMARY
        echo "- [üìä Diagrams](https://${{ github.repository_owner }}.github.io/$(echo ${{ github.repository }} | cut -d'/' -f2)/output/)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### üîÑ Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Website will be available in a few minutes" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub Pages may take up to 10 minutes to update" >> $GITHUB_STEP_SUMMARY