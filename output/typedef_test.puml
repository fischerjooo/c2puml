@startuml typedef_test

class "typedef_test" as TYPEDEF_TEST <<source>> #LightBlue
{
-- Global Variables --
- MyLen global_length
- MyBuffer global_buffer
- MyComplexPtr global_complex
-- Functions --
void log_buffer(const MyBuffer * buffer)
MyInt process_buffer(MyBuffer * buffer)
int my_callback(MyBuffer * buffer)
MyComplex * create_complex(MyLen id, MyString name)
int main()
}

class "typedef_test" as HEADER_TYPEDEF_TEST <<header>> #LightGreen
{
-- Macros --
+ #define TYPEDEF_TEST_H
}
class "complex_example" as HEADER_COMPLEX_EXAMPLE <<header>> #LightGreen
{
-- Macros --
+ #define COMPLEX_EXAMPLE_H
}
class "geometry" as HEADER_GEOMETRY <<header>> #LightGreen
{
-- Macros --
+ #define GEOMETRY_H
-- Functions --
+ triangle_t create_triangle(const point_t * a, const point_t * b, const point_t * c, const char * label);
+ int triangle_area(const triangle_t * tri);
}
class "logger" as HEADER_LOGGER <<header>> #LightGreen
{
-- Macros --
+ #define LOGGER_H
-- Functions --
+ void set_log_callback(log_callback_t cb);
+ void log_message(log_level_t level, const char * fmt, ...);
}
class "stdlib.h" as HEADER_STDLIB <<header>> #LightGray
{
}

class "sample" as HEADER_SAMPLE <<header>> #LightGreen
{
-- Macros --
+ #define SAMPLE_H
+ #define PI
+ #define VERSION
+ #define MIN(a, b)
+ #define MAX(a, b)
-- Global Variables --
+ int MAX_POINTS
+ char * DEFAULT_LABEL
-- Functions --
+ extern int calculate_sum(int a, int b);
+ extern point_t * create_point(int x, int y, const char * label);
+ extern void process_point(point_t * p);
}
class "config" as HEADER_CONFIG <<header>> #LightGreen
{
-- Macros --
+ #define CONFIG_H
+ #define PROJECT_NAME
+ #define MAX_LABEL_LEN
+ #define DEFAULT_BUFFER_SIZE
}
class "stdint.h" as HEADER_STDINT <<header>> #LightGray
{
}

class "math_utils" as HEADER_MATH_UTILS <<header>> #LightGreen
{
-- Macros --
+ #define MATH_UTILS_H
-- Functions --
+ int add(int a, int b);
+ int subtract(int a, int b);
+ real_t average(const int * arr, size_t len);
}
class "stdio.h" as HEADER_STDIO <<header>> #LightGray
{
}

class "MyLen" as TYPEDEF_MyLen <<typedef>> #LightYellow
{
+ uint32_t
}

class "MyInt" as TYPEDEF_MyInt <<typedef>> #LightYellow
{
+ int32_t
}

class "MyString" as TYPEDEF_MyString <<typedef>> #LightYellow
{
+ char *
}

class "MyBuffer" as TYPEDEF_MyBuffer <<typedef>> #LightYellow
{
+ MyLen length
+ MyString data
}

class "MyCallback" as TYPEDEF_MyCallback <<typedef>> #LightYellow
{
+ int ( * MyCallback ) ( MyBuffer * buffer )
}

class "MyComplex" as TYPEDEF_MyComplex <<typedef>> #LightYellow
{
+ MyLen id
+ MyString name
+ MyCallback callback
+ log_level_t log_level
}

class "MyComplexPtr" as TYPEDEF_MyComplexPtr <<typedef>> #LightYellow
{
+ MyComplex *
}

enum "Color_t" as TYPEDEF_Color_t <<typedef>> #LightYellow
{
COLOR_RED = 0
COLOR_GREEN
COLOR_BLUE
}

enum "Status_t" as TYPEDEF_Status_t <<typedef>> #LightYellow
{
STATUS_OK = 0
STATUS_FAIL
}

class "Point_t" as TYPEDEF_Point_t <<typedef>> #LightYellow
{
+ struct
}

class "NamedStruct_t" as TYPEDEF_NamedStruct_t <<typedef>> #LightYellow
{
+ int a
+ int b
}

class "Number_t" as TYPEDEF_Number_t <<typedef>> #LightYellow
{
+ int i
+ float f
}

class "NamedUnion_t" as TYPEDEF_NamedUnion_t <<typedef>> #LightYellow
{
+ char c
+ double d
}

class "MyComplexArray" as TYPEDEF_MyComplexArray <<typedef>> #LightYellow
{
+ MyComplexPtr MyComplexArray [ 10 ]
}

class "point_t" as TYPEDEF_point_t <<typedef>> #LightYellow
{
+ int x
+ int y
+ char 32[ ] label
}

enum "system_state_t" as TYPEDEF_system_state_t <<typedef>> #LightYellow
{
STATE_IDLE = 0
STATE_RUNNING
STATE_ERROR
}

class "id_t" as TYPEDEF_id_t <<typedef>> #LightYellow
{
+ uint32_t
}

class "status_t" as TYPEDEF_status_t <<typedef>> #LightYellow
{
+ int32_t
}

enum "log_level_t" as TYPEDEF_log_level_t <<typedef>> #LightYellow
{
LOG_DEBUG = 0
LOG_INFO
LOG_WARN
LOG_ERROR
}

class "log_callback_t" as TYPEDEF_log_callback_t <<typedef>> #LightYellow
{
+ void ( * log_callback_t ) ( log_level_t level , const char * message )
}

class "NestedInfo_t" as TYPEDEF_NestedInfo_t <<typedef>> #LightYellow
{
+ id_t id
+ char MAX_LABEL_LEN[ ] description
+ log_level_t log_level
}

enum "CE_Status_t" as TYPEDEF_CE_Status_t <<typedef>> #LightYellow
{
CE_STATUS_OK = 0
CE_STATUS_WARN
CE_STATUS_FAIL
}

class "ComplexExample_t" as TYPEDEF_ComplexExample_t <<typedef>> #LightYellow
{
+ NestedInfo_t info
+ CE_Status_t status
+ int 5[ ] values
}

class "triangle_t" as TYPEDEF_triangle_t <<typedef>> #LightYellow
{
+ point_t 3[ ] vertices
+ char MAX_LABEL_LEN[ ] label
}

class "real_t" as TYPEDEF_real_t <<typedef>> #LightYellow
{
+ double
}

class "math_op_t" as TYPEDEF_math_op_t <<typedef>> #LightYellow
{
+ int ( * math_op_t ) ( int , int )
}

TYPEDEF_TEST --> HEADER_TYPEDEF_TEST : <<include>>
TYPEDEF_TEST --> HEADER_COMPLEX_EXAMPLE : <<include>>
TYPEDEF_TEST --> HEADER_GEOMETRY : <<include>>
TYPEDEF_TEST --> HEADER_LOGGER : <<include>>
TYPEDEF_TEST --> HEADER_STDLIB : <<include>>
HEADER_TYPEDEF_TEST --> HEADER_STDINT : <<include>>
HEADER_TYPEDEF_TEST --> HEADER_SAMPLE : <<include>>
HEADER_TYPEDEF_TEST --> HEADER_CONFIG : <<include>>
HEADER_COMPLEX_EXAMPLE --> HEADER_CONFIG : <<include>>
HEADER_COMPLEX_EXAMPLE --> HEADER_LOGGER : <<include>>
HEADER_GEOMETRY --> HEADER_SAMPLE : <<include>>
HEADER_GEOMETRY --> HEADER_MATH_UTILS : <<include>>
HEADER_LOGGER --> HEADER_STDIO : <<include>>
HEADER_LOGGER --> HEADER_CONFIG : <<include>>
HEADER_CONFIG --> HEADER_STDINT : <<include>>
HEADER_MATH_UTILS --> HEADER_CONFIG : <<include>>
HEADER_SAMPLE --> HEADER_CONFIG : <<include>>
HEADER_SAMPLE --> HEADER_GEOMETRY : <<include>>
HEADER_SAMPLE --> HEADER_LOGGER : <<include>>
HEADER_TYPEDEF_TEST ..> TYPEDEF_MyBuffer : <<declares>>
HEADER_TYPEDEF_TEST ..> TYPEDEF_MyComplex : <<declares>>
HEADER_TYPEDEF_TEST ..> TYPEDEF_Color_t : <<declares>>
HEADER_TYPEDEF_TEST ..> TYPEDEF_Status_t : <<declares>>
HEADER_TYPEDEF_TEST ..> TYPEDEF_Point_t : <<declares>>
HEADER_TYPEDEF_TEST ..> TYPEDEF_NamedStruct_t : <<declares>>
HEADER_TYPEDEF_TEST ..> TYPEDEF_Number_t : <<declares>>
HEADER_TYPEDEF_TEST ..> TYPEDEF_NamedUnion_t : <<declares>>
HEADER_COMPLEX_EXAMPLE ..> TYPEDEF_NestedInfo_t : <<declares>>
HEADER_COMPLEX_EXAMPLE ..> TYPEDEF_CE_Status_t : <<declares>>
HEADER_COMPLEX_EXAMPLE ..> TYPEDEF_ComplexExample_t : <<declares>>
HEADER_GEOMETRY ..> TYPEDEF_triangle_t : <<declares>>
HEADER_LOGGER ..> TYPEDEF_log_level_t : <<declares>>
TYPEDEF_MyBuffer ..> TYPEDEF_MyLen : <<uses>>
TYPEDEF_MyBuffer ..> TYPEDEF_MyString : <<uses>>
TYPEDEF_MyComplex ..> TYPEDEF_MyLen : <<uses>>
TYPEDEF_MyComplex ..> TYPEDEF_MyString : <<uses>>
TYPEDEF_MyComplex ..> TYPEDEF_MyCallback : <<uses>>
TYPEDEF_MyComplex ..> TYPEDEF_log_level_t : <<uses>>
TYPEDEF_MyCallback ..> TYPEDEF_MyBuffer : <<uses>>
TYPEDEF_MyComplexPtr ..> TYPEDEF_MyComplex : <<uses>>
TYPEDEF_MyComplexArray ..> TYPEDEF_MyComplexPtr : <<uses>>
TYPEDEF_triangle_t ..> TYPEDEF_point_t : <<uses>>
TYPEDEF_log_callback_t ..> TYPEDEF_log_level_t : <<uses>>
TYPEDEF_NestedInfo_t ..> TYPEDEF_id_t : <<uses>>
TYPEDEF_NestedInfo_t ..> TYPEDEF_log_level_t : <<uses>>
TYPEDEF_ComplexExample_t ..> TYPEDEF_NestedInfo_t : <<uses>>
TYPEDEF_ComplexExample_t ..> TYPEDEF_CE_Status_t : <<uses>>
HEADER_TYPEDEF_TEST ..> TYPEDEF_MyLen : <<declares>>
HEADER_TYPEDEF_TEST ..> TYPEDEF_MyInt : <<declares>>
HEADER_TYPEDEF_TEST ..> TYPEDEF_MyString : <<declares>>
HEADER_TYPEDEF_TEST ..> TYPEDEF_MyCallback : <<declares>>
HEADER_TYPEDEF_TEST ..> TYPEDEF_MyComplexPtr : <<declares>>
HEADER_TYPEDEF_TEST ..> TYPEDEF_MyComplexArray : <<declares>>
HEADER_LOGGER ..> TYPEDEF_log_callback_t : <<declares>>

@enduml