@startuml complex

class "complex" as COMPLEX <<source>> #LightBlue
{
    -- Global Variables --
    Process_Cfg_Process_acpfct_t Process_Cfg_Process_acpfct
    math_operation_t global_math_ops [ 10 ]
    -- Functions --
    static Std_ReturnType ProcessorAdapter_Process(const Process_T * job_pst)
    static Std_ReturnType ProcessorHardware_Process(const Process_T * job_pst)
    static Std_ReturnType ProcessorService_Process(const Process_T * job_pst)
    static int add_operation(int a, int b)
    complex_handler_t * create_complex_handler(const char * name, ...)
    void * create_handler(const char * name, int ( * init_func ) ( void * ) init_func, ...)
    static int divide_operation(int a, int b)
    int execute_operations(int value, math_ops_array_t ops, int op_count)
    math_operation_t * get_math_operations()
    static void init_math_operations()
    static int modulo_operation(int a, int b)
    static int multiply_operation(int a, int b)
    static void print_result(int * data, int size)
    int process_with_callbacks(int data [ ], int size, math_operation_t operations [ ], ...)
    void run_complex_tests()
    static int subtract_operation(int a, int b)
    static int test_callback(int * item)
    void test_complex_macro(int * x, int y, int z)
    void test_handle_operation(operation_type_t op_type, int * data, int size)
    void test_handler_table()
    void test_mixed_union()
    void test_operation_set()
    void test_process_array(int * arr, int size)
    void test_processor_job_processing()
    void test_processor_utility_macros()
    void test_stringify_macro()
}

class "complex" as HEADER_COMPLEX <<header>> #LightGreen
{
    -- Macros --
    + #define COMPLEX_H
    + #define COMPLEX_MACRO_FUNC(x, y, z)
    + #define CREATE_FUNC_NAME(prefix, suffix)
    + #define DEPRECATED
    + #define DEPRECATED
    + #define HANDLE_OPERATION(op_type, data, size, callback)
    + #define PROCESS_ARRAY(arr, size, callback)
    + #define STRINGIFY(x)
    + #define TOSTRING(x)
    + #define UTILS_U16_TO_U8ARR_BIG_ENDIAN(value_u16, ptr_pau8)
    + #define UTILS_U32_TO_U8ARR_BIG_ENDIAN(value_u32, ptr_pau8)
    + #define UTILS_U8ARR_TO_U16_BIG_ENDIAN(ptr_pau8)
    + #define UTILS_U8ARR_TO_U32_BIG_ENDIAN(ptr_pau8)
    -- Functions --
    + complex_handler_t * create_complex_handler(const char * name, ...)
    + void * create_handler(const char * name, int ( * init_func ) ( void * ) init_func, ...)
    + int execute_operations(int value, math_ops_array_t ops, int op_count unnamed)
    + math_operation_t * get_math_operations()
    + int process_with_callbacks(int data [ ], int size, math_operation_t operations [ ], ...)
    + void test_processor_job_processing()
    + void test_processor_utility_macros()
}

class "Process_T" as TYPEDEF_PROCESS_T <<typedef>> #LightYellow
{
    + size_t data_size
    + char * job_data
    + int job_id
    + int priority
}

class "__anonymous_struct__" as TYPEDEF___ANONYMOUS_STRUCT__ <<typedef>> #LightYellow
{
    + void * ( * alloc_func ) ( size_t )
    + void ( * free_func ) ( void * )
    + int ( * resize_func ) ( void * * , size_t )
    + int max_size
}

class "complex_handler_t" as TYPEDEF_COMPLEX_HANDLER_T <<typedef>> #LightYellow
{
    + int ( * validate_func ) ( const char * )
    + void ( * format_func ) ( char * , int )
    + int id
    + struct { char[32] } name
}

class "data_item_t" as TYPEDEF_DATA_ITEM_T <<typedef>> #LightYellow
{
    + char * name
    + int value
}

class "handler_entry_t" as TYPEDEF_HANDLER_ENTRY_T <<typedef>> #LightYellow
{
    + void ( * init_func ) ( void )
    + int ( * process_func ) ( int , int )
    + void ( * cleanup_func ) ( void )
    + int id
    + char[16] name
}

class "operation_set_t" as TYPEDEF_OPERATION_SET_T <<typedef>> #LightYellow
{
    + void ( * callbacks [ 3 ] ) ( int , char * )
    + int count
    + math_operation_t[5] operations
}

class "param4" as TYPEDEF_PARAM4 <<typedef>> #LightYellow
{
    + void ( * nested_func ) ( int )
    + int nested1
    + char * nested2
}

class "processor_t" as TYPEDEF_PROCESSOR_T <<typedef>> #LightYellow
{
    + int ( * process_func ) ( int , char * )
    + void ( * cleanup_func ) ( void * )
    + int id
    + char[64] name
}

class "operation_type_t" as TYPEDEF_OPERATION_TYPE_T <<typedef>> #LightYellow
{
    + OP_ADD = 0
    + OP_DIV = 3
    + OP_MUL = 2
    + OP_SUB = 1
}

class "processor_module_enum_t" as TYPEDEF_PROCESSOR_MODULE_ENUM_T <<typedef>> #LightYellow
{
    + PROCESSOR_CFG_MODULE_ADAPTER = 0
    + PROCESSOR_CFG_MODULE_COUNT = 3
    + PROCESSOR_CFG_MODULE_HARDWARE = 2
    + PROCESSOR_CFG_MODULE_SERVICE = 1
}

class "Process_Cfg_Process_acpfct_t" as TYPEDEF_PROCESS_CFG_PROCESS_ACPFCT_T <<typedef>> #LightYellow
{
    + Process_Cfg_Process_fct Process_Cfg_Process_acpfct_t[PROCESSOR_CFG_MODULE_COUNT]
}

class "Process_Cfg_Process_fct" as TYPEDEF_PROCESS_CFG_PROCESS_FCT <<typedef>> #LightYellow
{
    + Std_ReturnType(* Process_Cfg_Process_fct)(const Process_T * job_pst)
}

class "Std_ReturnType" as TYPEDEF_STD_RETURNTYPE <<typedef>> #LightYellow
{
    + int
}

class "complex_callback_t" as TYPEDEF_COMPLEX_CALLBACK_T <<typedef>> #LightYellow
{
    + int(* complex_callback_t)(...)
}

class "complex_func_ptr_t" as TYPEDEF_COMPLEX_FUNC_PTR_T <<typedef>> #LightYellow
{
    + int ( * ( * complex_func_ptr_t ) ( int , char * ) ) ( double , void * )
}

class "data_processor_array_t" as TYPEDEF_DATA_PROCESSOR_ARRAY_T <<typedef>> #LightYellow
{
    + data_processor_t *
}

class "data_processor_t" as TYPEDEF_DATA_PROCESSOR_T <<typedef>> #LightYellow
{
    + int(* data_processor_t)(data_item_t * item , void * context)
}

class "debug_callback_t" as TYPEDEF_DEBUG_CALLBACK_T <<typedef>> #LightYellow
{
    + void(* debug_callback_t)(const char * message , int level)
}

class "handler_table_t" as TYPEDEF_HANDLER_TABLE_T <<typedef>> #LightYellow
{
    + handler_entry_t handler_table_t[8]
}

class "math_operation_t" as TYPEDEF_MATH_OPERATION_T <<typedef>> #LightYellow
{
    + int(* math_operation_t)(int , int)
}

class "math_ops_array_t" as TYPEDEF_MATH_OPS_ARRAY_T <<typedef>> #LightYellow
{
    + math_operation_t math_ops_array_t[10]
}

class "release_callback_t" as TYPEDEF_RELEASE_CALLBACK_T <<typedef>> #LightYellow
{
    + void(* release_callback_t)(const char * message)
}

class "uint16" as TYPEDEF_UINT16 <<typedef>> #LightYellow
{
    + uint16_t
}

class "uint32" as TYPEDEF_UINT32 <<typedef>> #LightYellow
{
    + uint32_t
}

class "uint8" as TYPEDEF_UINT8 <<typedef>> #LightYellow
{
    + uint8_t
}

class "mixed_union_t" as TYPEDEF_MIXED_UNION_T <<typedef>> #LightYellow
{
    + void ( * void_func ) ( void )
    + int ( * int_func ) ( int )
    + int int_val
    + char * str_val
}


' Include relationships
COMPLEX --> HEADER_COMPLEX : <<include>>

' Declaration relationships
HEADER_COMPLEX ..> TYPEDEF_PROCESS_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF___ANONYMOUS_STRUCT__ : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_COMPLEX_HANDLER_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_DATA_ITEM_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_HANDLER_ENTRY_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_OPERATION_SET_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_PARAM4 : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_PROCESSOR_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_OPERATION_TYPE_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_PROCESSOR_MODULE_ENUM_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_PROCESS_CFG_PROCESS_ACPFCT_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_PROCESS_CFG_PROCESS_FCT : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_STD_RETURNTYPE : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_COMPLEX_CALLBACK_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_COMPLEX_FUNC_PTR_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_DATA_PROCESSOR_ARRAY_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_DATA_PROCESSOR_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_DEBUG_CALLBACK_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_HANDLER_TABLE_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_MATH_OPERATION_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_MATH_OPS_ARRAY_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_RELEASE_CALLBACK_T : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_UINT16 : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_UINT32 : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_UINT8 : <<declares>>
HEADER_COMPLEX ..> TYPEDEF_MIXED_UNION_T : <<declares>>

' Uses relationships
TYPEDEF_OPERATION_SET_T ..> TYPEDEF_MATH_OPERATION_T : <<uses>>
TYPEDEF_PROCESS_CFG_PROCESS_ACPFCT_T ..> TYPEDEF_PROCESS_CFG_PROCESS_FCT : <<uses>>
TYPEDEF_PROCESS_CFG_PROCESS_FCT ..> TYPEDEF_PROCESS_T : <<uses>>
TYPEDEF_PROCESS_CFG_PROCESS_FCT ..> TYPEDEF_STD_RETURNTYPE : <<uses>>
TYPEDEF_DATA_PROCESSOR_ARRAY_T ..> TYPEDEF_DATA_PROCESSOR_T : <<uses>>
TYPEDEF_DATA_PROCESSOR_T ..> TYPEDEF_DATA_ITEM_T : <<uses>>
TYPEDEF_HANDLER_TABLE_T ..> TYPEDEF_HANDLER_ENTRY_T : <<uses>>
TYPEDEF_MATH_OPS_ARRAY_T ..> TYPEDEF_MATH_OPERATION_T : <<uses>>

@enduml