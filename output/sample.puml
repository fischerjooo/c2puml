@startuml sample

class "sample" as SAMPLE <<source>> #LightBlue
{
-- Macros --
- #define MAX_SIZE
- #define DEBUG_MODE
- #define CALC(x, y)
-- Global Variables --
- int global_counter
- char buffer
- double * global_ptr
-- Functions --
int calculate_sum(int a, int b)
point_t * create_point(int x, int y, const char * label)
void process_point(point_t * p)
void demo_triangle_usage()
int main()
}

class "stdio.h" as HEADER_STDIO <<header>> #LightGray
{
}

class "stdlib.h" as HEADER_STDLIB <<header>> #LightGray
{
}

class "string.h" as HEADER_STRING <<header>> #LightGray
{
}

class "sample" as HEADER_SAMPLE <<header>> #LightGreen
{
-- Macros --
+ #define SAMPLE_H
+ #define PI
+ #define VERSION
+ #define MIN(a, b)
+ #define MAX(a, b)
-- Global Variables --
+ int MAX_POINTS
+ char * DEFAULT_LABEL
-- Functions --
+ extern int calculate_sum(int a, int b);
+ extern point_t * create_point(int x, int y, const char * label);
+ extern void process_point(point_t * p);
}
class "math_utils" as HEADER_MATH_UTILS <<header>> #LightGreen
{
-- Macros --
+ #define MATH_UTILS_H
-- Functions --
+ int add(int a, int b);
+ int subtract(int a, int b);
+ real_t average(const int * arr, size_t len);
}
class "logger" as HEADER_LOGGER <<header>> #LightGreen
{
-- Macros --
+ #define LOGGER_H
-- Functions --
+ void set_log_callback(log_callback_t cb);
+ void log_message(log_level_t level, const char * fmt, ...);
}
class "geometry" as HEADER_GEOMETRY <<header>> #LightGreen
{
-- Macros --
+ #define GEOMETRY_H
-- Functions --
+ triangle_t create_triangle(const point_t * a, const point_t * b, const point_t * c, const char * label);
+ int triangle_area(const triangle_t * tri);
}
class "config" as HEADER_CONFIG <<header>> #LightGreen
{
-- Macros --
+ #define CONFIG_H
+ #define PROJECT_NAME
+ #define MAX_LABEL_LEN
+ #define DEFAULT_BUFFER_SIZE
}
class "stddef.h" as HEADER_STDDEF <<header>> #LightGray
{
}

class "point_t" as TYPEDEF_point_t <<typedef>> #LightYellow
{
+ int x
+ int y
+ char 32[ ] label
}

enum "system_state_t" as TYPEDEF_system_state_t <<typedef>> #LightYellow
{
STATE_IDLE = 0
STATE_RUNNING
STATE_ERROR
}

class "id_t" as TYPEDEF_id_t <<typedef>> #LightYellow
{
+ uint32_t
}

class "status_t" as TYPEDEF_status_t <<typedef>> #LightYellow
{
+ int32_t
}

class "triangle_t" as TYPEDEF_triangle_t <<typedef>> #LightYellow
{
+ point_t 3[ ] vertices
+ char MAX_LABEL_LEN[ ] label
}

enum "log_level_t" as TYPEDEF_log_level_t <<typedef>> #LightYellow
{
LOG_DEBUG = 0
LOG_INFO
LOG_WARN
LOG_ERROR
}

class "log_callback_t" as TYPEDEF_log_callback_t <<typedef>> #LightYellow
{
+ void ( * log_callback_t ) ( log_level_t level , const char * message )
}

class "real_t" as TYPEDEF_real_t <<typedef>> #LightYellow
{
+ double
}

class "math_op_t" as TYPEDEF_math_op_t <<typedef>> #LightYellow
{
+ int ( * math_op_t ) ( int , int )
}

SAMPLE --> HEADER_STDIO : <<include>>
SAMPLE --> HEADER_STDLIB : <<include>>
SAMPLE --> HEADER_STRING : <<include>>
SAMPLE --> HEADER_SAMPLE : <<include>>
SAMPLE --> HEADER_MATH_UTILS : <<include>>
SAMPLE --> HEADER_LOGGER : <<include>>
SAMPLE --> HEADER_GEOMETRY : <<include>>
HEADER_SAMPLE --> HEADER_STDDEF : <<include>>
HEADER_SAMPLE --> HEADER_CONFIG : <<include>>
HEADER_MATH_UTILS --> HEADER_CONFIG : <<include>>
HEADER_LOGGER --> HEADER_STDIO : <<include>>
HEADER_LOGGER --> HEADER_CONFIG : <<include>>
HEADER_GEOMETRY --> HEADER_SAMPLE : <<include>>
HEADER_GEOMETRY --> HEADER_MATH_UTILS : <<include>>
HEADER_CONFIG --> HEADER_STDDEF : <<include>>
HEADER_SAMPLE ..> TYPEDEF_point_t : <<declares>>
HEADER_SAMPLE ..> TYPEDEF_system_state_t : <<declares>>
HEADER_LOGGER ..> TYPEDEF_log_level_t : <<declares>>
HEADER_GEOMETRY ..> TYPEDEF_triangle_t : <<declares>>
TYPEDEF_triangle_t ..> TYPEDEF_point_t : <<uses>>
TYPEDEF_log_callback_t ..> TYPEDEF_log_level_t : <<uses>>
HEADER_MATH_UTILS ..> TYPEDEF_real_t : <<declares>>
HEADER_MATH_UTILS ..> TYPEDEF_math_op_t : <<declares>>
HEADER_LOGGER ..> TYPEDEF_log_callback_t : <<declares>>

@enduml