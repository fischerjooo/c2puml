@startuml sample

class "sample" as SAMPLE <<source>> #LightBlue
{
    -- Macros --
    - #define MAX_SIZE
    - #define DEBUG_MODE
    - #define CALC
    -- Global Variables --
    int = 0 global_counter
    char buffer
    double * = NULL global_ptr
    -- Functions --
    int calculate_sum(int a, int b)
    point_t * create_point(int x, int y, const char * label)
    void process_point(point_t * p)
    void demo_triangle_usage()
    int main()
    return CALC()
}

class "stdio.h" as HEADER_STDIO_H <<header>> #LightGray
{
}

class "stdlib.h" as HEADER_STDLIB_H <<header>> #LightGray
{
}

class "string.h" as HEADER_STRING_H <<header>> #LightGray
{
}

class "sample" as HEADER_SAMPLE <<header>> #LightGreen
{
    -- Macros --
    + #define SAMPLE_H
    + #define PI
    + #define VERSION
    + #define MIN
    + #define MAX
    -- Global Variables --
    + int x
    + int y
    + char label
    + extern const int MAX_POINTS
    + extern const char * DEFAULT_LABEL
    -- Functions --
    + extern int calculate_sum(int a, int b)
    + extern point_t * create_point(int x, int y, const char * label)
    + extern void process_point(point_t * p)
    -- Struct Fields --
    + int x
    + int y
    + char[32] label
}

class "math_utils" as HEADER_MATH_UTILS <<header>> #LightGreen
{
    -- Macros --
    + #define MATH_UTILS_H
    -- Functions --
    + int add(int a, int b)
    + int subtract(int a, int b)
    + real_t average(const int * arr, size_t len)
}

class "logger" as HEADER_LOGGER <<header>> #LightGreen
{
    -- Macros --
    + #define LOGGER_H
    -- Functions --
    + void set_log_callback(log_callback_t cb)
    + void log_message(log_level_t level, const char * fmt)
}

class "geometry" as HEADER_GEOMETRY <<header>> #LightGreen
{
    -- Macros --
    + #define GEOMETRY_H
    -- Global Variables --
    + point_t vertices
    + char label
    -- Functions --
    + triangle_t create_triangle(const point_t * a, const point_t * b, const point_t * c, const char * label)
    + int triangle_area(const triangle_t * tri)
    -- Struct Fields --
    + point_t[3] vertices
    + char[MAX_LABEL_LEN] label
}

class "config" as HEADER_CONFIG <<header>> #LightGreen
{
    -- Macros --
    + #define CONFIG_H
    + #define PROJECT_NAME
    + #define MAX_LABEL_LEN
    + #define DEFAULT_BUFFER_SIZE
}

class "stddef.h" as HEADER_STDDEF_H <<header>> #LightGray
{
}

class "point_t" as TYPEDEF_POINT_T <<typedef>> #LightYellow
{
    + int x
    + int y
    + char[32] label
}

class "system_state_t" as TYPEDEF_SYSTEM_STATE_T <<typedef>> #LightYellow
{
    + STATE_IDLE = 0
    + STATE_RUNNING
    + STATE_ERROR
}

class "triangle_t" as TYPEDEF_TRIANGLE_T <<typedef>> #LightYellow
{
    + point_t[3] vertices
    + char[MAX_LABEL_LEN] label
}

class "log_level_t" as TYPEDEF_LOG_LEVEL_T <<typedef>> #LightYellow
{
    + LOG_DEBUG = 0
    + LOG_INFO
    + LOG_WARN
    + LOG_ERROR
}

SAMPLE --> HEADER_STDIO_H : <<include>>
SAMPLE --> HEADER_STDLIB_H : <<include>>
SAMPLE --> HEADER_STRING_H : <<include>>
SAMPLE --> HEADER_SAMPLE : <<include>>
SAMPLE --> HEADER_MATH_UTILS : <<include>>
SAMPLE --> HEADER_LOGGER : <<include>>
SAMPLE --> HEADER_GEOMETRY : <<include>>
HEADER_SAMPLE --> HEADER_STDDEF_H : <<include>>
HEADER_SAMPLE --> HEADER_CONFIG : <<include>>
HEADER_MATH_UTILS --> HEADER_CONFIG : <<include>>
HEADER_LOGGER --> HEADER_STDIO_H : <<include>>
HEADER_LOGGER --> HEADER_CONFIG : <<include>>
HEADER_GEOMETRY --> HEADER_SAMPLE : <<include>>
HEADER_GEOMETRY --> HEADER_MATH_UTILS : <<include>>
HEADER_CONFIG --> HEADER_STDDEF_H : <<include>>
HEADER_SAMPLE ..> TYPEDEF_POINT_T : declares
HEADER_SAMPLE ..> TYPEDEF_SYSTEM_STATE_T : declares
HEADER_LOGGER ..> TYPEDEF_LOG_LEVEL_T : declares
HEADER_GEOMETRY ..> TYPEDEF_TRIANGLE_T : declares

@enduml