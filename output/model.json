{
  "files": {
    "complex.c": {
      "aliases": {},
      "encoding_used": "utf-8",
      "enums": {},
      "file_path": "/workspace/example/source/complex.c",
      "functions": [
        {
          "is_declaration": false,
          "is_static": false,
          "name": "ProcessorAdapter_Process",
          "parameters": [
            {
              "name": "job_pst",
              "type": "const Process_T *",
              "value": null
            }
          ],
          "return_type": "static Std_ReturnType"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "ProcessorHardware_Process",
          "parameters": [
            {
              "name": "job_pst",
              "type": "const Process_T *",
              "value": null
            }
          ],
          "return_type": "static Std_ReturnType"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "ProcessorService_Process",
          "parameters": [
            {
              "name": "job_pst",
              "type": "const Process_T *",
              "value": null
            }
          ],
          "return_type": "static Std_ReturnType"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "add_operation",
          "parameters": [
            {
              "name": "a",
              "type": "int",
              "value": null
            },
            {
              "name": "b",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "static int"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "create_complex_handler",
          "parameters": [
            {
              "name": "name",
              "type": "const char *",
              "value": null
            },
            {
              "name": "validate_func",
              "type": "int ( * validate_func ) ( const char * )",
              "value": null
            },
            {
              "name": "alloc_func",
              "type": "void * ( * alloc_func ) ( size_t )",
              "value": null
            },
            {
              "name": "free_func",
              "type": "void ( * free_func ) ( void * )",
              "value": null
            }
          ],
          "return_type": "complex_handler_t *"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "create_handler",
          "parameters": [
            {
              "name": "name",
              "type": "const char *",
              "value": null
            },
            {
              "name": "init_func",
              "type": "int ( * init_func ) ( void * )",
              "value": null
            },
            {
              "name": "cleanup_func",
              "type": "void ( * cleanup_func ) ( void * )",
              "value": null
            },
            {
              "name": "unnamed",
              "type": "complex_callback_t callback",
              "value": null
            }
          ],
          "return_type": "void *"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "divide_operation",
          "parameters": [
            {
              "name": "a",
              "type": "int",
              "value": null
            },
            {
              "name": "b",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "static int"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "execute_operations",
          "parameters": [
            {
              "name": "value",
              "type": "int",
              "value": null
            },
            {
              "name": "ops",
              "type": "math_ops_array_t",
              "value": null
            },
            {
              "name": "op_count",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "int"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "get_math_operations",
          "parameters": [],
          "return_type": "math_operation_t *"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "init_math_operations",
          "parameters": [],
          "return_type": "static void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "modulo_operation",
          "parameters": [
            {
              "name": "a",
              "type": "int",
              "value": null
            },
            {
              "name": "b",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "static int"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "multiply_operation",
          "parameters": [
            {
              "name": "a",
              "type": "int",
              "value": null
            },
            {
              "name": "b",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "static int"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "print_result",
          "parameters": [
            {
              "name": "data",
              "type": "int *",
              "value": null
            },
            {
              "name": "size",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "static void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "process_with_callbacks",
          "parameters": [
            {
              "name": "]",
              "type": "int data [",
              "value": null
            },
            {
              "name": "size",
              "type": "int",
              "value": null
            },
            {
              "name": "]",
              "type": "math_operation_t operations [",
              "value": null
            },
            {
              "name": "op_count",
              "type": "int",
              "value": null
            },
            {
              "name": "*",
              "type": "void ( * pre_process ) ( int",
              "value": null
            },
            {
              "name": ")",
              "type": "int",
              "value": null
            },
            {
              "name": "*",
              "type": "void ( * post_process ) ( int",
              "value": null
            },
            {
              "name": "unnamed",
              "type": "int )",
              "value": null
            }
          ],
          "return_type": "int"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "run_complex_tests",
          "parameters": [],
          "return_type": "void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "subtract_operation",
          "parameters": [
            {
              "name": "a",
              "type": "int",
              "value": null
            },
            {
              "name": "b",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "static int"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "test_callback",
          "parameters": [
            {
              "name": "item",
              "type": "int *",
              "value": null
            }
          ],
          "return_type": "static int"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "test_complex_macro",
          "parameters": [
            {
              "name": "x",
              "type": "int *",
              "value": null
            },
            {
              "name": "y",
              "type": "int",
              "value": null
            },
            {
              "name": "z",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "test_handle_operation",
          "parameters": [
            {
              "name": "op_type",
              "type": "operation_type_t",
              "value": null
            },
            {
              "name": "data",
              "type": "int *",
              "value": null
            },
            {
              "name": "size",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "test_handler_table",
          "parameters": [],
          "return_type": "void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "test_mixed_union",
          "parameters": [],
          "return_type": "void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "test_operation_set",
          "parameters": [],
          "return_type": "void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "test_process_array",
          "parameters": [
            {
              "name": "arr",
              "type": "int *",
              "value": null
            },
            {
              "name": "size",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "test_processor_job_processing",
          "parameters": [],
          "return_type": "void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "test_processor_utility_macros",
          "parameters": [],
          "return_type": "void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "test_stringify_macro",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "globals": [
        {
          "name": "Process_Cfg_Process_acpfct",
          "type": "Process_Cfg_Process_acpfct_t",
          "value": "{ \n & ProcessorAdapter_Process , \n & ProcessorService_Process , \n & ProcessorHardware_Process , \n }"
        },
        {
          "name": "]",
          "type": "math_operation_t global_math_ops [ 10",
          "value": "{ NULL }"
        }
      ],
      "include_relations": [],
      "includes": [
        "complex.h",
        "stdio.h",
        "stdlib.h",
        "string.h"
      ],
      "macros": [],
      "project_root": "/workspace/example/source",
      "relative_path": "complex.c",
      "structs": {},
      "unions": {}
    },
    "complex.h": {
      "aliases": {
        "Process_Cfg_Process_acpfct_t": {
          "name": "Process_Cfg_Process_acpfct_t",
          "original_type": "Process_Cfg_Process_fct Process_Cfg_Process_acpfct_t[PROCESSOR_CFG_MODULE_COUNT]",
          "uses": [
            "Process_Cfg_Process_fct"
          ]
        },
        "Process_Cfg_Process_fct": {
          "name": "Process_Cfg_Process_fct",
          "original_type": "Std_ReturnType(* Process_Cfg_Process_fct)(const Process_T * job_pst)",
          "uses": [
            "Process_T",
            "Std_ReturnType"
          ]
        },
        "Std_ReturnType": {
          "name": "Std_ReturnType",
          "original_type": "int",
          "uses": []
        },
        "complex_callback_t": {
          "name": "complex_callback_t",
          "original_type": "int(* complex_callback_t)(\n int param1 , \n char * param2 , \n void * param3 , \n struct { \n int nested1",
          "uses": []
        },
        "complex_func_ptr_t": {
          "name": "complex_func_ptr_t",
          "original_type": "int ( * ( * complex_func_ptr_t ) ( int , char * ) ) ( double , void * )",
          "uses": []
        },
        "data_processor_array_t": {
          "name": "data_processor_array_t",
          "original_type": "data_processor_t *",
          "uses": [
            "data_processor_t"
          ]
        },
        "data_processor_t": {
          "name": "data_processor_t",
          "original_type": "int(* data_processor_t)(data_item_t * item , void * context)",
          "uses": [
            "data_item_t"
          ]
        },
        "debug_callback_t": {
          "name": "debug_callback_t",
          "original_type": "void(* debug_callback_t)(const char * message , int level)",
          "uses": []
        },
        "handler_table_t": {
          "name": "handler_table_t",
          "original_type": "handler_entry_t handler_table_t[8]",
          "uses": [
            "handler_entry_t"
          ]
        },
        "math_operation_t": {
          "name": "math_operation_t",
          "original_type": "int(* math_operation_t)(int , int)",
          "uses": []
        },
        "math_ops_array_t": {
          "name": "math_ops_array_t",
          "original_type": "math_operation_t math_ops_array_t[10]",
          "uses": [
            "math_operation_t"
          ]
        },
        "release_callback_t": {
          "name": "release_callback_t",
          "original_type": "void(* release_callback_t)(const char * message)",
          "uses": []
        },
        "uint16": {
          "name": "uint16",
          "original_type": "uint16_t",
          "uses": []
        },
        "uint32": {
          "name": "uint32",
          "original_type": "uint32_t",
          "uses": []
        },
        "uint8": {
          "name": "uint8",
          "original_type": "uint8_t",
          "uses": []
        }
      },
      "encoding_used": "utf-8",
      "enums": {
        "operation_type_t": {
          "name": "operation_type_t",
          "tag_name": "",
          "values": [
            {
              "name": "OP_ADD",
              "value": "0"
            },
            {
              "name": "OP_SUB",
              "value": "1"
            },
            {
              "name": "OP_MUL",
              "value": "2"
            },
            {
              "name": "OP_DIV",
              "value": "3"
            }
          ]
        },
        "processor_module_enum_t": {
          "name": "processor_module_enum_t",
          "tag_name": "",
          "values": [
            {
              "name": "PROCESSOR_CFG_MODULE_COUNT",
              "value": "3"
            },
            {
              "name": "PROCESSOR_CFG_MODULE_ADAPTER",
              "value": "0"
            },
            {
              "name": "PROCESSOR_CFG_MODULE_SERVICE",
              "value": "1"
            },
            {
              "name": "PROCESSOR_CFG_MODULE_HARDWARE",
              "value": "2"
            }
          ]
        }
      },
      "file_path": "/workspace/example/source/complex.h",
      "functions": [
        {
          "is_declaration": true,
          "is_static": false,
          "name": "create_complex_handler",
          "parameters": [
            {
              "name": "name",
              "type": "const char *",
              "value": null
            },
            {
              "name": "validate_func",
              "type": "int ( * validate_func ) ( const char * )",
              "value": null
            },
            {
              "name": "alloc_func",
              "type": "void * ( * alloc_func ) ( size_t )",
              "value": null
            },
            {
              "name": "free_func",
              "type": "void ( * free_func ) ( void * )",
              "value": null
            }
          ],
          "return_type": "complex_handler_t *"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "create_handler",
          "parameters": [
            {
              "name": "name",
              "type": "const char *",
              "value": null
            },
            {
              "name": "init_func",
              "type": "int ( * init_func ) ( void * )",
              "value": null
            },
            {
              "name": "cleanup_func",
              "type": "void ( * cleanup_func ) ( void * )",
              "value": null
            },
            {
              "name": "unnamed",
              "type": "complex_callback_t callback",
              "value": null
            }
          ],
          "return_type": "void *"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "execute_operations",
          "parameters": [
            {
              "name": "value",
              "type": "int",
              "value": null
            },
            {
              "name": "ops",
              "type": "math_ops_array_t",
              "value": null
            },
            {
              "name": "unnamed",
              "type": "int op_count",
              "value": null
            }
          ],
          "return_type": "int"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "get_math_operations",
          "parameters": [],
          "return_type": "math_operation_t *"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "process_with_callbacks",
          "parameters": [
            {
              "name": "]",
              "type": "int data [",
              "value": null
            },
            {
              "name": "size",
              "type": "int",
              "value": null
            },
            {
              "name": "]",
              "type": "math_operation_t operations [",
              "value": null
            },
            {
              "name": "op_count",
              "type": "int",
              "value": null
            },
            {
              "name": "*",
              "type": "void ( * pre_process ) ( int",
              "value": null
            },
            {
              "name": ")",
              "type": "int",
              "value": null
            },
            {
              "name": "*",
              "type": "void ( * post_process ) ( int",
              "value": null
            },
            {
              "name": "unnamed",
              "type": "int )",
              "value": null
            }
          ],
          "return_type": "int"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "test_processor_job_processing",
          "parameters": [],
          "return_type": "void"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "test_processor_utility_macros",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "globals": [],
      "include_relations": [],
      "includes": [
        "stdbool.h",
        "stddef.h",
        "stdint.h"
      ],
      "macros": [
        "COMPLEX_H",
        "COMPLEX_MACRO_FUNC(x, y, z)",
        "CREATE_FUNC_NAME(prefix, suffix)",
        "DEPRECATED",
        "DEPRECATED",
        "HANDLE_OPERATION(op_type, data, size, callback)",
        "PROCESS_ARRAY(arr, size, callback)",
        "STRINGIFY(x)",
        "TOSTRING(x)",
        "UTILS_U16_TO_U8ARR_BIG_ENDIAN(value_u16, ptr_pau8)",
        "UTILS_U32_TO_U8ARR_BIG_ENDIAN(value_u32, ptr_pau8)",
        "UTILS_U8ARR_TO_U16_BIG_ENDIAN(ptr_pau8)",
        "UTILS_U8ARR_TO_U32_BIG_ENDIAN(ptr_pau8)"
      ],
      "project_root": "/workspace/example/source",
      "relative_path": "complex.h",
      "structs": {
        "Process_T": {
          "fields": [
            {
              "name": "job_id",
              "type": "int",
              "value": null
            },
            {
              "name": "job_data",
              "type": "char *",
              "value": null
            },
            {
              "name": "data_size",
              "type": "size_t",
              "value": null
            },
            {
              "name": "priority",
              "type": "int",
              "value": null
            }
          ],
          "methods": [],
          "name": "Process_T",
          "tag_name": "",
          "uses": []
        },
        "__anonymous_struct__": {
          "fields": [
            {
              "name": "max_size",
              "type": "int",
              "value": null
            },
            {
              "name": ")",
              "type": "void * ( * alloc_func ) ( size_t",
              "value": null
            },
            {
              "name": ")",
              "type": "void ( * free_func ) ( void *",
              "value": null
            },
            {
              "name": ")",
              "type": "int ( * resize_func ) ( void * * , size_t",
              "value": null
            }
          ],
          "methods": [],
          "name": "__anonymous_struct__",
          "tag_name": "",
          "uses": []
        },
        "complex_handler_t": {
          "fields": [
            {
              "name": "id",
              "type": "int",
              "value": null
            },
            {
              "name": "name",
              "type": "struct { \n char[32]",
              "value": null
            },
            {
              "name": ")",
              "type": "int ( * validate_func ) ( const char *",
              "value": null
            },
            {
              "name": ")",
              "type": "void ( * format_func ) ( char * , int",
              "value": null
            }
          ],
          "methods": [],
          "name": "complex_handler_t",
          "tag_name": "",
          "uses": []
        },
        "data_item_t": {
          "fields": [
            {
              "name": "value",
              "type": "int",
              "value": null
            },
            {
              "name": "name",
              "type": "char *",
              "value": null
            }
          ],
          "methods": [],
          "name": "data_item_t",
          "tag_name": "",
          "uses": []
        },
        "handler_entry_t": {
          "fields": [
            {
              "name": "id",
              "type": "int",
              "value": null
            },
            {
              "name": "name",
              "type": "char[16]",
              "value": null
            },
            {
              "name": ")",
              "type": "void ( * init_func ) ( void",
              "value": null
            },
            {
              "name": ")",
              "type": "int ( * process_func ) ( int , int",
              "value": null
            },
            {
              "name": ")",
              "type": "void ( * cleanup_func ) ( void",
              "value": null
            }
          ],
          "methods": [],
          "name": "handler_entry_t",
          "tag_name": "",
          "uses": []
        },
        "operation_set_t": {
          "fields": [
            {
              "name": "count",
              "type": "int",
              "value": null
            },
            {
              "name": "operations",
              "type": "math_operation_t[5]",
              "value": null
            },
            {
              "name": ")",
              "type": "void ( * callbacks [ 3 ] ) ( int , char *",
              "value": null
            }
          ],
          "methods": [],
          "name": "operation_set_t",
          "tag_name": "",
          "uses": [
            "math_operation_t"
          ]
        },
        "param4": {
          "fields": [
            {
              "name": "nested1",
              "type": "int",
              "value": null
            },
            {
              "name": "nested2",
              "type": "char *",
              "value": null
            },
            {
              "name": ")",
              "type": "void ( * nested_func ) ( int",
              "value": null
            }
          ],
          "methods": [],
          "name": "param4",
          "tag_name": "",
          "uses": []
        },
        "processor_t": {
          "fields": [
            {
              "name": "id",
              "type": "int",
              "value": null
            },
            {
              "name": "name",
              "type": "char[64]",
              "value": null
            },
            {
              "name": ")",
              "type": "int ( * process_func ) ( int , char *",
              "value": null
            },
            {
              "name": ")",
              "type": "void ( * cleanup_func ) ( void *",
              "value": null
            }
          ],
          "methods": [],
          "name": "processor_t",
          "tag_name": "",
          "uses": []
        }
      },
      "unions": {
        "mixed_union_t": {
          "fields": [
            {
              "name": "int_val",
              "type": "int",
              "value": null
            },
            {
              "name": "str_val",
              "type": "char *",
              "value": null
            },
            {
              "name": ")",
              "type": "void ( * void_func ) ( void",
              "value": null
            },
            {
              "name": ")",
              "type": "int ( * int_func ) ( int",
              "value": null
            }
          ],
          "name": "mixed_union_t",
          "tag_name": "",
          "uses": []
        }
      }
    },
    "complex_example.h": {
      "aliases": {},
      "encoding_used": "utf-8",
      "enums": {
        "CE_Status_t": {
          "name": "CE_Status_t",
          "tag_name": "CE_Status_tag",
          "values": [
            {
              "name": "CE_STATUS_OK",
              "value": "0"
            },
            {
              "name": "CE_STATUS_WARN",
              "value": null
            },
            {
              "name": "CE_STATUS_FAIL",
              "value": null
            }
          ]
        }
      },
      "file_path": "/workspace/example/source/complex_example.h",
      "functions": [],
      "globals": [],
      "include_relations": [],
      "includes": [
        "config.h",
        "logger.h"
      ],
      "macros": [
        "COMPLEX_EXAMPLE_H"
      ],
      "project_root": "/workspace/example/source",
      "relative_path": "complex_example.h",
      "structs": {
        "ComplexExample_t": {
          "fields": [
            {
              "name": "info",
              "type": "NestedInfo_t",
              "value": null
            },
            {
              "name": "status",
              "type": "CE_Status_t",
              "value": null
            },
            {
              "name": "values",
              "type": "int[5]",
              "value": null
            }
          ],
          "methods": [],
          "name": "ComplexExample_t",
          "tag_name": "ComplexExample_tag",
          "uses": [
            "CE_Status_t",
            "NestedInfo_t"
          ]
        },
        "NestedInfo_t": {
          "fields": [
            {
              "name": "id",
              "type": "id_t",
              "value": null
            },
            {
              "name": "description",
              "type": "char[MAX_LABEL_LEN]",
              "value": null
            },
            {
              "name": "log_level",
              "type": "log_level_t",
              "value": null
            }
          ],
          "methods": [],
          "name": "NestedInfo_t",
          "tag_name": "NestedInfo_tag",
          "uses": [
            "id_t",
            "log_level_t"
          ]
        }
      },
      "unions": {}
    },
    "config.h": {
      "aliases": {
        "id_t": {
          "name": "id_t",
          "original_type": "uint32_t",
          "uses": []
        },
        "status_t": {
          "name": "status_t",
          "original_type": "int32_t",
          "uses": []
        }
      },
      "encoding_used": "utf-8",
      "enums": {
        "GlobalStatus": {
          "name": "GlobalStatus",
          "tag_name": "",
          "values": [
            {
              "name": "GS_OK",
              "value": null
            },
            {
              "name": "GS_ERROR",
              "value": null
            },
            {
              "name": "GS_UNKNOWN",
              "value": null
            }
          ]
        }
      },
      "file_path": "/workspace/example/source/config.h",
      "functions": [],
      "globals": [],
      "include_relations": [],
      "includes": [
        "stddef.h",
        "stdint.h"
      ],
      "macros": [
        "CONFIG_H",
        "DEFAULT_BUFFER_SIZE",
        "MAX_LABEL_LEN",
        "PROJECT_NAME"
      ],
      "project_root": "/workspace/example/source",
      "relative_path": "config.h",
      "structs": {},
      "unions": {}
    },
    "geometry.c": {
      "aliases": {},
      "encoding_used": "utf-8",
      "enums": {},
      "file_path": "/workspace/example/source/geometry.c",
      "functions": [
        {
          "is_declaration": false,
          "is_static": false,
          "name": "create_triangle",
          "parameters": [
            {
              "name": "a",
              "type": "const point_t *",
              "value": null
            },
            {
              "name": "b",
              "type": "const point_t *",
              "value": null
            },
            {
              "name": "c",
              "type": "const point_t *",
              "value": null
            },
            {
              "name": "label",
              "type": "const char *",
              "value": null
            }
          ],
          "return_type": "triangle_t"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "triangle_area",
          "parameters": [
            {
              "name": "tri",
              "type": "const triangle_t *",
              "value": null
            }
          ],
          "return_type": "int"
        }
      ],
      "globals": [],
      "include_relations": [],
      "includes": [
        "geometry.h",
        "stdlib.h",
        "string.h"
      ],
      "macros": [],
      "project_root": "/workspace/example/source",
      "relative_path": "geometry.c",
      "structs": {},
      "unions": {}
    },
    "geometry.h": {
      "aliases": {},
      "encoding_used": "utf-8",
      "enums": {},
      "file_path": "/workspace/example/source/geometry.h",
      "functions": [
        {
          "is_declaration": true,
          "is_static": false,
          "name": "create_triangle",
          "parameters": [
            {
              "name": "a",
              "type": "const point_t *",
              "value": null
            },
            {
              "name": "b",
              "type": "const point_t *",
              "value": null
            },
            {
              "name": "c",
              "type": "const point_t *",
              "value": null
            },
            {
              "name": "label",
              "type": "const char *",
              "value": null
            }
          ],
          "return_type": "triangle_t"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "triangle_area",
          "parameters": [
            {
              "name": "tri",
              "type": "const triangle_t *",
              "value": null
            }
          ],
          "return_type": "int"
        }
      ],
      "globals": [],
      "include_relations": [],
      "includes": [
        "math_utils.h",
        "sample.h"
      ],
      "macros": [
        "GEOMETRY_H"
      ],
      "project_root": "/workspace/example/source",
      "relative_path": "geometry.h",
      "structs": {
        "triangle_t": {
          "fields": [
            {
              "name": "vertices",
              "type": "point_t[3]",
              "value": null
            },
            {
              "name": "label",
              "type": "char[MAX_LABEL_LEN]",
              "value": null
            }
          ],
          "methods": [],
          "name": "triangle_t",
          "tag_name": "triangle_tag",
          "uses": [
            "point_t"
          ]
        }
      },
      "unions": {}
    },
    "logger.c": {
      "aliases": {},
      "encoding_used": "utf-8",
      "enums": {},
      "file_path": "/workspace/example/source/logger.c",
      "functions": [
        {
          "is_declaration": false,
          "is_static": false,
          "name": "log_message",
          "parameters": [
            {
              "name": "level",
              "type": "log_level_t",
              "value": null
            },
            {
              "name": "fmt",
              "type": "const char *",
              "value": null
            },
            {
              "name": "...",
              "type": "...",
              "value": null
            }
          ],
          "return_type": "void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "set_log_callback",
          "parameters": [
            {
              "name": "cb",
              "type": "log_callback_t",
              "value": null
            }
          ],
          "return_type": "void"
        }
      ],
      "globals": [
        {
          "name": "current_cb",
          "type": "log_callback_t",
          "value": "NULL"
        }
      ],
      "include_relations": [],
      "includes": [
        "logger.h",
        "stdarg.h",
        "string.h"
      ],
      "macros": [],
      "project_root": "/workspace/example/source",
      "relative_path": "logger.c",
      "structs": {},
      "unions": {}
    },
    "logger.h": {
      "aliases": {
        "log_callback_t": {
          "name": "log_callback_t",
          "original_type": "void(* log_callback_t)(log_level_t level , const char * message)",
          "uses": [
            "log_level_t"
          ]
        }
      },
      "encoding_used": "utf-8",
      "enums": {
        "log_level_t": {
          "name": "log_level_t",
          "tag_name": "log_level_tag",
          "values": [
            {
              "name": "LOG_DEBUG",
              "value": "0"
            },
            {
              "name": "LOG_INFO",
              "value": null
            },
            {
              "name": "LOG_WARN",
              "value": null
            },
            {
              "name": "LOG_ERROR",
              "value": null
            }
          ]
        }
      },
      "file_path": "/workspace/example/source/logger.h",
      "functions": [
        {
          "is_declaration": true,
          "is_static": false,
          "name": "log_message",
          "parameters": [
            {
              "name": "level",
              "type": "log_level_t",
              "value": null
            },
            {
              "name": "fmt",
              "type": "const char *",
              "value": null
            },
            {
              "name": "...",
              "type": "...",
              "value": null
            }
          ],
          "return_type": "void"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "set_log_callback",
          "parameters": [
            {
              "name": "cb",
              "type": "log_callback_t",
              "value": null
            }
          ],
          "return_type": "void"
        }
      ],
      "globals": [],
      "include_relations": [],
      "includes": [
        "config.h",
        "stdio.h"
      ],
      "macros": [
        "LOGGER_H"
      ],
      "project_root": "/workspace/example/source",
      "relative_path": "logger.h",
      "structs": {},
      "unions": {}
    },
    "math_utils.c": {
      "aliases": {},
      "encoding_used": "utf-8",
      "enums": {},
      "file_path": "/workspace/example/source/math_utils.c",
      "functions": [
        {
          "is_declaration": false,
          "is_static": false,
          "name": "add",
          "parameters": [
            {
              "name": "a",
              "type": "int",
              "value": null
            },
            {
              "name": "b",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "int"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "average",
          "parameters": [
            {
              "name": "arr",
              "type": "const int *",
              "value": null
            },
            {
              "name": "len",
              "type": "size_t",
              "value": null
            }
          ],
          "return_type": "real_t"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "subtract",
          "parameters": [
            {
              "name": "a",
              "type": "int",
              "value": null
            },
            {
              "name": "b",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "int"
        }
      ],
      "globals": [],
      "include_relations": [],
      "includes": [
        "math_utils.h"
      ],
      "macros": [],
      "project_root": "/workspace/example/source",
      "relative_path": "math_utils.c",
      "structs": {},
      "unions": {}
    },
    "math_utils.h": {
      "aliases": {
        "math_op_t": {
          "name": "math_op_t",
          "original_type": "int(* math_op_t)(int , int)",
          "uses": []
        },
        "real_t": {
          "name": "real_t",
          "original_type": "double",
          "uses": []
        }
      },
      "encoding_used": "utf-8",
      "enums": {},
      "file_path": "/workspace/example/source/math_utils.h",
      "functions": [
        {
          "is_declaration": true,
          "is_static": false,
          "name": "add",
          "parameters": [
            {
              "name": "a",
              "type": "int",
              "value": null
            },
            {
              "name": "b",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "int"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "average",
          "parameters": [
            {
              "name": "arr",
              "type": "const int *",
              "value": null
            },
            {
              "name": "len",
              "type": "size_t",
              "value": null
            }
          ],
          "return_type": "real_t"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "subtract",
          "parameters": [
            {
              "name": "a",
              "type": "int",
              "value": null
            },
            {
              "name": "b",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "int"
        }
      ],
      "globals": [],
      "include_relations": [],
      "includes": [
        "config.h"
      ],
      "macros": [
        "MATH_UTILS_H"
      ],
      "project_root": "/workspace/example/source",
      "relative_path": "math_utils.h",
      "structs": {},
      "unions": {}
    },
    "preprocessed.c": {
      "aliases": {},
      "encoding_used": "utf-8",
      "enums": {},
      "file_path": "/workspace/example/source/preprocessed.c",
      "functions": [
        {
          "is_declaration": false,
          "is_static": false,
          "name": "complex_function",
          "parameters": [],
          "return_type": "void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "main",
          "parameters": [],
          "return_type": "int"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "test_function_pointers",
          "parameters": [],
          "return_type": "void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "test_preprocessing_edge_cases",
          "parameters": [],
          "return_type": "void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "test_typedef_preprocessing",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "globals": [],
      "include_relations": [],
      "includes": [
        "preprocessed.h",
        "stdio.h",
        "stdlib.h",
        "string.h"
      ],
      "macros": [],
      "project_root": "/workspace/example/source",
      "relative_path": "preprocessed.c",
      "structs": {},
      "unions": {}
    },
    "preprocessed.h": {
      "aliases": {
        "basic_callback_t": {
          "name": "basic_callback_t",
          "original_type": "int(* basic_callback_t)(void)",
          "uses": []
        },
        "feature_callback_t": {
          "name": "feature_callback_t",
          "original_type": "int(* feature_callback_t)(enabled_feature_t * feature)",
          "uses": [
            "enabled_feature_t"
          ]
        },
        "large_buffer_t": {
          "name": "large_buffer_t",
          "original_type": "char large_buffer_t[MAX_SIZE]",
          "uses": []
        },
        "small_buffer_t": {
          "name": "small_buffer_t",
          "original_type": "char small_buffer_t[MIN_SIZE]",
          "uses": []
        }
      },
      "encoding_used": "utf-8",
      "enums": {
        "status_t": {
          "name": "status_t",
          "tag_name": "",
          "values": [
            {
              "name": "STATUS_ENABLED",
              "value": "1"
            },
            {
              "name": "STATUS_DISABLED",
              "value": "0"
            },
            {
              "name": "STATUS_OFF",
              "value": "0"
            },
            {
              "name": "STATUS_UNKNOWN",
              "value": "- 1"
            }
          ]
        }
      },
      "file_path": "/workspace/example/source/preprocessed.h",
      "functions": [
        {
          "is_declaration": true,
          "is_static": false,
          "name": "debug_feature",
          "parameters": [
            {
              "name": "feature",
              "type": "enabled_feature_t *",
              "value": null
            }
          ],
          "return_type": "void"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "process_basic",
          "parameters": [],
          "return_type": "int"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "process_feature",
          "parameters": [
            {
              "name": "feature",
              "type": "enabled_feature_t *",
              "value": null
            }
          ],
          "return_type": "int"
        }
      ],
      "globals": [
        {
          "name": "global_basic",
          "type": "int",
          "value": null
        },
        {
          "name": "global_debug",
          "type": "debug_struct_t",
          "value": null
        },
        {
          "name": "global_feature",
          "type": "enabled_feature_t",
          "value": null
        }
      ],
      "include_relations": [],
      "includes": [
        "stddef.h",
        "stdint.h"
      ],
      "macros": [
        "DEBUG_MODE",
        "FEATURE_ENABLED",
        "MAX_SIZE",
        "MIN_SIZE",
        "PREPROCESSED_H"
      ],
      "project_root": "/workspace/example/source",
      "relative_path": "preprocessed.h",
      "structs": {
        "basic_struct_t": {
          "fields": [
            {
              "name": "basic_id",
              "type": "int",
              "value": null
            }
          ],
          "methods": [],
          "name": "basic_struct_t",
          "tag_name": "",
          "uses": []
        },
        "debug_enabled_t": {
          "fields": [
            {
              "name": "debug_enabled_id",
              "type": "int",
              "value": null
            },
            {
              "name": "debug_enabled_name",
              "type": "char[64]",
              "value": null
            }
          ],
          "methods": [],
          "name": "debug_enabled_t",
          "tag_name": "",
          "uses": []
        },
        "debug_feature_t": {
          "fields": [
            {
              "name": "debug_id",
              "type": "int",
              "value": null
            },
            {
              "name": "debug_name",
              "type": "char[64]",
              "value": null
            }
          ],
          "methods": [],
          "name": "debug_feature_t",
          "tag_name": "",
          "uses": []
        },
        "debug_optimized_t": {
          "fields": [
            {
              "name": "debug_field",
              "type": "int",
              "value": null
            },
            {
              "name": "debug_buffer",
              "type": "char[128]",
              "value": null
            }
          ],
          "methods": [],
          "name": "debug_optimized_t",
          "tag_name": "",
          "uses": []
        },
        "debug_struct_t": {
          "fields": [
            {
              "name": "debug_id",
              "type": "int",
              "value": null
            },
            {
              "name": "debug_name",
              "type": "char[64]",
              "value": null
            },
            {
              "name": "extra_debug_field",
              "type": "int",
              "value": null
            }
          ],
          "methods": [],
          "name": "debug_struct_t",
          "tag_name": "",
          "uses": []
        },
        "default_struct_t": {
          "fields": [
            {
              "name": "default_field",
              "type": "int",
              "value": null
            }
          ],
          "methods": [],
          "name": "default_struct_t",
          "tag_name": "",
          "uses": []
        },
        "disabled_feature_t": {
          "fields": [
            {
              "name": "id",
              "type": "int",
              "value": null
            }
          ],
          "methods": [],
          "name": "disabled_feature_t",
          "tag_name": "",
          "uses": []
        },
        "disabled_t": {
          "fields": [
            {
              "name": "disabled_id",
              "type": "int",
              "value": null
            }
          ],
          "methods": [],
          "name": "disabled_t",
          "tag_name": "",
          "uses": []
        },
        "enabled_feature_t": {
          "fields": [
            {
              "name": "id",
              "type": "int",
              "value": null
            },
            {
              "name": "name",
              "type": "char[32]",
              "value": null
            }
          ],
          "methods": [],
          "name": "enabled_feature_t",
          "tag_name": "",
          "uses": []
        },
        "enabled_t": {
          "fields": [
            {
              "name": "enabled_id",
              "type": "int",
              "value": null
            },
            {
              "name": "enabled_name",
              "type": "char[32]",
              "value": null
            }
          ],
          "methods": [],
          "name": "enabled_t",
          "tag_name": "",
          "uses": []
        },
        "feature_struct_t": {
          "fields": [
            {
              "name": "feature_id",
              "type": "int",
              "value": null
            },
            {
              "name": "feature_name",
              "type": "char[32]",
              "value": null
            }
          ],
          "methods": [],
          "name": "feature_struct_t",
          "tag_name": "",
          "uses": []
        },
        "optimized_struct_t": {
          "fields": [
            {
              "name": "optimized_field",
              "type": "int",
              "value": null
            },
            {
              "name": "large_buffer",
              "type": "char[MAX_SIZE]",
              "value": null
            },
            {
              "name": "small_buffer",
              "type": "char[MIN_SIZE]",
              "value": null
            }
          ],
          "methods": [],
          "name": "optimized_struct_t",
          "tag_name": "",
          "uses": []
        },
        "release_struct_t": {
          "fields": [
            {
              "name": "release_id",
              "type": "int",
              "value": null
            }
          ],
          "methods": [],
          "name": "release_struct_t",
          "tag_name": "",
          "uses": []
        },
        "simple_debug_t": {
          "fields": [
            {
              "name": "debug_id",
              "type": "int",
              "value": null
            }
          ],
          "methods": [],
          "name": "simple_debug_t",
          "tag_name": "",
          "uses": []
        }
      },
      "unions": {
        "basic_union_t": {
          "fields": [
            {
              "name": "int_value",
              "type": "int",
              "value": null
            },
            {
              "name": "char_value",
              "type": "char",
              "value": null
            }
          ],
          "name": "basic_union_t",
          "tag_name": "",
          "uses": []
        },
        "feature_union_t": {
          "fields": [
            {
              "name": "int_value",
              "type": "int",
              "value": null
            },
            {
              "name": "char_value",
              "type": "char",
              "value": null
            },
            {
              "name": "debug_value",
              "type": "double",
              "value": null
            }
          ],
          "name": "feature_union_t",
          "tag_name": "",
          "uses": []
        }
      }
    },
    "sample.c": {
      "aliases": {},
      "encoding_used": "utf-8",
      "enums": {},
      "file_path": "/workspace/example/source/sample.c",
      "functions": [
        {
          "is_declaration": true,
          "is_static": false,
          "name": "calculate_sum",
          "parameters": [
            {
              "name": "a",
              "type": "int",
              "value": null
            },
            {
              "name": "b",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "int"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "calculate_sum",
          "parameters": [
            {
              "name": "a",
              "type": "int",
              "value": null
            },
            {
              "name": "b",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "int"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "create_point",
          "parameters": [
            {
              "name": "x",
              "type": "int",
              "value": null
            },
            {
              "name": "y",
              "type": "int",
              "value": null
            },
            {
              "name": "label",
              "type": "const char *",
              "value": null
            }
          ],
          "return_type": "point_t *"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "create_point",
          "parameters": [
            {
              "name": "x",
              "type": "int",
              "value": null
            },
            {
              "name": "y",
              "type": "int",
              "value": null
            },
            {
              "name": "label",
              "type": "const char *",
              "value": null
            }
          ],
          "return_type": "point_t *"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "demo_triangle_usage",
          "parameters": [],
          "return_type": "void"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "internal_helper",
          "parameters": [],
          "return_type": "static void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "internal_helper",
          "parameters": [],
          "return_type": "static void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "main",
          "parameters": [],
          "return_type": "int"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "process_point",
          "parameters": [
            {
              "name": "p",
              "type": "point_t *",
              "value": null
            }
          ],
          "return_type": "void"
        }
      ],
      "globals": [
        {
          "name": "buffer",
          "type": "char",
          "value": null
        },
        {
          "name": "global_counter",
          "type": "int",
          "value": "0"
        },
        {
          "name": "global_ptr",
          "type": "double *",
          "value": "NULL"
        }
      ],
      "include_relations": [],
      "includes": [
        "geometry.h",
        "logger.h",
        "math_utils.h",
        "sample.h",
        "stdio.h",
        "stdlib.h",
        "string.h"
      ],
      "macros": [
        "CALC(x, y)",
        "DEBUG_MODE",
        "MAX_SIZE"
      ],
      "project_root": "/workspace/example/source",
      "relative_path": "sample.c",
      "structs": {},
      "unions": {}
    },
    "sample.h": {
      "aliases": {},
      "encoding_used": "utf-8",
      "enums": {
        "system_state_t": {
          "name": "system_state_t",
          "tag_name": "system_state_tag",
          "values": [
            {
              "name": "STATE_IDLE",
              "value": "0"
            },
            {
              "name": "STATE_RUNNING",
              "value": null
            },
            {
              "name": "STATE_ERROR",
              "value": null
            }
          ]
        }
      },
      "file_path": "/workspace/example/source/sample.h",
      "functions": [
        {
          "is_declaration": true,
          "is_static": false,
          "name": "calculate_sum",
          "parameters": [
            {
              "name": "a",
              "type": "int",
              "value": null
            },
            {
              "name": "b",
              "type": "int",
              "value": null
            }
          ],
          "return_type": "extern int"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "create_point",
          "parameters": [
            {
              "name": "x",
              "type": "int",
              "value": null
            },
            {
              "name": "y",
              "type": "int",
              "value": null
            },
            {
              "name": "label",
              "type": "const char *",
              "value": null
            }
          ],
          "return_type": "extern point_t *"
        },
        {
          "is_declaration": true,
          "is_static": false,
          "name": "process_point",
          "parameters": [
            {
              "name": "p",
              "type": "point_t *",
              "value": null
            }
          ],
          "return_type": "extern void"
        }
      ],
      "globals": [
        {
          "name": "DEFAULT_LABEL",
          "type": "char *",
          "value": null
        },
        {
          "name": "MAX_POINTS",
          "type": "int",
          "value": null
        }
      ],
      "include_relations": [],
      "includes": [
        "config.h",
        "geometry.h",
        "logger.h",
        "stddef.h"
      ],
      "macros": [
        "MAX(a, b)",
        "MIN(a, b)",
        "PI",
        "SAMPLE_H",
        "VERSION"
      ],
      "project_root": "/workspace/example/source",
      "relative_path": "sample.h",
      "structs": {
        "point_t": {
          "fields": [
            {
              "name": "x",
              "type": "int",
              "value": null
            },
            {
              "name": "y",
              "type": "int",
              "value": null
            },
            {
              "name": "label",
              "type": "char[32]",
              "value": null
            }
          ],
          "methods": [],
          "name": "point_t",
          "tag_name": "point_tag",
          "uses": []
        }
      },
      "unions": {}
    },
    "typedef_test.c": {
      "aliases": {},
      "encoding_used": "utf-8",
      "enums": {},
      "file_path": "/workspace/example/source/typedef_test.c",
      "functions": [
        {
          "is_declaration": false,
          "is_static": false,
          "name": "create_complex",
          "parameters": [
            {
              "name": "id",
              "type": "MyLen",
              "value": null
            },
            {
              "name": "name",
              "type": "MyString",
              "value": null
            }
          ],
          "return_type": "MyComplex *"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "log_buffer",
          "parameters": [
            {
              "name": "buffer",
              "type": "const MyBuffer *",
              "value": null
            }
          ],
          "return_type": "void"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "main",
          "parameters": [],
          "return_type": "int"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "my_callback",
          "parameters": [
            {
              "name": "buffer",
              "type": "MyBuffer *",
              "value": null
            }
          ],
          "return_type": "int"
        },
        {
          "is_declaration": false,
          "is_static": false,
          "name": "process_buffer",
          "parameters": [
            {
              "name": "buffer",
              "type": "MyBuffer *",
              "value": null
            }
          ],
          "return_type": "MyInt"
        }
      ],
      "globals": [
        {
          "name": "global_buffer",
          "type": "MyBuffer",
          "value": "{ 0 U , NULL }"
        },
        {
          "name": "global_complex",
          "type": "MyComplexPtr",
          "value": "NULL"
        },
        {
          "name": "global_length",
          "type": "MyLen",
          "value": "0 U"
        }
      ],
      "include_relations": [],
      "includes": [
        "complex_example.h",
        "geometry.h",
        "logger.h",
        "stdlib.h",
        "typedef_test.h"
      ],
      "macros": [],
      "project_root": "/workspace/example/source",
      "relative_path": "typedef_test.c",
      "structs": {},
      "unions": {}
    },
    "typedef_test.h": {
      "aliases": {
        "MyCallback": {
          "name": "MyCallback",
          "original_type": "int(* MyCallback)(MyBuffer * buffer)",
          "uses": [
            "MyBuffer"
          ]
        },
        "MyComplexArray": {
          "name": "MyComplexArray",
          "original_type": "MyComplexPtr MyComplexArray[10]",
          "uses": [
            "MyComplexPtr"
          ]
        },
        "MyComplexPtr": {
          "name": "MyComplexPtr",
          "original_type": "MyComplex *",
          "uses": [
            "MyComplex"
          ]
        },
        "MyInt": {
          "name": "MyInt",
          "original_type": "int32_t",
          "uses": []
        },
        "MyLen": {
          "name": "MyLen",
          "original_type": "uint32_t",
          "uses": []
        },
        "MyString": {
          "name": "MyString",
          "original_type": "char *",
          "uses": []
        }
      },
      "encoding_used": "utf-8",
      "enums": {
        "Color_t": {
          "name": "Color_t",
          "tag_name": "Color_tag",
          "values": [
            {
              "name": "COLOR_RED",
              "value": "0"
            },
            {
              "name": "COLOR_GREEN",
              "value": null
            },
            {
              "name": "COLOR_BLUE",
              "value": null
            }
          ]
        },
        "Status_t": {
          "name": "Status_t",
          "tag_name": "StatusEnum_tag",
          "values": [
            {
              "name": "STATUS_OK",
              "value": "0"
            },
            {
              "name": "STATUS_FAIL",
              "value": null
            }
          ]
        }
      },
      "file_path": "/workspace/example/source/typedef_test.h",
      "functions": [],
      "globals": [],
      "include_relations": [],
      "includes": [
        "config.h",
        "logger.h",
        "sample.h",
        "stdint.h"
      ],
      "macros": [
        "TYPEDEF_TEST_H"
      ],
      "project_root": "/workspace/example/source",
      "relative_path": "typedef_test.h",
      "structs": {
        "MyBuffer": {
          "fields": [
            {
              "name": "length",
              "type": "MyLen",
              "value": null
            },
            {
              "name": "data",
              "type": "MyString",
              "value": null
            }
          ],
          "methods": [],
          "name": "MyBuffer",
          "tag_name": "MyBuffer_tag",
          "uses": [
            "MyLen",
            "MyString"
          ]
        },
        "MyComplex": {
          "fields": [
            {
              "name": "id",
              "type": "MyLen",
              "value": null
            },
            {
              "name": "name",
              "type": "MyString",
              "value": null
            },
            {
              "name": "callback",
              "type": "MyCallback",
              "value": null
            },
            {
              "name": "log_level",
              "type": "log_level_t",
              "value": null
            }
          ],
          "methods": [],
          "name": "MyComplex",
          "tag_name": "MyComplexStruct_tag",
          "uses": [
            "MyCallback",
            "MyLen",
            "MyString",
            "log_level_t"
          ]
        },
        "NamedStruct_t": {
          "fields": [
            {
              "name": "a",
              "type": "int",
              "value": null
            },
            {
              "name": "b",
              "type": "int",
              "value": null
            }
          ],
          "methods": [],
          "name": "NamedStruct_t",
          "tag_name": "NamedStruct_tag",
          "uses": []
        },
        "Point_t": {
          "fields": [
            {
              "name": "x",
              "type": "int",
              "value": null
            },
            {
              "name": "y",
              "type": "int",
              "value": null
            }
          ],
          "methods": [],
          "name": "Point_t",
          "tag_name": "Point_tag",
          "uses": []
        }
      },
      "unions": {
        "NamedUnion_t": {
          "fields": [
            {
              "name": "c",
              "type": "char",
              "value": null
            },
            {
              "name": "d",
              "type": "double",
              "value": null
            }
          ],
          "name": "NamedUnion_t",
          "tag_name": "NamedUnion_tag",
          "uses": []
        },
        "Number_t": {
          "fields": [
            {
              "name": "i",
              "type": "int",
              "value": null
            },
            {
              "name": "f",
              "type": "float",
              "value": null
            }
          ],
          "name": "Number_t",
          "tag_name": "Number_tag",
          "uses": []
        }
      }
    }
  },
  "project_name": "example_project",
  "project_root": "example/source"
}