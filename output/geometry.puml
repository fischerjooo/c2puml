@startuml geometry

class "geometry" as GEOMETRY <<source>> #LightBlue
{
    -- Global Variables --
    triangle_t tri
    return tri
    int x1
    int y1
    int x2
    int y2
    int x3
    int y3
    return area
    -- Functions --
    triangle_t create_triangle()
    int triangle_area()
}

class "geometry" as HEADER_GEOMETRY <<header>> #LightGreen
{
    -- Macros --
    + #define GEOMETRY_H
    -- Functions --
    + triangle_t create_triangle()
    + int triangle_area()
}

class "string.h" as HEADER_STRING_H <<header>> #LightGray
{
    -- External Header --
    + (external)
}

class "stdlib.h" as HEADER_STDLIB_H <<header>> #LightGray
{
    -- External Header --
    + (external)
}

class "triangle_t" as TYPEDEF_TRIANGLE_T <<typedef>> #LightYellow
{
    + point_t[3] vertices
    + char[MAX_LABEL_LEN] label
}

HEADER_GEOMETRY --> HEADER_SAMPLE : <<include>>
HEADER_GEOMETRY --> HEADER_MATH_UTILS : <<include>>
GEOMETRY --> HEADER_GEOMETRY : <<include>>
GEOMETRY --> HEADER_STRING_H : <<include>>
GEOMETRY --> HEADER_STDLIB_H : <<include>>
HEADER_GEOMETRY ..> TYPEDEF_TRIANGLE_T : declares
TYPEDEF_TRIANGLE_T --> TYPEDEF_POINT_T : uses

@enduml