@startuml geometry

class "geometry" as GEOMETRY <<source>> #LightBlue
{
    -- Functions --
    #include "geometry.h" #include <string.h> #include <stdlib.h> triangle_t create_triangle(const point_t * a, const point_t * b, const point_t * c, const char * label)
    int triangle_area(const triangle_t * tri)
}

class "geometry" as HEADER_GEOMETRY <<header>> #LightGreen
{
    -- Macros --
    + #define GEOMETRY_H
    -- Typedefs --
    + typedef struct triangle_t
    -- Functions --
    + #ifndef GEOMETRY_H #define GEOMETRY_H #include "sample.h" #include "math_utils.h" typedef struct triangle_tag { point_t vertices [ 3 ] ; char label [ MAX_LABEL_LEN ] ; } triangle_t ; triangle_t create_triangle(const point_t * a, const point_t * b, const point_t * c, const char * label)
    + int triangle_area(const triangle_t * tri)
}

class "string.h" as HEADER_STRING_H <<header>> #LightGray
{
}

class "stdlib.h" as HEADER_STDLIB_H <<header>> #LightGray
{
}

class "sample" as HEADER_SAMPLE <<header>> #LightGreen
{
    -- Macros --
    + #define SAMPLE_H
    + #define PI
    + #define VERSION
    + #define MIN
    + #define MAX
    -- Typedefs --
    + typedef struct point_t
    + typedef enum system_state_t
    -- Global Variables --
    + int MAX_POINTS
    + char * DEFAULT_LABEL
    -- Functions --
    + #ifndef SAMPLE_H #define SAMPLE_H #include <stddef.h> #include "config.h" #define PI 3.14159 #define VERSION "1.0.0" typedef struct point_tag { int x ; int y ; char label [ 32 ] ; } point_t ; typedef enum system_state_tag { STATE_IDLE = 0 , STATE_RUNNING , STATE_ERROR } system_state_t ; extern int calculate_sum(int a, int b)
    + point_t * create_point(int x, int y, const char * label)
    + void process_point(point_t * p)
    -- Struct Fields --
    + int x
    + int y
    + char label [ 32 ]
}

class "config" as HEADER_CONFIG <<header>> #LightGreen
{
    -- Macros --
    + #define CONFIG_H
    + #define PROJECT_NAME
    + #define MAX_LABEL_LEN
    + #define DEFAULT_BUFFER_SIZE
    -- Typedefs --
    + typedef uint32_t id_t
    + typedef int32_t status_t
}

class "logger" as HEADER_LOGGER <<header>> #LightGreen
{
    -- Macros --
    + #define LOGGER_H
    -- Typedefs --
    + typedef enum log_level_t
    + typedef void ( * log_callback_t ) ( log_level_t level , const char * message ) log_callback_t
    -- Functions --
    + #ifndef LOGGER_H #define LOGGER_H #include <stdio.h> #include "config.h" typedef enum log_level_tag { LOG_DEBUG = 0 , LOG_INFO , LOG_WARN , LOG_ERROR } log_level_t ; typedef void ( * log_callback_t ) ( log_level_t level , const char * message ) ; void set_log_callback(log_callback_t cb)
    + void log_message(log_level_t level, const char * fmt, . . .)
}

class "math_utils" as HEADER_MATH_UTILS <<header>> #LightGreen
{
    -- Macros --
    + #define MATH_UTILS_H
    -- Typedefs --
    + typedef double real_t
    + typedef int ( * math_op_t ) ( int , int ) math_op_t
    -- Functions --
    + #ifndef MATH_UTILS_H #define MATH_UTILS_H #include "config.h" typedef double real_t ; typedef int ( * math_op_t ) ( int , int ) ; int add(int a, int b)
    + int subtract(int a, int b)
    + real_t average(const int * arr, size_t len)
}

class "triangle_t" as TYPEDEF_TRIANGLE_T <<typedef>> #LightYellow
{
    + typedef struct triangle_t
}

GEOMETRY --> HEADER_GEOMETRY : <<include>>
GEOMETRY --> HEADER_STRING_H : <<include>>
GEOMETRY --> HEADER_STDLIB_H : <<include>>
HEADER_GEOMETRY --> HEADER_SAMPLE : <<include>>
HEADER_GEOMETRY --> HEADER_MATH_UTILS : <<include>>
HEADER_SAMPLE --> HEADER_GEOMETRY : <<include>>

@enduml